{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createStringifySafeWithLimits = createStringifySafeWithLimits;\nexports.default = void 0;\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction createStringifySafeWithLimits(limits) {\n  var _limits$maxDepth = limits.maxDepth,\n    maxDepth = _limits$maxDepth === void 0 ? Number.POSITIVE_INFINITY : _limits$maxDepth,\n    _limits$maxStringLimi = limits.maxStringLimit,\n    maxStringLimit = _limits$maxStringLimi === void 0 ? Number.POSITIVE_INFINITY : _limits$maxStringLimi,\n    _limits$maxArrayLimit = limits.maxArrayLimit,\n    maxArrayLimit = _limits$maxArrayLimit === void 0 ? Number.POSITIVE_INFINITY : _limits$maxArrayLimit,\n    _limits$maxObjectKeys = limits.maxObjectKeysLimit,\n    maxObjectKeysLimit = _limits$maxObjectKeys === void 0 ? Number.POSITIVE_INFINITY : _limits$maxObjectKeys;\n  var stack = [];\n  function replacer(key, value) {\n    while (stack.length && this !== stack[0]) {\n      stack.shift();\n    }\n    if (typeof value === 'string') {\n      var truncatedString = '...(truncated)...';\n      if (value.length > maxStringLimit + truncatedString.length) {\n        return value.substring(0, maxStringLimit) + truncatedString;\n      }\n      return value;\n    }\n    if (typeof value !== 'object' || value === null) {\n      return value;\n    }\n    var retval = value;\n    if (Array.isArray(value)) {\n      if (stack.length >= maxDepth) {\n        retval = \"[ ... array with \" + value.length + \" values ... ]\";\n      } else if (value.length > maxArrayLimit) {\n        retval = value.slice(0, maxArrayLimit).concat([\"... extra \" + (value.length - maxArrayLimit) + \" values truncated ...\"]);\n      }\n    } else {\n      (0, _invariant.default)(typeof value === 'object', 'This was already found earlier');\n      var keys = Object.keys(value);\n      if (stack.length >= maxDepth) {\n        retval = \"{ ... object with \" + keys.length + \" keys ... }\";\n      } else if (keys.length > maxObjectKeysLimit) {\n        retval = {};\n        for (var _iterator = _createForOfIteratorHelperLoose(keys.slice(0, maxObjectKeysLimit)), _step; !(_step = _iterator()).done;) {\n          var k = _step.value;\n          retval[k] = value[k];\n        }\n        var truncatedKey = '...(truncated keys)...';\n        retval[truncatedKey] = keys.length - maxObjectKeysLimit;\n      }\n    }\n    stack.unshift(retval);\n    return retval;\n  }\n  return function stringifySafe(arg) {\n    if (arg === undefined) {\n      return 'undefined';\n    } else if (arg === null) {\n      return 'null';\n    } else if (typeof arg === 'function') {\n      try {\n        return arg.toString();\n      } catch (e) {\n        return '[function unknown]';\n      }\n    } else if (arg instanceof Error) {\n      return arg.name + ': ' + arg.message;\n    } else {\n      try {\n        var ret = JSON.stringify(arg, replacer);\n        if (ret === undefined) {\n          return '[\"' + typeof arg + '\" failed to stringify]';\n        }\n        return ret;\n      } catch (e) {\n        if (typeof arg.toString === 'function') {\n          try {\n            return arg.toString();\n          } catch (E) {}\n        }\n      }\n    }\n    return '[\"' + typeof arg + '\" failed to stringify]';\n  };\n}\nvar stringifySafe = createStringifySafeWithLimits({\n  maxDepth: 10,\n  maxStringLimit: 100,\n  maxArrayLimit: 50,\n  maxObjectKeysLimit: 50\n});\nvar _default = stringifySafe;\nexports.default = _default;","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","createStringifySafeWithLimits","default","_invariant","_createForOfIteratorHelperLoose","o","allowArrayLike","it","Symbol","iterator","call","next","bind","Array","isArray","_unsupportedIterableToArray","length","i","done","TypeError","minLen","_arrayLikeToArray","n","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","limits","_limits$maxDepth","maxDepth","Number","POSITIVE_INFINITY","_limits$maxStringLimi","maxStringLimit","_limits$maxArrayLimit","maxArrayLimit","_limits$maxObjectKeys","maxObjectKeysLimit","stack","replacer","key","shift","truncatedString","substring","retval","concat","invariant","keys","_iterator","_step","k","truncatedKey","unshift","stringifySafe","arg","undefined","e","Error","message","ret","JSON","stringify","E","_default"],"sources":["/home/ahmed/Music/softtag/Source Code/node_modules/react-native/Libraries/Utilities/stringifySafe.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\nimport invariant from 'invariant';\n\n/**\n * Tries to stringify with JSON.stringify and toString, but catches exceptions\n * (e.g. from circular objects) and always returns a string and never throws.\n */\nexport function createStringifySafeWithLimits(limits: {|\n  maxDepth?: number,\n  maxStringLimit?: number,\n  maxArrayLimit?: number,\n  maxObjectKeysLimit?: number,\n|}): mixed => string {\n  const {\n    maxDepth = Number.POSITIVE_INFINITY,\n    maxStringLimit = Number.POSITIVE_INFINITY,\n    maxArrayLimit = Number.POSITIVE_INFINITY,\n    maxObjectKeysLimit = Number.POSITIVE_INFINITY,\n  } = limits;\n  const stack = [];\n  function replacer(key: string, value: mixed): mixed {\n    while (stack.length && this !== stack[0]) {\n      stack.shift();\n    }\n\n    if (typeof value === 'string') {\n      const truncatedString = '...(truncated)...';\n      if (value.length > maxStringLimit + truncatedString.length) {\n        return value.substring(0, maxStringLimit) + truncatedString;\n      }\n      return value;\n    }\n    if (typeof value !== 'object' || value === null) {\n      return value;\n    }\n\n    let retval = value;\n    if (Array.isArray(value)) {\n      if (stack.length >= maxDepth) {\n        retval = `[ ... array with ${value.length} values ... ]`;\n      } else if (value.length > maxArrayLimit) {\n        retval = value\n          .slice(0, maxArrayLimit)\n          .concat([\n            `... extra ${value.length - maxArrayLimit} values truncated ...`,\n          ]);\n      }\n    } else {\n      // Add refinement after Array.isArray call.\n      invariant(typeof value === 'object', 'This was already found earlier');\n      let keys = Object.keys(value);\n      if (stack.length >= maxDepth) {\n        retval = `{ ... object with ${keys.length} keys ... }`;\n      } else if (keys.length > maxObjectKeysLimit) {\n        // Return a sample of the keys.\n        retval = {};\n        for (let k of keys.slice(0, maxObjectKeysLimit)) {\n          retval[k] = value[k];\n        }\n        const truncatedKey = '...(truncated keys)...';\n        retval[truncatedKey] = keys.length - maxObjectKeysLimit;\n      }\n    }\n    stack.unshift(retval);\n    return retval;\n  }\n\n  return function stringifySafe(arg: mixed): string {\n    if (arg === undefined) {\n      return 'undefined';\n    } else if (arg === null) {\n      return 'null';\n    } else if (typeof arg === 'function') {\n      try {\n        return arg.toString();\n      } catch (e) {\n        return '[function unknown]';\n      }\n    } else if (arg instanceof Error) {\n      return arg.name + ': ' + arg.message;\n    } else {\n      // Perform a try catch, just in case the object has a circular\n      // reference or stringify throws for some other reason.\n      try {\n        const ret = JSON.stringify(arg, replacer);\n        if (ret === undefined) {\n          return '[\"' + typeof arg + '\" failed to stringify]';\n        }\n        return ret;\n      } catch (e) {\n        if (typeof arg.toString === 'function') {\n          try {\n            // $FlowFixMe: toString shouldn't take any arguments in general.\n            return arg.toString();\n          } catch (E) {}\n        }\n      }\n    }\n    return '[\"' + typeof arg + '\" failed to stringify]';\n  };\n}\n\nconst stringifySafe: mixed => string = createStringifySafeWithLimits({\n  maxDepth: 10,\n  maxStringLimit: 100,\n  maxArrayLimit: 50,\n  maxObjectKeysLimit: 50,\n});\n\nexport default stringifySafe;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}