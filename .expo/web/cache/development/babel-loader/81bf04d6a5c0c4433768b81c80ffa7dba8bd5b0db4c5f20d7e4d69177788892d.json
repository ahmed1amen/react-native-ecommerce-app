{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\nvar _country = _interopRequireDefault(require(\"./country\"));\nvar _numberType = _interopRequireDefault(require(\"./resources/numberType.json\"));\nvar libPhoneNumber = require('google-libphonenumber');\nvar phoneUtil = libPhoneNumber.PhoneNumberUtil.getInstance();\nvar asYouTypeFormatter = libPhoneNumber.AsYouTypeFormatter;\nvar instance = null;\nvar PhoneNumber = function () {\n  function PhoneNumber() {\n    (0, _classCallCheck2.default)(this, PhoneNumber);\n  }\n  (0, _createClass2.default)(PhoneNumber, [{\n    key: \"getAllCountries\",\n    value: function getAllCountries() {\n      return _country.default.getAll();\n    }\n  }, {\n    key: \"getDialCode\",\n    value: function getDialCode(number) {\n      var dialCode = '';\n      if (number.charAt(0) === '+') {\n        var numericChars = '';\n        for (var i = 0; i < number.length; i++) {\n          var c = number.charAt(i);\n          if (this.isNumeric(c)) {\n            numericChars += c;\n            if (_country.default.getCountryCodes()[numericChars]) {\n              dialCode = number.substr(0, i + 1);\n            }\n            if (numericChars.length === 4) {\n              break;\n            }\n          }\n        }\n      }\n      return dialCode;\n    }\n  }, {\n    key: \"getNumeric\",\n    value: function getNumeric(str) {\n      return str.replace(/\\D/g, '');\n    }\n  }, {\n    key: \"isNumeric\",\n    value: function isNumeric(n) {\n      return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n  }, {\n    key: \"getCountryCodeOfNumber\",\n    value: function getCountryCodeOfNumber(number) {\n      var dialCode = this.getDialCode(number);\n      var numeric = this.getNumeric(dialCode);\n      var countryCode = _country.default.getCountryCodes()[numeric];\n      if (countryCode) {\n        return _lodash.default.first(countryCode.filter(function (iso2) {\n          return iso2;\n        }));\n      }\n      return '';\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(number, iso2) {\n      try {\n        return phoneUtil.parse(number, iso2);\n      } catch (err) {\n        console.log(\"Exception was thrown: \" + err.toString());\n        return null;\n      }\n    }\n  }, {\n    key: \"isValidNumber\",\n    value: function isValidNumber(number, iso2) {\n      var phoneInfo = this.parse(number, iso2);\n      if (phoneInfo) {\n        return phoneUtil.isValidNumber(phoneInfo);\n      }\n      return false;\n    }\n  }, {\n    key: \"format\",\n    value: function format(number, iso2) {\n      var formatter = new asYouTypeFormatter(iso2);\n      var formatted;\n      number.replace(/-/g, '').replace(/ /g, '').split('').forEach(function (n) {\n        return formatted = formatter.inputDigit(n);\n      });\n      return formatted;\n    }\n  }, {\n    key: \"getNumberType\",\n    value: function getNumberType(number, iso2) {\n      var phoneInfo = this.parse(number, iso2);\n      var type = phoneInfo ? phoneUtil.getNumberType(phoneInfo) : -1;\n      return _lodash.default.findKey(_numberType.default, function (noType) {\n        return noType === type;\n      });\n    }\n  }, {\n    key: \"getCountryDataByCode\",\n    value: function getCountryDataByCode(iso2) {\n      return _country.default.getCountryDataByCode(iso2);\n    }\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (!instance) {\n        instance = new PhoneNumber();\n      }\n      return instance;\n    }\n  }]);\n  return PhoneNumber;\n}();\nvar _default = PhoneNumber.getInstance();\nexports.default = _default;","map":{"version":3,"names":["_lodash","_interopRequireDefault","require","_country","_numberType","libPhoneNumber","phoneUtil","PhoneNumberUtil","getInstance","asYouTypeFormatter","AsYouTypeFormatter","instance","PhoneNumber","_classCallCheck2","default","_createClass2","key","value","getAllCountries","Country","getAll","getDialCode","number","dialCode","charAt","numericChars","i","length","c","isNumeric","getCountryCodes","substr","getNumeric","str","replace","n","isNaN","parseFloat","isFinite","getCountryCodeOfNumber","numeric","countryCode","_","first","filter","iso2","parse","err","console","log","toString","isValidNumber","phoneInfo","format","formatter","formatted","split","forEach","inputDigit","getNumberType","type","findKey","numberType","noType","getCountryDataByCode","_default","exports"],"sources":["/home/ahmed/Music/softtag/Source Code/node_modules/react-native-phone-input/lib/phoneNumber.js"],"sourcesContent":["import _ from 'lodash';\n\nimport Country from './country';\nimport numberType from './resources/numberType.json';\n\nconst libPhoneNumber = require('google-libphonenumber');\nconst phoneUtil = libPhoneNumber.PhoneNumberUtil.getInstance();\nconst asYouTypeFormatter = libPhoneNumber.AsYouTypeFormatter;\n\nlet instance = null;\n\nclass PhoneNumber {\n  static getInstance() {\n    if (!instance) {\n      instance = new PhoneNumber();\n    }\n    return instance;\n  }\n\n  getAllCountries() {\n    return Country.getAll();\n  }\n\n  getDialCode(number) {\n    let dialCode = '';\n    // only interested in international numbers (starting with a plus)\n    if (number.charAt(0) === '+') {\n      let numericChars = '';\n      // iterate over chars\n      for (let i = 0; i < number.length; i++) {\n        const c = number.charAt(i);\n        // if char is number\n        if (this.isNumeric(c)) {\n          numericChars += c;\n          // if current numericChars make a valid dial code\n          // if (this.countryCodes[numericChars]) {\n          if (Country.getCountryCodes()[numericChars]) {\n            // store the actual raw string (useful for matching later)\n            dialCode = number.substr(0, i + 1);\n          }\n          // longest dial code is 4 chars\n          if (numericChars.length === 4) {\n            break;\n          }\n        }\n      }\n    }\n    return dialCode;\n  }\n\n  getNumeric(str) {\n    return str.replace(/\\D/g, '');\n  }\n\n  isNumeric(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  getCountryCodeOfNumber(number) {\n    const dialCode = this.getDialCode(number);\n    const numeric = this.getNumeric(dialCode);\n    const countryCode = Country.getCountryCodes()[numeric];\n\n    // countryCode[0] can be null -> get first element that is not null\n    if (countryCode) {\n      return _.first(countryCode.filter(iso2 => iso2));\n    }\n\n    return '';\n  }\n\n  parse(number, iso2) {\n    try {\n      return phoneUtil.parse(number, iso2);\n    } catch (err) {\n      console.log(`Exception was thrown: ${err.toString()}`);\n      return null;\n    }\n  }\n\n  isValidNumber(number, iso2) {\n    const phoneInfo = this.parse(number, iso2);\n\n    if (phoneInfo) {\n      return phoneUtil.isValidNumber(phoneInfo);\n    }\n\n    return false;\n  }\n\n  format(number, iso2) {\n    const formatter = new asYouTypeFormatter(iso2)\n    let formatted;\n\n    number.replace(/-/g, '')\n      .replace(/ /g, '')\n      .split('')\n      .forEach(n => formatted = formatter.inputDigit(n));\n\n    return formatted;\n  }\n\n  getNumberType(number, iso2) {\n    const phoneInfo = this.parse(number, iso2);\n    const type = phoneInfo ? phoneUtil.getNumberType(phoneInfo) : -1;\n    return _.findKey(numberType, noType => noType === type);\n  }\n\n  getCountryDataByCode(iso2) {\n    return Country.getCountryDataByCode(iso2);\n  }\n}\n\nexport default PhoneNumber.getInstance();\n"],"mappings":";;;;;;;AAAA,IAAAA,OAAA,GAAAC,sBAAA,CAAAC,OAAA;AAEA,IAAAC,QAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,WAAA,GAAAH,sBAAA,CAAAC,OAAA;AAEA,IAAMG,cAAc,GAAGH,OAAO,CAAC,uBAAuB,CAAC;AACvD,IAAMI,SAAS,GAAGD,cAAc,CAACE,eAAe,CAACC,WAAW,EAAE;AAC9D,IAAMC,kBAAkB,GAAGJ,cAAc,CAACK,kBAAkB;AAE5D,IAAIC,QAAQ,GAAG,IAAI;AAAC,IAEdC,WAAW;EAAA,SAAAA,YAAA;IAAA,IAAAC,gBAAA,CAAAC,OAAA,QAAAF,WAAA;EAAA;EAAA,IAAAG,aAAA,CAAAD,OAAA,EAAAF,WAAA;IAAAI,GAAA;IAAAC,KAAA,EAQf,SAAAC,gBAAA,EAAkB;MAChB,OAAOC,gBAAO,CAACC,MAAM,EAAE;IACzB;EAAC;IAAAJ,GAAA;IAAAC,KAAA,EAED,SAAAI,YAAYC,MAAM,EAAE;MAClB,IAAIC,QAAQ,GAAG,EAAE;MAEjB,IAAID,MAAM,CAACE,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QAC5B,IAAIC,YAAY,GAAG,EAAE;QAErB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,MAAM,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;UACtC,IAAME,CAAC,GAAGN,MAAM,CAACE,MAAM,CAACE,CAAC,CAAC;UAE1B,IAAI,IAAI,CAACG,SAAS,CAACD,CAAC,CAAC,EAAE;YACrBH,YAAY,IAAIG,CAAC;YAGjB,IAAIT,gBAAO,CAACW,eAAe,EAAE,CAACL,YAAY,CAAC,EAAE;cAE3CF,QAAQ,GAAGD,MAAM,CAACS,MAAM,CAAC,CAAC,EAAEL,CAAC,GAAG,CAAC,CAAC;YACpC;YAEA,IAAID,YAAY,CAACE,MAAM,KAAK,CAAC,EAAE;cAC7B;YACF;UACF;QACF;MACF;MACA,OAAOJ,QAAQ;IACjB;EAAC;IAAAP,GAAA;IAAAC,KAAA,EAED,SAAAe,WAAWC,GAAG,EAAE;MACd,OAAOA,GAAG,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;IAC/B;EAAC;IAAAlB,GAAA;IAAAC,KAAA,EAED,SAAAY,UAAUM,CAAC,EAAE;MACX,OAAO,CAACC,KAAK,CAACC,UAAU,CAACF,CAAC,CAAC,CAAC,IAAIG,QAAQ,CAACH,CAAC,CAAC;IAC7C;EAAC;IAAAnB,GAAA;IAAAC,KAAA,EAED,SAAAsB,uBAAuBjB,MAAM,EAAE;MAC7B,IAAMC,QAAQ,GAAG,IAAI,CAACF,WAAW,CAACC,MAAM,CAAC;MACzC,IAAMkB,OAAO,GAAG,IAAI,CAACR,UAAU,CAACT,QAAQ,CAAC;MACzC,IAAMkB,WAAW,GAAGtB,gBAAO,CAACW,eAAe,EAAE,CAACU,OAAO,CAAC;MAGtD,IAAIC,WAAW,EAAE;QACf,OAAOC,eAAC,CAACC,KAAK,CAACF,WAAW,CAACG,MAAM,CAAC,UAAAC,IAAI;UAAA,OAAIA,IAAI;QAAA,EAAC,CAAC;MAClD;MAEA,OAAO,EAAE;IACX;EAAC;IAAA7B,GAAA;IAAAC,KAAA,EAED,SAAA6B,MAAMxB,MAAM,EAAEuB,IAAI,EAAE;MAClB,IAAI;QACF,OAAOvC,SAAS,CAACwC,KAAK,CAACxB,MAAM,EAAEuB,IAAI,CAAC;MACtC,CAAC,CAAC,OAAOE,GAAG,EAAE;QACZC,OAAO,CAACC,GAAG,4BAA0BF,GAAG,CAACG,QAAQ,EAAE,CAAG;QACtD,OAAO,IAAI;MACb;IACF;EAAC;IAAAlC,GAAA;IAAAC,KAAA,EAED,SAAAkC,cAAc7B,MAAM,EAAEuB,IAAI,EAAE;MAC1B,IAAMO,SAAS,GAAG,IAAI,CAACN,KAAK,CAACxB,MAAM,EAAEuB,IAAI,CAAC;MAE1C,IAAIO,SAAS,EAAE;QACb,OAAO9C,SAAS,CAAC6C,aAAa,CAACC,SAAS,CAAC;MAC3C;MAEA,OAAO,KAAK;IACd;EAAC;IAAApC,GAAA;IAAAC,KAAA,EAED,SAAAoC,OAAO/B,MAAM,EAAEuB,IAAI,EAAE;MACnB,IAAMS,SAAS,GAAG,IAAI7C,kBAAkB,CAACoC,IAAI,CAAC;MAC9C,IAAIU,SAAS;MAEbjC,MAAM,CAACY,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CACrBA,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CACjBsB,KAAK,CAAC,EAAE,CAAC,CACTC,OAAO,CAAC,UAAAtB,CAAC;QAAA,OAAIoB,SAAS,GAAGD,SAAS,CAACI,UAAU,CAACvB,CAAC,CAAC;MAAA,EAAC;MAEpD,OAAOoB,SAAS;IAClB;EAAC;IAAAvC,GAAA;IAAAC,KAAA,EAED,SAAA0C,cAAcrC,MAAM,EAAEuB,IAAI,EAAE;MAC1B,IAAMO,SAAS,GAAG,IAAI,CAACN,KAAK,CAACxB,MAAM,EAAEuB,IAAI,CAAC;MAC1C,IAAMe,IAAI,GAAGR,SAAS,GAAG9C,SAAS,CAACqD,aAAa,CAACP,SAAS,CAAC,GAAG,CAAC,CAAC;MAChE,OAAOV,eAAC,CAACmB,OAAO,CAACC,mBAAU,EAAE,UAAAC,MAAM;QAAA,OAAIA,MAAM,KAAKH,IAAI;MAAA,EAAC;IACzD;EAAC;IAAA5C,GAAA;IAAAC,KAAA,EAED,SAAA+C,qBAAqBnB,IAAI,EAAE;MACzB,OAAO1B,gBAAO,CAAC6C,oBAAoB,CAACnB,IAAI,CAAC;IAC3C;EAAC;IAAA7B,GAAA;IAAAC,KAAA,EAlGD,SAAAT,YAAA,EAAqB;MACnB,IAAI,CAACG,QAAQ,EAAE;QACbA,QAAQ,GAAG,IAAIC,WAAW,EAAE;MAC9B;MACA,OAAOD,QAAQ;IACjB;EAAC;EAAA,OAAAC,WAAA;AAAA;AAAA,IAAAqD,QAAA,GAgGYrD,WAAW,CAACJ,WAAW,EAAE;AAAA0D,OAAA,CAAApD,OAAA,GAAAmD,QAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}