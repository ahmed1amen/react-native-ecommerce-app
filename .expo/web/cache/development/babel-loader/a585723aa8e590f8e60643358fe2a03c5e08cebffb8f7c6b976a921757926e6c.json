{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.evaluateOnce = evaluateOnce;\nvar _InternalAnimatedValue = _interopRequireDefault(require(\"../core/InternalAnimatedValue\"));\nvar _AnimatedSet = require(\"../core/AnimatedSet\");\nvar _AnimatedCall = require(\"../core/AnimatedCall\");\nvar _AnimatedAlways = require(\"../core/AnimatedAlways\");\nvar _AnimatedCond = require(\"../core/AnimatedCond\");\nfunction evaluateOnce(node) {\n  var input = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var callback = arguments.length > 2 ? arguments[2] : undefined;\n  if (!Array.isArray(input)) {\n    input = [input];\n  }\n  var done = new _InternalAnimatedValue.default(0);\n  var evalNode = (0, _AnimatedCond.createAnimatedCond)(done, 0, (0, _AnimatedCall.createAnimatedCall)([node, (0, _AnimatedSet.createAnimatedSet)(done, 1)], function () {\n    callback && callback();\n    for (var i = 0; i < input.length; i++) {\n      input[i].__removeChild(alwaysNode);\n      alwaysNode.__detach();\n    }\n  }));\n  var alwaysNode = (0, _AnimatedAlways.createAnimatedAlways)(evalNode);\n  for (var i = 0; i < input.length; i++) {\n    input[i].__addChild(alwaysNode);\n    alwaysNode.__attach();\n  }\n}","map":{"version":3,"names":["_InternalAnimatedValue","_interopRequireDefault","require","_AnimatedSet","_AnimatedCall","_AnimatedAlways","_AnimatedCond","evaluateOnce","node","input","arguments","length","undefined","callback","Array","isArray","done","AnimatedValue","evalNode","cond","call","set","i","__removeChild","alwaysNode","__detach","always","__addChild","__attach"],"sources":["/home/ahmed/Music/softtag/Source Code/node_modules/react-native-reanimated/lib/module/derived/evaluateOnce.js"],"sourcesContent":["import AnimatedValue from '../core/InternalAnimatedValue';\nimport { createAnimatedSet as set } from '../core/AnimatedSet';\nimport { createAnimatedCall as call } from '../core/AnimatedCall';\nimport { createAnimatedAlways as always } from '../core/AnimatedAlways';\nimport { createAnimatedCond as cond } from '../core/AnimatedCond';\n\n/**\n * evaluate given node and notify children\n * @param node - node to be evaluated\n * @param input - nodes (or one node) representing values which states input for node.\n * @param callback - after callback\n */\n\nexport function evaluateOnce(node, input = [], callback) {\n  if (!Array.isArray(input)) {\n    input = [input];\n  }\n  const done = new AnimatedValue(0);\n  const evalNode = cond(\n    done,\n    0,\n    call([node, set(done, 1)], () => {\n      callback && callback();\n      for (let i = 0; i < input.length; i++) {\n        input[i].__removeChild(alwaysNode);\n        alwaysNode.__detach();\n      }\n    })\n  );\n  const alwaysNode = always(evalNode);\n  for (let i = 0; i < input.length; i++) {\n    input[i].__addChild(alwaysNode);\n    alwaysNode.__attach();\n  }\n}\n"],"mappings":";;;;;AAAA,IAAAA,sBAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,YAAA,GAAAD,OAAA;AACA,IAAAE,aAAA,GAAAF,OAAA;AACA,IAAAG,eAAA,GAAAH,OAAA;AACA,IAAAI,aAAA,GAAAJ,OAAA;AASO,SAASK,YAATA,CAAsBC,IAAtB,EAAkD;EAAA,IAAtBC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAApC;EAAA,IAAwCG,QAAxC,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EACL,IAAI,CAACE,KAAK,CAACC,OAAN,CAAcN,KAAd,CAAL,EAA2B;IACzBA,KAAK,GAAG,CAACA,KAAD,CAAR;EACD;EACD,IAAMO,IAAI,GAAG,IAAIC,8BAAJ,CAAkB,CAAlB,CAAb;EACA,IAAMC,QAAQ,GAAG,IAAAC,gCAAI,EACnBH,IADmB,EAEnB,CAFmB,EAGnB,IAAAI,gCAAI,EAAC,CAACZ,IAAD,EAAO,IAAAa,8BAAG,EAACL,IAAD,EAAO,CAAP,CAAV,CAAD,EAAuB,YAAM;IAC/BH,QAAQ,IAAIA,QAAQ,EAApB;IACA,KAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,KAAK,CAACE,MAA1B,EAAkCW,CAAC,EAAnC,EAAuC;MACrCb,KAAK,CAACa,CAAD,CAAL,CAASC,aAAT,CAAuBC,UAAvB;MACAA,UAAU,CAACC,QAAX;IACD;EACF,CANG,CAHe,CAArB;EAWA,IAAMD,UAAU,GAAG,IAAAE,oCAAM,EAACR,QAAD,CAAzB;EACA,KAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,KAAK,CAACE,MAA1B,EAAkCW,CAAC,EAAnC,EAAuC;IACrCb,KAAK,CAACa,CAAD,CAAL,CAASK,UAAT,CAAoBH,UAApB;IACAA,UAAU,CAACI,QAAX;EACD;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}