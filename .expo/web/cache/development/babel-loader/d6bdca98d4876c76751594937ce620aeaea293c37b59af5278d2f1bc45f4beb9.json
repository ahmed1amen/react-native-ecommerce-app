{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _extends3 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _reactNativeReanimated = _interopRequireDefault(require(\"react-native-reanimated\"));\nvar _GestureHandler = require(\"./GestureHandler\");\nvar _Overlay = _interopRequireDefault(require(\"./Overlay\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar Clock = _reactNativeReanimated.default.Clock,\n  Value = _reactNativeReanimated.default.Value,\n  onChange = _reactNativeReanimated.default.onChange,\n  clockRunning = _reactNativeReanimated.default.clockRunning,\n  startClock = _reactNativeReanimated.default.startClock,\n  stopClock = _reactNativeReanimated.default.stopClock,\n  spring = _reactNativeReanimated.default.spring,\n  abs = _reactNativeReanimated.default.abs,\n  add = _reactNativeReanimated.default.add,\n  and = _reactNativeReanimated.default.and,\n  block = _reactNativeReanimated.default.block,\n  call = _reactNativeReanimated.default.call,\n  cond = _reactNativeReanimated.default.cond,\n  divide = _reactNativeReanimated.default.divide,\n  eq = _reactNativeReanimated.default.eq,\n  event = _reactNativeReanimated.default.event,\n  greaterThan = _reactNativeReanimated.default.greaterThan,\n  lessThan = _reactNativeReanimated.default.lessThan,\n  max = _reactNativeReanimated.default.max,\n  min = _reactNativeReanimated.default.min,\n  multiply = _reactNativeReanimated.default.multiply,\n  neq = _reactNativeReanimated.default.neq,\n  or = _reactNativeReanimated.default.or,\n  set = _reactNativeReanimated.default.set,\n  sub = _reactNativeReanimated.default.sub;\nvar TRUE = 1;\nvar FALSE = 0;\nvar NOOP = 0;\nvar UNSET = -1;\nvar DIRECTION_LEFT = 1;\nvar DIRECTION_RIGHT = -1;\nvar SWIPE_DISTANCE_THRESHOLD_DEFAULT = 60;\nvar SWIPE_DISTANCE_MINIMUM = 5;\nvar DEFAULT_DRAWER_WIDTH = '80%';\nvar SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01\n};\nvar ANIMATED_ZERO = new _reactNativeReanimated.default.Value(0);\nvar ANIMATED_ONE = new _reactNativeReanimated.default.Value(1);\nvar DrawerView = function (_React$Component) {\n  (0, _inherits2.default)(DrawerView, _React$Component);\n  var _super = _createSuper(DrawerView);\n  function DrawerView() {\n    var _this;\n    (0, _classCallCheck2.default)(this, DrawerView);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleEndInteraction\", function () {\n      if (_this.interactionHandle !== undefined) {\n        _reactNative.InteractionManager.clearInteractionHandle(_this.interactionHandle);\n        _this.interactionHandle = undefined;\n      }\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleStartInteraction\", function () {\n      if (_this.interactionHandle === undefined) {\n        _this.interactionHandle = _reactNative.InteractionManager.createInteractionHandle();\n      }\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"getDrawerWidth\", function () {\n      var _this$props = _this.props,\n        drawerStyle = _this$props.drawerStyle,\n        dimensions = _this$props.dimensions;\n      var _ref = _reactNative.StyleSheet.flatten(drawerStyle) || {},\n        _ref$width = _ref.width,\n        width = _ref$width === void 0 ? DEFAULT_DRAWER_WIDTH : _ref$width;\n      if (typeof width === 'string' && width.endsWith('%')) {\n        var percentage = Number(width.replace(/%$/, ''));\n        if (Number.isFinite(percentage)) {\n          return dimensions.width * (percentage / 100);\n        }\n      }\n      return typeof width === 'number' ? width : 0;\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"clock\", new Clock());\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"interactionHandle\", void 0);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"isDrawerTypeFront\", new Value(_this.props.drawerType === 'front' ? TRUE : FALSE));\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"isOpen\", new Value(_this.props.open ? TRUE : FALSE));\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"nextIsOpen\", new Value(UNSET));\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"isSwiping\", new Value(FALSE));\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"initialDrawerWidth\", _this.getDrawerWidth());\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"gestureState\", new Value(_GestureHandler.GestureState.UNDETERMINED));\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"touchX\", new Value(0));\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"velocityX\", new Value(0));\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"gestureX\", new Value(0));\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"offsetX\", new Value(0));\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"position\", new Value(_this.props.open ? _this.initialDrawerWidth * (_this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT) : 0));\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"containerWidth\", new Value(_this.props.dimensions.width));\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"drawerWidth\", new Value(_this.initialDrawerWidth));\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"drawerOpacity\", new Value(_this.props.drawerType === 'permanent' ? 1 : 0));\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"drawerPosition\", new Value(_this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT));\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"touchDistanceFromDrawer\", cond(_this.isDrawerTypeFront, cond(eq(_this.drawerPosition, DIRECTION_LEFT), max(sub(sub(_this.touchX, _this.gestureX), _this.drawerWidth), 0), min(multiply(sub(sub(_this.containerWidth, _this.drawerWidth), sub(_this.touchX, _this.gestureX)), DIRECTION_RIGHT), 0)), 0));\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"swipeDistanceThreshold\", new Value(_this.props.swipeDistanceThreshold !== undefined ? _this.props.swipeDistanceThreshold : SWIPE_DISTANCE_THRESHOLD_DEFAULT));\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"swipeVelocityThreshold\", new Value(_this.props.swipeVelocityThreshold));\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"currentOpenValue\", _this.props.open);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"pendingOpenValue\", void 0);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"isStatusBarHidden\", false);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"manuallyTriggerSpring\", new Value(FALSE));\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"transitionTo\", function (isOpen) {\n      var toValue = new Value(0);\n      var frameTime = new Value(0);\n      var state = {\n        position: _this.position,\n        time: new Value(0),\n        finished: new Value(FALSE),\n        velocity: new Value(0)\n      };\n      return block([cond(clockRunning(_this.clock), NOOP, [set(toValue, multiply(isOpen, _this.drawerWidth, _this.drawerPosition)), set(frameTime, 0), set(state.time, 0), set(state.finished, FALSE), set(state.velocity, _this.velocityX), set(_this.isOpen, isOpen), startClock(_this.clock), call([], _this.handleStartInteraction), set(_this.manuallyTriggerSpring, FALSE)]), spring(_this.clock, state, (0, _extends3.default)({}, SPRING_CONFIG, {\n        toValue: toValue\n      })), cond(state.finished, [set(_this.touchX, 0), set(_this.gestureX, 0), set(_this.velocityX, 0), set(_this.offsetX, 0), stopClock(_this.clock), call([_this.isOpen], function (_ref2) {\n        var _ref3 = (0, _slicedToArray2.default)(_ref2, 1),\n          value = _ref3[0];\n        var open = Boolean(value);\n        _this.handleEndInteraction();\n        if (open !== _this.props.open) {\n          _this.toggleDrawer(_this.props.open);\n        }\n      })])]);\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"dragX\", block([onChange(_this.isOpen, call([_this.isOpen], function (_ref4) {\n      var _ref5 = (0, _slicedToArray2.default)(_ref4, 1),\n        value = _ref5[0];\n      var open = Boolean(value);\n      _this.currentOpenValue = open;\n      if (open !== _this.props.open) {\n        if (open) {\n          _this.props.onOpen();\n        } else {\n          _this.props.onClose();\n        }\n        _this.pendingOpenValue = open;\n        _this.forceUpdate();\n      }\n    })), onChange(_this.nextIsOpen, cond(neq(_this.nextIsOpen, UNSET), [cond(clockRunning(_this.clock), stopClock(_this.clock)), set(_this.isOpen, _this.nextIsOpen), set(_this.gestureX, 0), set(_this.nextIsOpen, UNSET)])), onChange(_this.isSwiping, call([_this.isSwiping], function (_ref6) {\n      var _ref7 = (0, _slicedToArray2.default)(_ref6, 1),\n        value = _ref7[0];\n      var keyboardDismissMode = _this.props.keyboardDismissMode;\n      if (value === TRUE) {\n        if (keyboardDismissMode === 'on-drag') {\n          _reactNative.Keyboard.dismiss();\n        }\n        _this.toggleStatusBar(true);\n      } else {\n        _this.toggleStatusBar(_this.currentOpenValue);\n      }\n    })), onChange(_this.gestureState, cond(eq(_this.gestureState, _GestureHandler.GestureState.ACTIVE), call([], _this.handleStartInteraction))), cond(eq(_this.gestureState, _GestureHandler.GestureState.ACTIVE), [cond(_this.isSwiping, NOOP, [set(_this.isSwiping, TRUE), set(_this.offsetX, _this.position)]), set(_this.position, add(_this.offsetX, _this.gestureX, _this.touchDistanceFromDrawer)), stopClock(_this.clock)], [set(_this.isSwiping, FALSE), set(_this.touchX, 0), _this.transitionTo(cond(_this.manuallyTriggerSpring, _this.isOpen, cond(or(and(greaterThan(abs(_this.gestureX), SWIPE_DISTANCE_MINIMUM), greaterThan(abs(_this.velocityX), _this.swipeVelocityThreshold)), greaterThan(abs(_this.gestureX), _this.swipeDistanceThreshold)), cond(eq(_this.drawerPosition, DIRECTION_LEFT), greaterThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0), lessThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0)), _this.isOpen)))]), _this.position]));\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"translateX\", cond(eq(_this.drawerPosition, DIRECTION_RIGHT), min(max(multiply(_this.drawerWidth, -1), _this.dragX), 0), max(min(_this.drawerWidth, _this.dragX), 0)));\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"progress\", cond(eq(_this.drawerWidth, 0), 0, abs(divide(_this.translateX, _this.drawerWidth))));\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleGestureEvent\", event([{\n      nativeEvent: {\n        x: _this.touchX,\n        translationX: _this.gestureX,\n        velocityX: _this.velocityX\n      }\n    }]));\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleGestureStateChange\", event([{\n      nativeEvent: {\n        state: function state(s) {\n          return set(_this.gestureState, s);\n        }\n      }\n    }]));\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleTapStateChange\", event([{\n      nativeEvent: {\n        oldState: function oldState(s) {\n          return cond(eq(s, _GestureHandler.GestureState.ACTIVE), set(_this.manuallyTriggerSpring, TRUE));\n        }\n      }\n    }]));\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleContainerLayout\", function (e) {\n      return _this.containerWidth.setValue(e.nativeEvent.layout.width);\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleDrawerLayout\", function (e) {\n      _this.drawerWidth.setValue(e.nativeEvent.layout.width);\n      _this.toggleDrawer(_this.props.open);\n      requestAnimationFrame(function () {\n        return requestAnimationFrame(function () {\n          return _this.drawerOpacity.setValue(1);\n        });\n      });\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"toggleDrawer\", function (open) {\n      if (_this.currentOpenValue !== open) {\n        _this.nextIsOpen.setValue(open ? TRUE : FALSE);\n        _this.currentOpenValue = open;\n      }\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"toggleStatusBar\", function (hidden) {\n      var _this$props2 = _this.props,\n        hideStatusBar = _this$props2.hideStatusBar,\n        statusBarAnimation = _this$props2.statusBarAnimation;\n      if (hideStatusBar && _this.isStatusBarHidden !== hidden) {\n        _this.isStatusBarHidden = hidden;\n        _reactNative.StatusBar.setHidden(hidden, statusBarAnimation);\n      }\n    });\n    return _this;\n  }\n  (0, _createClass2.default)(DrawerView, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props3 = this.props,\n        open = _this$props3.open,\n        drawerPosition = _this$props3.drawerPosition,\n        drawerType = _this$props3.drawerType,\n        swipeDistanceThreshold = _this$props3.swipeDistanceThreshold,\n        swipeVelocityThreshold = _this$props3.swipeVelocityThreshold,\n        hideStatusBar = _this$props3.hideStatusBar;\n      if (typeof this.pendingOpenValue !== 'boolean' || open !== this.pendingOpenValue) {\n        this.toggleDrawer(open);\n      }\n      this.pendingOpenValue = undefined;\n      if (open !== prevProps.open && hideStatusBar) {\n        this.toggleStatusBar(open);\n      }\n      if (prevProps.drawerPosition !== drawerPosition) {\n        this.drawerPosition.setValue(drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT);\n      }\n      if (prevProps.drawerType !== drawerType) {\n        this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n      }\n      if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n        this.swipeDistanceThreshold.setValue(swipeDistanceThreshold !== undefined ? swipeDistanceThreshold : SWIPE_DISTANCE_THRESHOLD_DEFAULT);\n      }\n      if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n        this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.toggleStatusBar(false);\n      this.handleEndInteraction();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props4 = this.props,\n        open = _this$props4.open,\n        gestureEnabled = _this$props4.gestureEnabled,\n        swipeEnabled = _this$props4.swipeEnabled,\n        drawerPosition = _this$props4.drawerPosition,\n        drawerType = _this$props4.drawerType,\n        swipeEdgeWidth = _this$props4.swipeEdgeWidth,\n        sceneContainerStyle = _this$props4.sceneContainerStyle,\n        drawerStyle = _this$props4.drawerStyle,\n        overlayStyle = _this$props4.overlayStyle,\n        renderDrawerContent = _this$props4.renderDrawerContent,\n        renderSceneContent = _this$props4.renderSceneContent,\n        gestureHandlerProps = _this$props4.gestureHandlerProps;\n      var isOpen = drawerType === 'permanent' ? true : open;\n      var isRight = drawerPosition === 'right';\n      var contentTranslateX = drawerType === 'front' || drawerType === 'permanent' ? ANIMATED_ZERO : this.translateX;\n      var drawerTranslateX = drawerType === 'permanent' ? ANIMATED_ZERO : drawerType === 'back' ? _reactNative.I18nManager.isRTL ? multiply(sub(this.containerWidth, this.drawerWidth), isRight ? 1 : -1) : ANIMATED_ZERO : this.translateX;\n      var offset = drawerType === 'back' ? 0 : _reactNative.I18nManager.isRTL ? '100%' : multiply(this.drawerWidth, -1);\n      var hitSlop = isRight ? {\n        right: 0,\n        width: isOpen ? undefined : swipeEdgeWidth\n      } : {\n        left: 0,\n        width: isOpen ? undefined : swipeEdgeWidth\n      };\n      var progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n      return React.createElement(_GestureHandler.PanGestureHandler, _extends({\n        activeOffsetX: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n        failOffsetY: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n        onGestureEvent: this.handleGestureEvent,\n        onHandlerStateChange: this.handleGestureStateChange,\n        hitSlop: hitSlop,\n        enabled: drawerType !== 'permanent' && gestureEnabled && swipeEnabled\n      }, gestureHandlerProps), React.createElement(_reactNativeReanimated.default.View, {\n        onLayout: this.handleContainerLayout,\n        style: [styles.main, {\n          flexDirection: drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row'\n        }]\n      }, React.createElement(_reactNativeReanimated.default.View, {\n        style: [styles.content, {\n          transform: [{\n            translateX: contentTranslateX\n          }]\n        }, sceneContainerStyle]\n      }, React.createElement(_reactNative.View, {\n        accessibilityElementsHidden: isOpen && drawerType !== 'permanent',\n        importantForAccessibility: isOpen && drawerType !== 'permanent' ? 'no-hide-descendants' : 'auto',\n        style: styles.content\n      }, renderSceneContent({\n        progress: progress\n      })), drawerType === 'permanent' ? null : _reactNative.Platform.OS === 'web' || _reactNative.Platform.OS === 'windows' || _reactNative.Platform.OS === 'macos' ? React.createElement(_reactNative.TouchableWithoutFeedback, {\n        onPress: gestureEnabled ? function () {\n          return _this2.toggleDrawer(false);\n        } : undefined\n      }, React.createElement(_Overlay.default, {\n        progress: progress,\n        style: overlayStyle\n      })) : React.createElement(_GestureHandler.TapGestureHandler, {\n        enabled: gestureEnabled,\n        onHandlerStateChange: this.handleTapStateChange\n      }, React.createElement(_Overlay.default, {\n        progress: progress,\n        style: overlayStyle\n      }))), React.createElement(_reactNativeReanimated.default.Code, {\n        exec: this.containerWidth\n      }), drawerType === 'permanent' ? null : React.createElement(_reactNativeReanimated.default.Code, {\n        exec: block([onChange(this.manuallyTriggerSpring, [cond(eq(this.manuallyTriggerSpring, TRUE), [set(this.nextIsOpen, FALSE), call([], function () {\n          return _this2.currentOpenValue = false;\n        })])])])\n      }), React.createElement(_reactNativeReanimated.default.View, {\n        accessibilityViewIsModal: isOpen && drawerType !== 'permanent',\n        removeClippedSubviews: _reactNative.Platform.OS !== 'ios',\n        onLayout: this.handleDrawerLayout,\n        style: [styles.container, {\n          transform: [{\n            translateX: drawerTranslateX\n          }],\n          opacity: this.drawerOpacity\n        }, drawerType === 'permanent' ? isRight ? {\n          right: 0\n        } : {\n          left: 0\n        } : [styles.nonPermanent, isRight ? {\n          right: offset\n        } : {\n          left: offset\n        }, {\n          zIndex: drawerType === 'back' ? -1 : 0\n        }], drawerStyle]\n      }, renderDrawerContent({\n        progress: progress\n      }))));\n    }\n  }]);\n  return DrawerView;\n}(React.Component);\nexports.default = DrawerView;\n_defineProperty(DrawerView, \"defaultProps\", {\n  drawerPosition: _reactNative.I18nManager.isRTL ? 'left' : 'right',\n  drawerType: 'front',\n  gestureEnabled: true,\n  swipeEnabled: _reactNative.Platform.OS !== 'web' && _reactNative.Platform.OS !== 'windows' && _reactNative.Platform.OS !== 'macos',\n  swipeEdgeWidth: 32,\n  swipeVelocityThreshold: 500,\n  keyboardDismissMode: 'on-drag',\n  hideStatusBar: false,\n  statusBarAnimation: 'slide'\n});\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%'\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: DEFAULT_DRAWER_WIDTH\n  },\n  content: {\n    flex: 1\n  },\n  main: (0, _extends3.default)({\n    flex: 1\n  }, _reactNative.Platform.select({\n    web: null,\n    default: {\n      overflow: 'hidden'\n    }\n  }))\n});","map":{"version":3,"names":["React","_interopRequireWildcard","require","_reactNative","_reactNativeReanimated","_interopRequireDefault","_GestureHandler","_Overlay","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","constructor","Reflect","construct","arguments","apply","_possibleConstructorReturn2","sham","Proxy","Boolean","valueOf","e","Clock","Animated","Value","onChange","clockRunning","startClock","stopClock","spring","abs","add","and","block","cond","divide","eq","event","greaterThan","lessThan","max","min","multiply","neq","or","sub","TRUE","FALSE","NOOP","UNSET","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_THRESHOLD_DEFAULT","SWIPE_DISTANCE_MINIMUM","DEFAULT_DRAWER_WIDTH","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","ANIMATED_ZERO","ANIMATED_ONE","DrawerView","_React$Component","_inherits2","_super","_this","_classCallCheck2","_len","length","args","Array","_key","concat","_defineProperty","_assertThisInitialized2","interactionHandle","undefined","InteractionManager","clearInteractionHandle","createInteractionHandle","_this$props","props","drawerStyle","dimensions","_ref","StyleSheet","flatten","_ref$width","width","endsWith","percentage","Number","replace","isFinite","drawerType","open","getDrawerWidth","GestureState","UNDETERMINED","initialDrawerWidth","drawerPosition","isDrawerTypeFront","touchX","gestureX","drawerWidth","containerWidth","swipeDistanceThreshold","swipeVelocityThreshold","isOpen","toValue","frameTime","state","position","time","finished","velocity","clock","velocityX","handleStartInteraction","manuallyTriggerSpring","_extends3","offsetX","_ref2","_ref3","_slicedToArray2","value","handleEndInteraction","toggleDrawer","_ref4","_ref5","currentOpenValue","onOpen","onClose","pendingOpenValue","forceUpdate","nextIsOpen","isSwiping","_ref6","_ref7","keyboardDismissMode","Keyboard","dismiss","toggleStatusBar","gestureState","ACTIVE","touchDistanceFromDrawer","transitionTo","dragX","translateX","nativeEvent","x","translationX","s","oldState","setValue","layout","requestAnimationFrame","drawerOpacity","hidden","_this$props2","hideStatusBar","statusBarAnimation","isStatusBarHidden","StatusBar","setHidden","_createClass2","componentDidUpdate","prevProps","_this$props3","componentWillUnmount","render","_this2","_this$props4","gestureEnabled","swipeEnabled","swipeEdgeWidth","sceneContainerStyle","overlayStyle","renderDrawerContent","renderSceneContent","gestureHandlerProps","isRight","contentTranslateX","drawerTranslateX","I18nManager","isRTL","offset","hitSlop","right","left","progress","createElement","PanGestureHandler","_extends","activeOffsetX","failOffsetY","onGestureEvent","handleGestureEvent","onHandlerStateChange","handleGestureStateChange","enabled","View","onLayout","handleContainerLayout","style","styles","main","flexDirection","content","transform","accessibilityElementsHidden","importantForAccessibility","Platform","OS","TouchableWithoutFeedback","onPress","Overlay","TapGestureHandler","handleTapStateChange","Code","exec","accessibilityViewIsModal","removeClippedSubviews","handleDrawerLayout","container","opacity","nonPermanent","zIndex","Component","exports","create","backgroundColor","maxWidth","top","bottom","flex","select","web","overflow"],"sources":["/home/ahmed/Music/softtag/Source Code/node_modules/@react-navigation/drawer/lib/module/views/Drawer.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  ViewStyle,\n  LayoutChangeEvent,\n  I18nManager,\n  Platform,\n  Keyboard,\n  StatusBar,\n  StyleProp,\n  View,\n  InteractionManager,\n  TouchableWithoutFeedback,\n} from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport {\n  PanGestureHandler,\n  TapGestureHandler,\n  GestureState,\n} from './GestureHandler';\nimport Overlay from './Overlay';\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub,\n} = Animated;\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_THRESHOLD_DEFAULT = 60;\nconst SWIPE_DISTANCE_MINIMUM = 5;\n\nconst DEFAULT_DRAWER_WIDTH = '80%';\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\nconst ANIMATED_ZERO = new Animated.Value(0);\nconst ANIMATED_ONE = new Animated.Value(1);\n\ntype Binary = 0 | 1;\n\ntype Renderer = (props: { progress: Animated.Node<number> }) => React.ReactNode;\n\ntype Props = {\n  open: boolean;\n  onOpen: () => void;\n  onClose: () => void;\n  gestureEnabled: boolean;\n  swipeEnabled: boolean;\n  drawerPosition: 'left' | 'right';\n  drawerType: 'front' | 'back' | 'slide' | 'permanent';\n  keyboardDismissMode: 'none' | 'on-drag';\n  swipeEdgeWidth: number;\n  swipeDistanceThreshold?: number;\n  swipeVelocityThreshold: number;\n  hideStatusBar: boolean;\n  statusBarAnimation: 'slide' | 'none' | 'fade';\n  overlayStyle?: StyleProp<ViewStyle>;\n  drawerStyle?: StyleProp<ViewStyle>;\n  sceneContainerStyle?: StyleProp<ViewStyle>;\n  renderDrawerContent: Renderer;\n  renderSceneContent: Renderer;\n  gestureHandlerProps?: React.ComponentProps<typeof PanGestureHandler>;\n  dimensions: { width: number; height: number };\n};\n\nexport default class DrawerView extends React.Component<Props> {\n  static defaultProps = {\n    drawerPosition: I18nManager.isRTL ? 'left' : 'right',\n    drawerType: 'front',\n    gestureEnabled: true,\n    swipeEnabled:\n      Platform.OS !== 'web' &&\n      Platform.OS !== 'windows' &&\n      Platform.OS !== 'macos',\n    swipeEdgeWidth: 32,\n    swipeVelocityThreshold: 500,\n    keyboardDismissMode: 'on-drag',\n    hideStatusBar: false,\n    statusBarAnimation: 'slide',\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      hideStatusBar,\n    } = this.props;\n\n    if (\n      // If we're not in the middle of a transition, sync the drawer's open state\n      typeof this.pendingOpenValue !== 'boolean' ||\n      open !== this.pendingOpenValue\n    ) {\n      this.toggleDrawer(open);\n    }\n\n    this.pendingOpenValue = undefined;\n\n    if (open !== prevProps.open && hideStatusBar) {\n      this.toggleStatusBar(open);\n    }\n\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(\n        drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n      );\n    }\n\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n      this.swipeDistanceThreshold.setValue(\n        swipeDistanceThreshold !== undefined\n          ? swipeDistanceThreshold\n          : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n      );\n    }\n\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n    }\n  }\n\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n    this.handleEndInteraction();\n  }\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private getDrawerWidth = (): number => {\n    const { drawerStyle, dimensions } = this.props;\n    const { width = DEFAULT_DRAWER_WIDTH } =\n      StyleSheet.flatten(drawerStyle) || {};\n\n    if (typeof width === 'string' && width.endsWith('%')) {\n      // Try to calculate width if a percentage is given\n      const percentage = Number(width.replace(/%$/, ''));\n\n      if (Number.isFinite(percentage)) {\n        return dimensions.width * (percentage / 100);\n      }\n    }\n\n    return typeof width === 'number' ? width : 0;\n  };\n\n  private clock = new Clock();\n  private interactionHandle: number | undefined;\n\n  private isDrawerTypeFront = new Value<Binary>(\n    this.props.drawerType === 'front' ? TRUE : FALSE\n  );\n\n  private isOpen = new Value<Binary>(this.props.open ? TRUE : FALSE);\n  private nextIsOpen = new Value<Binary | -1>(UNSET);\n  private isSwiping = new Value<Binary>(FALSE);\n\n  private initialDrawerWidth = this.getDrawerWidth();\n\n  private gestureState = new Value<number>(GestureState.UNDETERMINED);\n  private touchX = new Value<number>(0);\n  private velocityX = new Value<number>(0);\n  private gestureX = new Value<number>(0);\n  private offsetX = new Value<number>(0);\n  private position = new Value<number>(\n    this.props.open\n      ? this.initialDrawerWidth *\n        (this.props.drawerPosition === 'right'\n          ? DIRECTION_RIGHT\n          : DIRECTION_LEFT)\n      : 0\n  );\n\n  private containerWidth = new Value<number>(this.props.dimensions.width);\n  private drawerWidth = new Value<number>(this.initialDrawerWidth);\n  private drawerOpacity = new Value<number>(\n    this.props.drawerType === 'permanent' ? 1 : 0\n  );\n  private drawerPosition = new Value<number>(\n    this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n  );\n\n  // Comment stolen from react-native-gesture-handler/DrawerLayout\n  //\n  // While closing the drawer when user starts gesture outside of its area (in greyed\n  // out part of the window), we want the drawer to follow only once finger reaches the\n  // edge of the drawer.\n  // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n  // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n  // an arrow pointing left\n  // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    +---------------+    +---------------+    +---------------+    +---------------+\n  //\n  // For the above to work properly we define animated value that will keep start position\n  // of the gesture. Then we use that value to calculate how much we need to subtract from\n  // the dragX. If the gesture started on the greyed out area we take the distance from the\n  // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n  // drawer be pulled back as soon as you start the pan.\n  //\n  // This is used only when drawerType is \"front\"\n  private touchDistanceFromDrawer = cond(\n    this.isDrawerTypeFront,\n    cond(\n      eq(this.drawerPosition, DIRECTION_LEFT),\n      max(\n        // Distance of touch start from left screen edge - Drawer width\n        sub(sub(this.touchX, this.gestureX), this.drawerWidth),\n        0\n      ),\n      min(\n        multiply(\n          // Distance of drawer from left screen edge - Touch start point\n          sub(\n            sub(this.containerWidth, this.drawerWidth),\n            sub(this.touchX, this.gestureX)\n          ),\n          DIRECTION_RIGHT\n        ),\n        0\n      )\n    ),\n    0\n  );\n\n  private swipeDistanceThreshold = new Value<number>(\n    this.props.swipeDistanceThreshold !== undefined\n      ? this.props.swipeDistanceThreshold\n      : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n  );\n  private swipeVelocityThreshold = new Value<number>(\n    this.props.swipeVelocityThreshold\n  );\n\n  private currentOpenValue: boolean = this.props.open;\n  private pendingOpenValue: boolean | undefined;\n\n  private isStatusBarHidden: boolean = false;\n\n  private manuallyTriggerSpring = new Value<Binary>(FALSE);\n\n  private transitionTo = (isOpen: number | Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.position,\n      time: new Value(0),\n      finished: new Value(FALSE),\n      velocity: new Value(0),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(state.velocity, this.velocityX),\n        set(this.isOpen, isOpen),\n        startClock(this.clock),\n        call([], this.handleStartInteraction),\n        set(this.manuallyTriggerSpring, FALSE),\n      ]),\n      spring(this.clock, state, { ...SPRING_CONFIG, toValue }),\n      cond(state.finished, [\n        // Reset gesture and velocity from previous gesture\n        set(this.touchX, 0),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        set(this.offsetX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n        call([this.isOpen], ([value]: readonly Binary[]) => {\n          const open = Boolean(value);\n          this.handleEndInteraction();\n\n          if (open !== this.props.open) {\n            // Sync drawer's state after animation finished\n            // This shouldn't be necessary, but there seems to be an issue on iOS\n            this.toggleDrawer(this.props.open);\n          }\n        }),\n      ]),\n    ]);\n  };\n\n  private dragX = block([\n    onChange(\n      this.isOpen,\n      call([this.isOpen], ([value]: readonly Binary[]) => {\n        const open = Boolean(value);\n\n        this.currentOpenValue = open;\n\n        // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\n        if (open !== this.props.open) {\n          // If the mode changed, update state\n          if (open) {\n            this.props.onOpen();\n          } else {\n            this.props.onClose();\n          }\n\n          this.pendingOpenValue = open;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.nextIsOpen,\n      cond(neq(this.nextIsOpen, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        // Update the open value to trigger the transition\n        set(this.isOpen, this.nextIsOpen),\n        set(this.gestureX, 0),\n        set(this.nextIsOpen, UNSET),\n      ])\n    ),\n    // This block must be after the this.isOpen listener since we check for current value\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      call([this.isSwiping], ([value]: readonly Binary[]) => {\n        const { keyboardDismissMode } = this.props;\n\n        if (value === TRUE) {\n          if (keyboardDismissMode === 'on-drag') {\n            Keyboard.dismiss();\n          }\n\n          this.toggleStatusBar(true);\n        } else {\n          this.toggleStatusBar(this.currentOpenValue);\n        }\n      })\n    ),\n    onChange(\n      this.gestureState,\n      cond(\n        eq(this.gestureState, GestureState.ACTIVE),\n        call([], this.handleStartInteraction)\n      )\n    ),\n    cond(\n      eq(this.gestureState, GestureState.ACTIVE),\n      [\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          // Also update the drag offset to the last position\n          set(this.offsetX, this.position),\n        ]),\n        // Update position with previous offset + gesture distance\n        set(\n          this.position,\n          add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.touchX, 0),\n        this.transitionTo(\n          cond(\n            this.manuallyTriggerSpring,\n            this.isOpen,\n            cond(\n              or(\n                and(\n                  greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n                  greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)\n                ),\n                greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)\n              ),\n              cond(\n                eq(this.drawerPosition, DIRECTION_LEFT),\n                // If swiped to right, open the drawer, otherwise close it\n                greaterThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                ),\n                // If swiped to left, open the drawer, otherwise close it\n                lessThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                )\n              ),\n              this.isOpen\n            )\n          )\n        ),\n      ]\n    ),\n    this.position,\n  ]);\n\n  private translateX = cond(\n    eq(this.drawerPosition, DIRECTION_RIGHT),\n    min(max(multiply(this.drawerWidth, -1), this.dragX), 0),\n    max(min(this.drawerWidth, this.dragX), 0)\n  );\n\n  private progress = cond(\n    // Check if the drawer width is available to avoid division by zero\n    eq(this.drawerWidth, 0),\n    0,\n    abs(divide(this.translateX, this.drawerWidth))\n  );\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        x: this.touchX,\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n      },\n    },\n  ]);\n\n  private handleGestureStateChange = event([\n    {\n      nativeEvent: {\n        state: (s: Animated.Value<number>) => set(this.gestureState, s),\n      },\n    },\n  ]);\n\n  private handleTapStateChange = event([\n    {\n      nativeEvent: {\n        oldState: (s: Animated.Value<number>) =>\n          cond(\n            eq(s, GestureState.ACTIVE),\n            set(this.manuallyTriggerSpring, TRUE)\n          ),\n      },\n    },\n  ]);\n\n  private handleContainerLayout = (e: LayoutChangeEvent) =>\n    this.containerWidth.setValue(e.nativeEvent.layout.width);\n\n  private handleDrawerLayout = (e: LayoutChangeEvent) => {\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\n    this.toggleDrawer(this.props.open);\n\n    // Until layout is available, drawer is hidden with opacity: 0 by default\n    // Show it in the next frame when layout is available\n    // If we don't delay it until the next frame, there's a visible flicker\n    requestAnimationFrame(() =>\n      requestAnimationFrame(() => this.drawerOpacity.setValue(1))\n    );\n  };\n\n  private toggleDrawer = (open: boolean) => {\n    if (this.currentOpenValue !== open) {\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n      // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\n      // However, there's a race condition on Android, so we need to set a bit earlier\n      this.currentOpenValue = open;\n    }\n  };\n\n  private toggleStatusBar = (hidden: boolean) => {\n    const { hideStatusBar, statusBarAnimation } = this.props;\n\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n      this.isStatusBarHidden = hidden;\n      StatusBar.setHidden(hidden, statusBarAnimation);\n    }\n  };\n\n  render() {\n    const {\n      open,\n      gestureEnabled,\n      swipeEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      sceneContainerStyle,\n      drawerStyle,\n      overlayStyle,\n      renderDrawerContent,\n      renderSceneContent,\n      gestureHandlerProps,\n    } = this.props;\n\n    const isOpen = drawerType === 'permanent' ? true : open;\n    const isRight = drawerPosition === 'right';\n\n    const contentTranslateX =\n      drawerType === 'front' || drawerType === 'permanent'\n        ? ANIMATED_ZERO\n        : this.translateX;\n\n    const drawerTranslateX =\n      drawerType === 'permanent'\n        ? ANIMATED_ZERO\n        : drawerType === 'back'\n        ? I18nManager.isRTL\n          ? multiply(\n              sub(this.containerWidth, this.drawerWidth),\n              isRight ? 1 : -1\n            )\n          : ANIMATED_ZERO\n        : this.translateX;\n\n    const offset =\n      drawerType === 'back'\n        ? 0\n        : I18nManager.isRTL\n        ? '100%'\n        : multiply(this.drawerWidth, -1);\n\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n    // https://github.com/kmagiera/react-native-gesture-handler/issues/569\n    const hitSlop = isRight\n      ? // Extend hitSlop to the side of the screen when drawer is closed\n        // This lets the user drag the drawer from the side of the screen\n        { right: 0, width: isOpen ? undefined : swipeEdgeWidth }\n      : { left: 0, width: isOpen ? undefined : swipeEdgeWidth };\n\n    const progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n\n    return (\n      <PanGestureHandler\n        activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        onGestureEvent={this.handleGestureEvent}\n        onHandlerStateChange={this.handleGestureStateChange}\n        hitSlop={hitSlop}\n        enabled={drawerType !== 'permanent' && gestureEnabled && swipeEnabled}\n        {...gestureHandlerProps}\n      >\n        <Animated.View\n          onLayout={this.handleContainerLayout}\n          style={[\n            styles.main,\n            {\n              flexDirection:\n                drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row',\n            },\n          ]}\n        >\n          <Animated.View\n            style={[\n              styles.content,\n              { transform: [{ translateX: contentTranslateX }] },\n              sceneContainerStyle as any,\n            ]}\n          >\n            <View\n              accessibilityElementsHidden={isOpen && drawerType !== 'permanent'}\n              importantForAccessibility={\n                isOpen && drawerType !== 'permanent'\n                  ? 'no-hide-descendants'\n                  : 'auto'\n              }\n              style={styles.content}\n            >\n              {renderSceneContent({ progress })}\n            </View>\n            {\n              // Disable overlay if sidebar is permanent\n              drawerType === 'permanent' ? null : Platform.OS === 'web' ||\n                Platform.OS === 'windows' ||\n                Platform.OS === 'macos' ? (\n                <TouchableWithoutFeedback\n                  onPress={\n                    gestureEnabled ? () => this.toggleDrawer(false) : undefined\n                  }\n                >\n                  <Overlay progress={progress} style={overlayStyle as any} />\n                </TouchableWithoutFeedback>\n              ) : (\n                <TapGestureHandler\n                  enabled={gestureEnabled}\n                  onHandlerStateChange={this.handleTapStateChange}\n                >\n                  <Overlay progress={progress} style={overlayStyle as any} />\n                </TapGestureHandler>\n              )\n            }\n          </Animated.View>\n          <Animated.Code\n            // This is needed to make sure that container width updates with `setValue`\n            // Without this, it won't update when not used in styles\n            exec={this.containerWidth}\n          />\n          {drawerType === 'permanent' ? null : (\n            <Animated.Code\n              exec={block([\n                onChange(this.manuallyTriggerSpring, [\n                  cond(eq(this.manuallyTriggerSpring, TRUE), [\n                    set(this.nextIsOpen, FALSE),\n                    call([], () => (this.currentOpenValue = false)),\n                  ]),\n                ]),\n              ])}\n            />\n          )}\n          <Animated.View\n            accessibilityViewIsModal={isOpen && drawerType !== 'permanent'}\n            removeClippedSubviews={Platform.OS !== 'ios'}\n            onLayout={this.handleDrawerLayout}\n            style={[\n              styles.container,\n              {\n                transform: [{ translateX: drawerTranslateX }],\n                opacity: this.drawerOpacity,\n              },\n              drawerType === 'permanent'\n                ? // Without this, the `left`/`right` values don't get reset\n                  isRight\n                  ? { right: 0 }\n                  : { left: 0 }\n                : [\n                    styles.nonPermanent,\n                    isRight ? { right: offset } : { left: offset },\n                    { zIndex: drawerType === 'back' ? -1 : 0 },\n                  ],\n              drawerStyle as any,\n            ]}\n          >\n            {renderDrawerContent({ progress })}\n          </Animated.View>\n        </Animated.View>\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%',\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: DEFAULT_DRAWER_WIDTH,\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    ...Platform.select({\n      // FIXME: We need to hide `overflowX` on Web so the translated content doesn't show offscreen.\n      // But adding `overflowX: 'hidden'` prevents content from collapsing the URL bar.\n      web: null,\n      default: { overflow: 'hidden' },\n    }),\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}