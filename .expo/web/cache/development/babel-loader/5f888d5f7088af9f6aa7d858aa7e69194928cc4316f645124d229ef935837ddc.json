{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _defineProperty3 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _extends4 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _reactNativeScreens = require(\"react-native-screens\");\nvar _Screens = require(\"../Screens\");\nvar _HeaderSegment = require(\"../Header/HeaderSegment\");\nvar _CardContainer = _interopRequireDefault(require(\"./CardContainer\"));\nvar _TransitionPresets = require(\"../../TransitionConfigs/TransitionPresets\");\nvar _HeaderStyleInterpolators = require(\"../../TransitionConfigs/HeaderStyleInterpolators\");\nvar _CardStyleInterpolators = require(\"../../TransitionConfigs/CardStyleInterpolators\");\nvar _getDistanceForDirection = _interopRequireDefault(require(\"../../utils/getDistanceForDirection\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar EPSILON = 0.01;\nvar STATE_INACTIVE = 0;\nvar STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nvar STATE_ON_TOP = 2;\nvar FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\nvar getHeaderHeights = function getHeaderHeights(routes, insets, isParentHeaderShown, descriptors, layout, previous) {\n  return routes.reduce(function (acc, curr) {\n    var _ref = descriptors[curr.key] || {},\n      _ref$options = _ref.options,\n      options = _ref$options === void 0 ? {} : _ref$options;\n    var style = _reactNative.StyleSheet.flatten(options.headerStyle || {});\n    var height = typeof style.height === 'number' ? style.height : previous[curr.key];\n    var safeAreaInsets = (0, _extends4.default)({}, insets, options.safeAreaInsets);\n    var _options$headerStatus = options.headerStatusBarHeight,\n      headerStatusBarHeight = _options$headerStatus === void 0 ? isParentHeaderShown ? 0 : safeAreaInsets.top : _options$headerStatus;\n    acc[curr.key] = typeof height === 'number' ? height : (0, _HeaderSegment.getDefaultHeaderHeight)(layout, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\nvar getDistanceFromOptions = function getDistanceFromOptions(mode, layout, descriptor) {\n  var _ref2 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n    _ref2$gestureDirectio = _ref2.gestureDirection,\n    gestureDirection = _ref2$gestureDirectio === void 0 ? mode === 'modal' ? _TransitionPresets.ModalTransition.gestureDirection : _TransitionPresets.DefaultTransition.gestureDirection : _ref2$gestureDirectio;\n  return (0, _getDistanceForDirection.default)(layout, gestureDirection);\n};\nvar getProgressFromGesture = function getProgressFromGesture(mode, gesture, layout, descriptor) {\n  var distance = getDistanceFromOptions(mode, {\n    width: Math.max(1, layout.width),\n    height: Math.max(1, layout.height)\n  }, descriptor);\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\nvar CardStack = function (_React$Component) {\n  (0, _inherits2.default)(CardStack, _React$Component);\n  var _super = _createSuper(CardStack);\n  function CardStack(_props) {\n    var _this;\n    (0, _classCallCheck2.default)(this, CardStack);\n    _this = _super.call(this, _props);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleLayout\", function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n        height = _e$nativeEvent$layout.height,\n        width = _e$nativeEvent$layout.width;\n      var layout = {\n        width: width,\n        height: height\n      };\n      _this.setState(function (state, props) {\n        if (height === state.layout.height && width === state.layout.width) {\n          return null;\n        }\n        return {\n          layout: layout,\n          headerHeights: getHeaderHeights(props.routes, props.insets, props.isParentHeaderShown, state.descriptors, layout, state.headerHeights)\n        };\n      });\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleHeaderLayout\", function (_ref3) {\n      var route = _ref3.route,\n        height = _ref3.height;\n      _this.setState(function (_ref4) {\n        var headerHeights = _ref4.headerHeights;\n        var previousHeight = headerHeights[route.key];\n        if (previousHeight === height) {\n          return null;\n        }\n        return {\n          headerHeights: (0, _extends4.default)({}, headerHeights, (0, _defineProperty3.default)({}, route.key, height))\n        };\n      });\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"getFocusedRoute\", function () {\n      var state = _this.props.state;\n      return state.routes[state.index];\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"getPreviousScene\", function (_ref5) {\n      var route = _ref5.route;\n      var getPreviousRoute = _this.props.getPreviousRoute;\n      var scenes = _this.state.scenes;\n      var previousRoute = getPreviousRoute({\n        route: route\n      });\n      if (previousRoute) {\n        var previousScene = scenes.find(function (scene) {\n          return scene.route.key === previousRoute.key;\n        });\n        return previousScene;\n      }\n      return undefined;\n    });\n    var _Dimensions$get = _reactNative.Dimensions.get('window'),\n      _Dimensions$get$heigh = _Dimensions$get.height,\n      _height = _Dimensions$get$heigh === void 0 ? 0 : _Dimensions$get$heigh,\n      _Dimensions$get$width = _Dimensions$get.width,\n      _width = _Dimensions$get$width === void 0 ? 0 : _Dimensions$get$width;\n    _this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: {\n        height: _height,\n        width: _width\n      },\n      descriptors: _this.props.descriptors,\n      headerHeights: {}\n    };\n    return _this;\n  }\n  (0, _createClass2.default)(CardStack, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props = this.props,\n        mode = _this$props.mode,\n        insets = _this$props.insets,\n        descriptors = _this$props.descriptors,\n        state = _this$props.state,\n        routes = _this$props.routes,\n        closingRouteKeys = _this$props.closingRouteKeys,\n        onOpenRoute = _this$props.onOpenRoute,\n        onCloseRoute = _this$props.onCloseRoute,\n        getGesturesEnabled = _this$props.getGesturesEnabled,\n        renderHeader = _this$props.renderHeader,\n        renderScene = _this$props.renderScene,\n        headerMode = _this$props.headerMode,\n        isParentHeaderShown = _this$props.isParentHeaderShown,\n        onTransitionStart = _this$props.onTransitionStart,\n        onTransitionEnd = _this$props.onTransitionEnd,\n        onPageChangeStart = _this$props.onPageChangeStart,\n        onPageChangeConfirm = _this$props.onPageChangeConfirm,\n        onPageChangeCancel = _this$props.onPageChangeCancel,\n        onGestureStart = _this$props.onGestureStart,\n        onGestureEnd = _this$props.onGestureEnd,\n        onGestureCancel = _this$props.onGestureCancel,\n        _this$props$detachIna = _this$props.detachInactiveScreens,\n        detachInactiveScreens = _this$props$detachIna === void 0 ? _reactNative.Platform.OS === 'web' || _Screens.shouldUseActivityState : _this$props$detachIna;\n      var _this$state = this.state,\n        scenes = _this$state.scenes,\n        layout = _this$state.layout,\n        gestures = _this$state.gestures,\n        headerHeights = _this$state.headerHeights;\n      var focusedRoute = state.routes[state.index];\n      var focusedDescriptor = descriptors[focusedRoute.key];\n      var focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n      var focusedHeaderHeight = headerHeights[focusedRoute.key];\n      var defaultTransitionPreset = mode === 'modal' ? _TransitionPresets.ModalTransition : _TransitionPresets.DefaultTransition;\n      if (headerMode === 'screen') {\n        defaultTransitionPreset = (0, _extends4.default)({}, defaultTransitionPreset, {\n          headerStyleInterpolator: _HeaderStyleInterpolators.forNoAnimation\n        });\n      }\n      var _ref6 = focusedOptions.safeAreaInsets || {},\n        _ref6$top = _ref6.top,\n        top = _ref6$top === void 0 ? insets.top : _ref6$top,\n        _ref6$right = _ref6.right,\n        right = _ref6$right === void 0 ? insets.right : _ref6$right,\n        _ref6$bottom = _ref6.bottom,\n        bottom = _ref6$bottom === void 0 ? insets.bottom : _ref6$bottom,\n        _ref6$left = _ref6.left,\n        left = _ref6$left === void 0 ? insets.left : _ref6$left;\n      var activeScreensLimit = 1;\n      for (var i = scenes.length - 1; i >= 0; i--) {\n        var _scenes$i$descriptor$ = scenes[i].descriptor.options.detachPreviousScreen,\n          detachPreviousScreen = _scenes$i$descriptor$ === void 0 ? mode === 'modal' ? i !== scenes.length - 1 : true : _scenes$i$descriptor$;\n        if (detachPreviousScreen === false) {\n          activeScreensLimit++;\n        } else {\n          break;\n        }\n      }\n      var isFloatHeaderAbsolute = headerMode === 'float' ? this.state.scenes.slice(-2).some(function (scene) {\n        var descriptor = scene.descriptor;\n        var options = descriptor ? descriptor.options : {};\n        var headerTransparent = options.headerTransparent,\n          _options$headerShown = options.headerShown,\n          headerShown = _options$headerShown === void 0 ? true : _options$headerShown;\n        if (headerTransparent || headerShown === false) {\n          return true;\n        }\n        return false;\n      }) : false;\n      var floatingHeader = headerMode === 'float' ? React.createElement(React.Fragment, {\n        key: \"header\"\n      }, renderHeader({\n        mode: 'float',\n        layout: layout,\n        insets: {\n          top: top,\n          right: right,\n          bottom: bottom,\n          left: left\n        },\n        scenes: scenes,\n        getPreviousScene: this.getPreviousScene,\n        getFocusedRoute: this.getFocusedRoute,\n        onContentHeightChange: this.handleHeaderLayout,\n        gestureDirection: focusedOptions.gestureDirection !== undefined ? focusedOptions.gestureDirection : defaultTransitionPreset.gestureDirection,\n        styleInterpolator: focusedOptions.headerStyleInterpolator !== undefined ? focusedOptions.headerStyleInterpolator : defaultTransitionPreset.headerStyleInterpolator,\n        style: [styles.floating, isFloatHeaderAbsolute && [{\n          height: focusedHeaderHeight\n        }, styles.absolute]]\n      })) : null;\n      var isScreensEnabled = (_reactNativeScreens.screensEnabled === null || _reactNativeScreens.screensEnabled === void 0 ? void 0 : (0, _reactNativeScreens.screensEnabled)()) && detachInactiveScreens;\n      return React.createElement(React.Fragment, null, isFloatHeaderAbsolute ? null : floatingHeader, React.createElement(_Screens.MaybeScreenContainer, {\n        enabled: isScreensEnabled,\n        style: styles.container,\n        onLayout: this.handleLayout\n      }, routes.map(function (route, index, self) {\n        var focused = focusedRoute.key === route.key;\n        var gesture = gestures[route.key];\n        var scene = scenes[index];\n        var isScreenActive = 1;\n        if (_Screens.shouldUseActivityState || _reactNative.Platform.OS === 'web') {\n          if (index < self.length - activeScreensLimit - 1) {\n            isScreenActive = STATE_INACTIVE;\n          } else {\n            var sceneForActivity = scenes[self.length - 1];\n            var outputValue = index === self.length - 1 ? STATE_ON_TOP : index >= self.length - activeScreensLimit ? STATE_TRANSITIONING_OR_BELOW_TOP : STATE_INACTIVE;\n            isScreenActive = sceneForActivity ? sceneForActivity.progress.current.interpolate({\n              inputRange: [0, 1 - EPSILON, 1],\n              outputRange: [1, 1, outputValue],\n              extrapolate: 'clamp'\n            }) : STATE_TRANSITIONING_OR_BELOW_TOP;\n          }\n        } else {\n          isScreenActive = scene.progress.next ? scene.progress.next.interpolate({\n            inputRange: [0, 1 - EPSILON, 1],\n            outputRange: [1, 1, 0],\n            extrapolate: 'clamp'\n          }) : 1;\n        }\n        var _ref7 = scene.descriptor ? scene.descriptor.options : {},\n          safeAreaInsets = _ref7.safeAreaInsets,\n          _ref7$headerShown = _ref7.headerShown,\n          headerShown = _ref7$headerShown === void 0 ? true : _ref7$headerShown,\n          headerTransparent = _ref7.headerTransparent,\n          cardShadowEnabled = _ref7.cardShadowEnabled,\n          cardOverlayEnabled = _ref7.cardOverlayEnabled,\n          cardOverlay = _ref7.cardOverlay,\n          cardStyle = _ref7.cardStyle,\n          animationEnabled = _ref7.animationEnabled,\n          gestureResponseDistance = _ref7.gestureResponseDistance,\n          gestureVelocityImpact = _ref7.gestureVelocityImpact,\n          _ref7$gestureDirectio = _ref7.gestureDirection,\n          gestureDirection = _ref7$gestureDirectio === void 0 ? defaultTransitionPreset.gestureDirection : _ref7$gestureDirectio,\n          _ref7$transitionSpec = _ref7.transitionSpec,\n          transitionSpec = _ref7$transitionSpec === void 0 ? defaultTransitionPreset.transitionSpec : _ref7$transitionSpec,\n          _ref7$cardStyleInterp = _ref7.cardStyleInterpolator,\n          cardStyleInterpolator = _ref7$cardStyleInterp === void 0 ? animationEnabled === false ? _CardStyleInterpolators.forNoAnimation : defaultTransitionPreset.cardStyleInterpolator : _ref7$cardStyleInterp,\n          _ref7$headerStyleInte = _ref7.headerStyleInterpolator,\n          headerStyleInterpolator = _ref7$headerStyleInte === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _ref7$headerStyleInte;\n        var transitionConfig = {\n          gestureDirection: gestureDirection,\n          transitionSpec: transitionSpec,\n          cardStyleInterpolator: cardStyleInterpolator,\n          headerStyleInterpolator: headerStyleInterpolator\n        };\n        if (index !== self.length - 1) {\n          var nextScene = scenes[index + 1];\n          if (nextScene) {\n            var _ref8 = nextScene.descriptor ? nextScene.descriptor.options : {},\n              _animationEnabled = _ref8.animationEnabled,\n              _ref8$gestureDirectio = _ref8.gestureDirection,\n              _gestureDirection = _ref8$gestureDirectio === void 0 ? defaultTransitionPreset.gestureDirection : _ref8$gestureDirectio,\n              _ref8$transitionSpec = _ref8.transitionSpec,\n              _transitionSpec = _ref8$transitionSpec === void 0 ? defaultTransitionPreset.transitionSpec : _ref8$transitionSpec,\n              _ref8$cardStyleInterp = _ref8.cardStyleInterpolator,\n              _cardStyleInterpolator = _ref8$cardStyleInterp === void 0 ? _animationEnabled === false ? _CardStyleInterpolators.forNoAnimation : defaultTransitionPreset.cardStyleInterpolator : _ref8$cardStyleInterp,\n              _ref8$headerStyleInte = _ref8.headerStyleInterpolator,\n              _headerStyleInterpolator = _ref8$headerStyleInte === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _ref8$headerStyleInte;\n            transitionConfig = {\n              gestureDirection: _gestureDirection,\n              transitionSpec: _transitionSpec,\n              cardStyleInterpolator: _cardStyleInterpolator,\n              headerStyleInterpolator: _headerStyleInterpolator\n            };\n          }\n        }\n        var _ref9 = safeAreaInsets || {},\n          _ref9$top = _ref9.top,\n          safeAreaInsetTop = _ref9$top === void 0 ? insets.top : _ref9$top,\n          _ref9$right = _ref9.right,\n          safeAreaInsetRight = _ref9$right === void 0 ? insets.right : _ref9$right,\n          _ref9$bottom = _ref9.bottom,\n          safeAreaInsetBottom = _ref9$bottom === void 0 ? insets.bottom : _ref9$bottom,\n          _ref9$left = _ref9.left,\n          safeAreaInsetLeft = _ref9$left === void 0 ? insets.left : _ref9$left;\n        var headerHeight = headerMode !== 'none' && headerShown !== false ? headerHeights[route.key] : 0;\n        return React.createElement(_Screens.MaybeScreen, {\n          key: route.key,\n          style: _reactNative.StyleSheet.absoluteFill,\n          enabled: isScreensEnabled,\n          active: isScreenActive,\n          pointerEvents: \"box-none\"\n        }, React.createElement(_CardContainer.default, _extends({\n          index: index,\n          active: index === self.length - 1,\n          focused: focused,\n          closing: closingRouteKeys.includes(route.key),\n          layout: layout,\n          gesture: gesture,\n          scene: scene,\n          safeAreaInsetTop: safeAreaInsetTop,\n          safeAreaInsetRight: safeAreaInsetRight,\n          safeAreaInsetBottom: safeAreaInsetBottom,\n          safeAreaInsetLeft: safeAreaInsetLeft,\n          cardOverlay: cardOverlay,\n          cardOverlayEnabled: cardOverlayEnabled,\n          cardShadowEnabled: cardShadowEnabled,\n          cardStyle: cardStyle,\n          onPageChangeStart: onPageChangeStart,\n          onPageChangeConfirm: onPageChangeConfirm,\n          onPageChangeCancel: onPageChangeCancel,\n          onGestureStart: onGestureStart,\n          onGestureCancel: onGestureCancel,\n          onGestureEnd: onGestureEnd,\n          gestureResponseDistance: gestureResponseDistance,\n          headerHeight: headerHeight,\n          isParentHeaderShown: isParentHeaderShown,\n          onHeaderHeightChange: _this2.handleHeaderLayout,\n          getPreviousScene: _this2.getPreviousScene,\n          getFocusedRoute: _this2.getFocusedRoute,\n          mode: mode,\n          headerMode: headerMode,\n          headerShown: headerShown,\n          hasAbsoluteHeader: isFloatHeaderAbsolute && !headerTransparent,\n          renderHeader: renderHeader,\n          renderScene: renderScene,\n          onOpenRoute: onOpenRoute,\n          onCloseRoute: onCloseRoute,\n          onTransitionStart: onTransitionStart,\n          onTransitionEnd: onTransitionEnd,\n          gestureEnabled: index !== 0 && getGesturesEnabled({\n            route: route\n          }),\n          gestureVelocityImpact: gestureVelocityImpact\n        }, transitionConfig)));\n      })), isFloatHeaderAbsolute ? floatingHeader : null);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.routes === state.routes && props.descriptors === state.descriptors) {\n        return null;\n      }\n      var gestures = props.routes.reduce(function (acc, curr) {\n        var descriptor = props.descriptors[curr.key];\n        var _ref10 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n          animationEnabled = _ref10.animationEnabled;\n        acc[curr.key] = state.gestures[curr.key] || new _reactNative.Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(props.mode, state.layout, descriptor) : 0);\n        return acc;\n      }, {});\n      return {\n        routes: props.routes,\n        scenes: props.routes.map(function (route, index, self) {\n          var previousRoute = self[index - 1];\n          var nextRoute = self[index + 1];\n          var oldScene = state.scenes[index];\n          var currentGesture = gestures[route.key];\n          var previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n          var nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n          var descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n          var nextDescriptor = props.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key] || state.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key];\n          var previousDescriptor = props.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key] || state.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key];\n          var scene = {\n            route: route,\n            descriptor: descriptor,\n            progress: {\n              current: getProgressFromGesture(props.mode, currentGesture, state.layout, descriptor),\n              next: nextGesture ? getProgressFromGesture(props.mode, nextGesture, state.layout, nextDescriptor) : undefined,\n              previous: previousGesture ? getProgressFromGesture(props.mode, previousGesture, state.layout, previousDescriptor) : undefined\n            },\n            __memo: [route, state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n          };\n          if (oldScene && scene.__memo.every(function (it, i) {\n            return oldScene.__memo[i] === it;\n          })) {\n            return oldScene;\n          }\n          return scene;\n        }),\n        gestures: gestures,\n        descriptors: props.descriptors,\n        headerHeights: getHeaderHeights(props.routes, props.insets, props.isParentHeaderShown, state.descriptors, state.layout, state.headerHeights)\n      };\n    }\n  }]);\n  return CardStack;\n}(React.Component);\nexports.default = CardStack;\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  },\n  floating: {\n    zIndex: 1\n  }\n});","map":{"version":3,"names":["React","_interopRequireWildcard","require","_reactNative","_reactNativeScreens","_Screens","_HeaderSegment","_CardContainer","_interopRequireDefault","_TransitionPresets","_HeaderStyleInterpolators","_CardStyleInterpolators","_getDistanceForDirection","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","constructor","Reflect","construct","arguments","apply","_possibleConstructorReturn2","sham","Proxy","Boolean","valueOf","e","EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","freeze","options","getHeaderHeights","routes","insets","isParentHeaderShown","descriptors","layout","previous","reduce","acc","curr","_ref","_ref$options","style","StyleSheet","flatten","headerStyle","height","safeAreaInsets","_extends4","_options$headerStatus","headerStatusBarHeight","top","getDefaultHeaderHeight","getDistanceFromOptions","mode","descriptor","_ref2","_ref2$gestureDirectio","gestureDirection","ModalTransition","DefaultTransition","getDistanceForDirection","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","_React$Component","_inherits2","_super","_props","_this","_classCallCheck2","_defineProperty","_assertThisInitialized2","_e$nativeEvent$layout","nativeEvent","setState","state","props","headerHeights","_ref3","route","_ref4","previousHeight","_defineProperty3","index","_ref5","getPreviousRoute","scenes","previousRoute","previousScene","find","scene","undefined","_Dimensions$get","Dimensions","_Dimensions$get$heigh","_height","_Dimensions$get$width","_width","gestures","_createClass2","value","render","_this2","_this$props","closingRouteKeys","onOpenRoute","onCloseRoute","getGesturesEnabled","renderHeader","renderScene","headerMode","onTransitionStart","onTransitionEnd","onPageChangeStart","onPageChangeConfirm","onPageChangeCancel","onGestureStart","onGestureEnd","onGestureCancel","_this$props$detachIna","detachInactiveScreens","Platform","OS","shouldUseActivityState","_this$state","focusedRoute","focusedDescriptor","focusedOptions","focusedHeaderHeight","defaultTransitionPreset","headerStyleInterpolator","forNoAnimationHeader","_ref6","_ref6$top","_ref6$right","right","_ref6$bottom","bottom","_ref6$left","left","activeScreensLimit","i","length","_scenes$i$descriptor$","detachPreviousScreen","isFloatHeaderAbsolute","slice","some","headerTransparent","_options$headerShown","headerShown","floatingHeader","createElement","Fragment","getPreviousScene","getFocusedRoute","onContentHeightChange","handleHeaderLayout","styleInterpolator","styles","floating","absolute","isScreensEnabled","screensEnabled","MaybeScreenContainer","enabled","container","onLayout","handleLayout","map","self","focused","isScreenActive","sceneForActivity","outputValue","progress","current","extrapolate","next","_ref7","_ref7$headerShown","cardShadowEnabled","cardOverlayEnabled","cardOverlay","cardStyle","animationEnabled","gestureResponseDistance","gestureVelocityImpact","_ref7$gestureDirectio","_ref7$transitionSpec","transitionSpec","_ref7$cardStyleInterp","cardStyleInterpolator","forNoAnimationCard","_ref7$headerStyleInte","transitionConfig","nextScene","_ref8","_ref8$gestureDirectio","_ref8$transitionSpec","_ref8$cardStyleInterp","_ref8$headerStyleInte","_ref9","_ref9$top","safeAreaInsetTop","_ref9$right","safeAreaInsetRight","_ref9$bottom","safeAreaInsetBottom","_ref9$left","safeAreaInsetLeft","headerHeight","MaybeScreen","absoluteFill","active","pointerEvents","CardContainer","_extends","closing","includes","onHeaderHeightChange","hasAbsoluteHeader","gestureEnabled","getDerivedStateFromProps","_ref10","Animated","Value","openingRouteKeys","nextRoute","oldScene","currentGesture","previousGesture","nextGesture","nextDescriptor","previousDescriptor","__memo","every","it","Component","exports","create","flex","position","zIndex"],"sources":["/home/ahmed/Music/softtag/Source Code/node_modules/@react-navigation/stack/lib/module/views/Stack/CardStack.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  LayoutChangeEvent,\n  Dimensions,\n  Platform,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\nimport type {\n  ParamListBase,\n  Route,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport { screensEnabled } from 'react-native-screens';\n\nimport {\n  MaybeScreenContainer,\n  MaybeScreen,\n  shouldUseActivityState,\n} from '../Screens';\nimport { getDefaultHeaderHeight } from '../Header/HeaderSegment';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport CardContainer from './CardContainer';\nimport {\n  DefaultTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport { forNoAnimation as forNoAnimationHeader } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport { forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport type {\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  Scene,\n  StackDescriptorMap,\n  StackNavigationOptions,\n  StackDescriptor,\n} from '../../types';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  mode: StackCardMode;\n  insets: EdgeInsets;\n  state: StackNavigationState<ParamListBase>;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getGesturesEnabled: (props: { route: Route<string> }) => boolean;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  headerMode: StackHeaderMode;\n  isParentHeaderShown: boolean;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: (force: boolean) => void;\n  onPageChangeCancel?: () => void;\n  onGestureStart?: (props: { route: Route<string> }) => void;\n  onGestureEnd?: (props: { route: Route<string> }) => void;\n  onGestureCancel?: (props: { route: Route<string> }) => void;\n  detachInactiveScreens?: boolean;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene<Route<string>>[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getHeaderHeights = (\n  routes: Route<string>[],\n  insets: EdgeInsets,\n  isParentHeaderShown: boolean,\n  descriptors: StackDescriptorMap,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return routes.reduce<Record<string, number>>((acc, curr) => {\n    const { options = {} } = descriptors[curr.key] || {};\n    const style: any = StyleSheet.flatten(options.headerStyle || {});\n\n    const height =\n      typeof style.height === 'number' ? style.height : previous[curr.key];\n\n    const safeAreaInsets = {\n      ...insets,\n      ...options.safeAreaInsets,\n    };\n\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : safeAreaInsets.top,\n    } = options;\n\n    acc[curr.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  mode: StackCardMode,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    gestureDirection = mode === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = descriptor?.options || {};\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  mode: StackCardMode,\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    mode,\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(props.mode, state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    return {\n      routes: props.routes,\n      scenes: props.routes.map((route, index, self) => {\n        const previousRoute = self[index - 1];\n        const nextRoute = self[index + 1];\n\n        const oldScene = state.scenes[index];\n\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute\n          ? gestures[previousRoute.key]\n          : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n        const descriptor =\n          props.descriptors[route.key] ||\n          state.descriptors[route.key] ||\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n        const nextDescriptor =\n          props.descriptors[nextRoute?.key] ||\n          state.descriptors[nextRoute?.key];\n\n        const previousDescriptor =\n          props.descriptors[previousRoute?.key] ||\n          state.descriptors[previousRoute?.key];\n\n        const scene = {\n          route,\n          descriptor,\n          progress: {\n            current: getProgressFromGesture(\n              props.mode,\n              currentGesture,\n              state.layout,\n              descriptor\n            ),\n            next: nextGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n            previous: previousGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  previousGesture,\n                  state.layout,\n                  previousDescriptor\n                )\n              : undefined,\n          },\n          __memo: [\n            route,\n            state.layout,\n            descriptor,\n            nextDescriptor,\n            previousDescriptor,\n            currentGesture,\n            nextGesture,\n            previousGesture,\n          ],\n        };\n\n        if (\n          oldScene &&\n          scene.__memo.every((it, i) => {\n            // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n            return oldScene.__memo[i] === it;\n          })\n        ) {\n          return oldScene;\n        }\n\n        return scene;\n      }),\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        props.routes,\n        props.insets,\n        props.isParentHeaderShown,\n        state.descriptors,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: { height, width },\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          props.routes,\n          props.insets,\n          props.isParentHeaderShown,\n          state.descriptors,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\n    const { getPreviousRoute } = this.props;\n    const { scenes } = this.state;\n\n    const previousRoute = getPreviousRoute({ route });\n\n    if (previousRoute) {\n      const previousScene = scenes.find(\n        (scene) => scene.route.key === previousRoute.key\n      );\n\n      return previousScene;\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const {\n      mode,\n      insets,\n      descriptors,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      getGesturesEnabled,\n      renderHeader,\n      renderScene,\n      headerMode,\n      isParentHeaderShown,\n      onTransitionStart,\n      onTransitionEnd,\n      onPageChangeStart,\n      onPageChangeConfirm,\n      onPageChangeCancel,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      // Enable on new versions of `react-native-screens`\n      // On older versions of `react-native-screens`, there's an issue with screens not being responsive to user interaction.\n      detachInactiveScreens = Platform.OS === 'web' || shouldUseActivityState,\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedDescriptor = descriptors[focusedRoute.key];\n    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n\n    let defaultTransitionPreset =\n      mode === 'modal' ? ModalTransition : DefaultTransition;\n\n    if (headerMode === 'screen') {\n      defaultTransitionPreset = {\n        ...defaultTransitionPreset,\n        headerStyleInterpolator: forNoAnimationHeader,\n      };\n    }\n\n    const {\n      top = insets.top,\n      right = insets.right,\n      bottom = insets.bottom,\n      left = insets.left,\n    } = focusedOptions.safeAreaInsets || {};\n\n    let activeScreensLimit = 1;\n\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = mode === 'modal'\n          ? i !== scenes.length - 1\n          : true,\n      } = scenes[i].descriptor.options;\n\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        break;\n      }\n    }\n\n    const isFloatHeaderAbsolute =\n      headerMode === 'float'\n        ? this.state.scenes.slice(-2).some((scene) => {\n            const { descriptor } = scene;\n            const options = descriptor ? descriptor.options : {};\n            const { headerTransparent, headerShown = true } = options;\n\n            if (headerTransparent || headerShown === false) {\n              return true;\n            }\n\n            return false;\n          })\n        : false;\n\n    const floatingHeader =\n      headerMode === 'float' ? (\n        <React.Fragment key=\"header\">\n          {renderHeader({\n            mode: 'float',\n            layout,\n            insets: { top, right, bottom, left },\n            scenes,\n            getPreviousScene: this.getPreviousScene,\n            getFocusedRoute: this.getFocusedRoute,\n            onContentHeightChange: this.handleHeaderLayout,\n            gestureDirection:\n              focusedOptions.gestureDirection !== undefined\n                ? focusedOptions.gestureDirection\n                : defaultTransitionPreset.gestureDirection,\n            styleInterpolator:\n              focusedOptions.headerStyleInterpolator !== undefined\n                ? focusedOptions.headerStyleInterpolator\n                : defaultTransitionPreset.headerStyleInterpolator,\n            style: [\n              styles.floating,\n              isFloatHeaderAbsolute && [\n                // Without this, the header buttons won't be touchable on Android when headerTransparent: true\n                { height: focusedHeaderHeight },\n                styles.absolute,\n              ],\n            ],\n          })}\n        </React.Fragment>\n      ) : null;\n\n    const isScreensEnabled = screensEnabled?.() && detachInactiveScreens;\n\n    return (\n      <React.Fragment>\n        {isFloatHeaderAbsolute ? null : floatingHeader}\n        <MaybeScreenContainer\n          enabled={isScreensEnabled}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            // For the screens that shouldn't be active, the value is 0\n            // For those that should be active, but are not the top screen, the value is 1\n            // For those on top of the stack and with interaction enabled, the value is 2\n            // For the old implementation, it stays the same it was\n            let isScreenActive: Animated.AnimatedInterpolation | 2 | 1 | 0 = 1;\n\n            if (shouldUseActivityState || Platform.OS === 'web') {\n              if (index < self.length - activeScreensLimit - 1) {\n                // screen should be inactive because it is too deep in the stack\n                isScreenActive = STATE_INACTIVE;\n              } else {\n                const sceneForActivity = scenes[self.length - 1];\n                const outputValue =\n                  index === self.length - 1\n                    ? STATE_ON_TOP // the screen is on top after the transition\n                    : index >= self.length - activeScreensLimit\n                    ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n                    : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n                isScreenActive = sceneForActivity\n                  ? sceneForActivity.progress.current.interpolate({\n                      inputRange: [0, 1 - EPSILON, 1],\n                      outputRange: [1, 1, outputValue],\n                      extrapolate: 'clamp',\n                    })\n                  : STATE_TRANSITIONING_OR_BELOW_TOP;\n              }\n            } else {\n              isScreenActive = scene.progress.next\n                ? scene.progress.next.interpolate({\n                    inputRange: [0, 1 - EPSILON, 1],\n                    outputRange: [1, 1, 0],\n                    extrapolate: 'clamp',\n                  })\n                : 1;\n            }\n\n            const {\n              safeAreaInsets,\n              headerShown = true,\n              headerTransparent,\n              cardShadowEnabled,\n              cardOverlayEnabled,\n              cardOverlay,\n              cardStyle,\n              animationEnabled,\n              gestureResponseDistance,\n              gestureVelocityImpact,\n              gestureDirection = defaultTransitionPreset.gestureDirection,\n              transitionSpec = defaultTransitionPreset.transitionSpec,\n              cardStyleInterpolator = animationEnabled === false\n                ? forNoAnimationCard\n                : defaultTransitionPreset.cardStyleInterpolator,\n              headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n            } = scene.descriptor\n              ? scene.descriptor.options\n              : ({} as StackNavigationOptions);\n\n            let transitionConfig = {\n              gestureDirection,\n              transitionSpec,\n              cardStyleInterpolator,\n              headerStyleInterpolator,\n            };\n\n            // When a screen is not the last, it should use next screen's transition config\n            // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n            // For example combining a slide and a modal transition would look wrong otherwise\n            // With this approach, combining different transition styles in the same navigator mostly looks right\n            // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n            // but majority of the transitions look alright\n            if (index !== self.length - 1) {\n              const nextScene = scenes[index + 1];\n\n              if (nextScene) {\n                const {\n                  animationEnabled,\n                  gestureDirection = defaultTransitionPreset.gestureDirection,\n                  transitionSpec = defaultTransitionPreset.transitionSpec,\n                  cardStyleInterpolator = animationEnabled === false\n                    ? forNoAnimationCard\n                    : defaultTransitionPreset.cardStyleInterpolator,\n                  headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n                } = nextScene.descriptor\n                  ? nextScene.descriptor.options\n                  : ({} as StackNavigationOptions);\n\n                transitionConfig = {\n                  gestureDirection,\n                  transitionSpec,\n                  cardStyleInterpolator,\n                  headerStyleInterpolator,\n                };\n              }\n            }\n\n            const {\n              top: safeAreaInsetTop = insets.top,\n              right: safeAreaInsetRight = insets.right,\n              bottom: safeAreaInsetBottom = insets.bottom,\n              left: safeAreaInsetLeft = insets.left,\n            } = safeAreaInsets || {};\n\n            const headerHeight =\n              headerMode !== 'none' && headerShown !== false\n                ? headerHeights[route.key]\n                : 0;\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={isScreensEnabled}\n                active={isScreenActive}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  cardOverlay={cardOverlay}\n                  cardOverlayEnabled={cardOverlayEnabled}\n                  cardShadowEnabled={cardShadowEnabled}\n                  cardStyle={cardStyle}\n                  onPageChangeStart={onPageChangeStart}\n                  onPageChangeConfirm={onPageChangeConfirm}\n                  onPageChangeCancel={onPageChangeCancel}\n                  onGestureStart={onGestureStart}\n                  onGestureCancel={onGestureCancel}\n                  onGestureEnd={onGestureEnd}\n                  gestureResponseDistance={gestureResponseDistance}\n                  headerHeight={headerHeight}\n                  isParentHeaderShown={isParentHeaderShown}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousScene={this.getPreviousScene}\n                  getFocusedRoute={this.getFocusedRoute}\n                  mode={mode}\n                  headerMode={headerMode}\n                  headerShown={headerShown}\n                  hasAbsoluteHeader={\n                    isFloatHeaderAbsolute && !headerTransparent\n                  }\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  gestureEnabled={index !== 0 && getGesturesEnabled({ route })}\n                  gestureVelocityImpact={gestureVelocityImpact}\n                  {...transitionConfig}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {isFloatHeaderAbsolute ? floatingHeader : null}\n      </React.Fragment>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}