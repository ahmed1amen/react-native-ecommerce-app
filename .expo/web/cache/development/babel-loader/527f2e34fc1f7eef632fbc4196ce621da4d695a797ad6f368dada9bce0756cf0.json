{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = DrawerView;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _reactNativeScreens = require(\"react-native-screens\");\nvar _native = require(\"@react-navigation/native\");\nvar _GestureHandler = require(\"./GestureHandler\");\nvar _SafeAreaProviderCompat = _interopRequireDefault(require(\"./SafeAreaProviderCompat\"));\nvar _ResourceSavingScene = _interopRequireDefault(require(\"./ResourceSavingScene\"));\nvar _Header = _interopRequireDefault(require(\"./Header\"));\nvar _DrawerContent = _interopRequireDefault(require(\"./DrawerContent\"));\nvar _Drawer = _interopRequireDefault(require(\"./Drawer\"));\nvar _DrawerOpenContext = _interopRequireDefault(require(\"../utils/DrawerOpenContext\"));\nvar _DrawerPositionContext = _interopRequireDefault(require(\"../utils/DrawerPositionContext\"));\nvar _useWindowDimensions = _interopRequireDefault(require(\"../utils/useWindowDimensions\"));\nvar _getIsDrawerOpenFromState = _interopRequireDefault(require(\"../utils/getIsDrawerOpenFromState\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar getDefaultDrawerWidth = function getDefaultDrawerWidth(_ref) {\n  var height = _ref.height,\n    width = _ref.width;\n  var smallerAxisSize = Math.min(height, width);\n  var isLandscape = width > height;\n  var isTablet = smallerAxisSize >= 600;\n  var appBarHeight = _reactNative.Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n  var maxWidth = isTablet ? 320 : 280;\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\nvar GestureHandlerWrapper = _GestureHandler.GestureHandlerRootView !== null && _GestureHandler.GestureHandlerRootView !== void 0 ? _GestureHandler.GestureHandlerRootView : _reactNative.View;\nfunction DrawerView(_ref2) {\n  var state = _ref2.state,\n    navigation = _ref2.navigation,\n    descriptors = _ref2.descriptors,\n    _ref2$lazy = _ref2.lazy,\n    lazy = _ref2$lazy === void 0 ? true : _ref2$lazy,\n    _ref2$drawerContent = _ref2.drawerContent,\n    drawerContent = _ref2$drawerContent === void 0 ? function (props) {\n      return React.createElement(_DrawerContent.default, props);\n    } : _ref2$drawerContent,\n    _ref2$drawerPosition = _ref2.drawerPosition,\n    drawerPosition = _ref2$drawerPosition === void 0 ? _reactNative.I18nManager.isRTL ? 'right' : 'left' : _ref2$drawerPosition,\n    _ref2$keyboardDismiss = _ref2.keyboardDismissMode,\n    keyboardDismissMode = _ref2$keyboardDismiss === void 0 ? 'on-drag' : _ref2$keyboardDismiss,\n    _ref2$overlayColor = _ref2.overlayColor,\n    overlayColor = _ref2$overlayColor === void 0 ? 'rgba(0, 0, 0, 0.5)' : _ref2$overlayColor,\n    _ref2$drawerType = _ref2.drawerType,\n    drawerType = _ref2$drawerType === void 0 ? 'front' : _ref2$drawerType,\n    _ref2$hideStatusBar = _ref2.hideStatusBar,\n    hideStatusBar = _ref2$hideStatusBar === void 0 ? false : _ref2$hideStatusBar,\n    _ref2$statusBarAnimat = _ref2.statusBarAnimation,\n    statusBarAnimation = _ref2$statusBarAnimat === void 0 ? 'slide' : _ref2$statusBarAnimat,\n    drawerContentOptions = _ref2.drawerContentOptions,\n    drawerStyle = _ref2.drawerStyle,\n    edgeWidth = _ref2.edgeWidth,\n    gestureHandlerProps = _ref2.gestureHandlerProps,\n    minSwipeDistance = _ref2.minSwipeDistance,\n    sceneContainerStyle = _ref2.sceneContainerStyle,\n    _ref2$detachInactiveS = _ref2.detachInactiveScreens,\n    detachInactiveScreens = _ref2$detachInactiveS === void 0 ? true : _ref2$detachInactiveS;\n  var _React$useState = React.useState([state.routes[state.index].key]),\n    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n    loaded = _React$useState2[0],\n    setLoaded = _React$useState2[1];\n  var dimensions = (0, _useWindowDimensions.default)();\n  var _useTheme = (0, _native.useTheme)(),\n    colors = _useTheme.colors;\n  var isDrawerOpen = (0, _getIsDrawerOpenFromState.default)(state);\n  var handleDrawerOpen = React.useCallback(function () {\n    navigation.dispatch((0, _extends2.default)({}, _native.DrawerActions.openDrawer(), {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  var handleDrawerClose = React.useCallback(function () {\n    navigation.dispatch((0, _extends2.default)({}, _native.DrawerActions.closeDrawer(), {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  React.useEffect(function () {\n    if (!isDrawerOpen || drawerType === 'permanent') {\n      return;\n    }\n    var handleClose = function handleClose() {\n      if (!navigation.isFocused()) {\n        return false;\n      }\n      handleDrawerClose();\n      return true;\n    };\n    var handleEscape = function handleEscape(e) {\n      if (e.key === 'Escape') {\n        handleClose();\n      }\n    };\n    var subscription = _reactNative.BackHandler.addEventListener('hardwareBackPress', handleClose);\n    if (_reactNative.Platform.OS === 'web') {\n      var _document, _document$body, _document$body$addEve;\n      (_document = document) === null || _document === void 0 ? void 0 : (_document$body = _document.body) === null || _document$body === void 0 ? void 0 : (_document$body$addEve = _document$body.addEventListener) === null || _document$body$addEve === void 0 ? void 0 : _document$body$addEve.call(_document$body, 'keyup', handleEscape);\n    }\n    return function () {\n      subscription.remove();\n      if (_reactNative.Platform.OS === 'web') {\n        var _document2, _document2$body, _document2$body$remov;\n        (_document2 = document) === null || _document2 === void 0 ? void 0 : (_document2$body = _document2.body) === null || _document2$body === void 0 ? void 0 : (_document2$body$remov = _document2$body.removeEventListener) === null || _document2$body$remov === void 0 ? void 0 : _document2$body$remov.call(_document2$body, 'keyup', handleEscape);\n      }\n    };\n  }, [drawerType, handleDrawerClose, isDrawerOpen, navigation]);\n  var focusedRouteKey = state.routes[state.index].key;\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([].concat((0, _toConsumableArray2.default)(loaded), [focusedRouteKey]));\n  }\n  var renderNavigationView = function renderNavigationView(_ref3) {\n    var progress = _ref3.progress;\n    return React.createElement(_DrawerPositionContext.default.Provider, {\n      value: drawerPosition\n    }, drawerContent((0, _extends2.default)({}, drawerContentOptions, {\n      progress: progress,\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    })));\n  };\n  var renderContent = function renderContent() {\n    var isScreensEnabled = (_reactNativeScreens.screensEnabled === null || _reactNativeScreens.screensEnabled === void 0 ? void 0 : (0, _reactNativeScreens.screensEnabled)()) && detachInactiveScreens;\n    return React.createElement(_reactNativeScreens.ScreenContainer, {\n      enabled: isScreensEnabled,\n      style: styles.content\n    }, state.routes.map(function (route, index) {\n      var descriptor = descriptors[route.key];\n      var unmountOnBlur = descriptor.options.unmountOnBlur;\n      var isFocused = state.index === index;\n      if (unmountOnBlur && !isFocused) {\n        return null;\n      }\n      if (lazy && !loaded.includes(route.key) && !isFocused) {\n        return null;\n      }\n      var _descriptor$options = descriptor.options,\n        _descriptor$options$h = _descriptor$options.header,\n        header = _descriptor$options$h === void 0 ? function (props) {\n          return React.createElement(_Header.default, props);\n        } : _descriptor$options$h,\n        _descriptor$options$h2 = _descriptor$options.headerShown,\n        headerShown = _descriptor$options$h2 === void 0 ? false : _descriptor$options$h2;\n      return React.createElement(_ResourceSavingScene.default, {\n        key: route.key,\n        style: [_reactNative.StyleSheet.absoluteFill, {\n          opacity: isFocused ? 1 : 0\n        }],\n        isVisible: isFocused,\n        enabled: isScreensEnabled\n      }, headerShown ? React.createElement(_native.NavigationContext.Provider, {\n        value: descriptor.navigation\n      }, React.createElement(_native.NavigationRouteContext.Provider, {\n        value: route\n      }, header({\n        layout: dimensions,\n        scene: {\n          route: route,\n          descriptor: descriptor\n        }\n      }))) : null, descriptor.render());\n    }));\n  };\n  var activeKey = state.routes[state.index].key;\n  var _descriptors$activeKe = descriptors[activeKey].options,\n    gestureEnabled = _descriptors$activeKe.gestureEnabled,\n    swipeEnabled = _descriptors$activeKe.swipeEnabled;\n  return React.createElement(_native.NavigationHelpersContext.Provider, {\n    value: navigation\n  }, React.createElement(GestureHandlerWrapper, {\n    style: styles.content\n  }, React.createElement(_SafeAreaProviderCompat.default, null, React.createElement(_DrawerOpenContext.default.Provider, {\n    value: isDrawerOpen\n  }, React.createElement(_Drawer.default, {\n    open: isDrawerOpen,\n    gestureEnabled: gestureEnabled,\n    swipeEnabled: swipeEnabled,\n    onOpen: handleDrawerOpen,\n    onClose: handleDrawerClose,\n    gestureHandlerProps: gestureHandlerProps,\n    drawerType: drawerType,\n    drawerPosition: drawerPosition,\n    sceneContainerStyle: [{\n      backgroundColor: colors.background\n    }, sceneContainerStyle],\n    drawerStyle: [{\n      width: getDefaultDrawerWidth(dimensions),\n      backgroundColor: colors.card\n    }, drawerType === 'permanent' && (drawerPosition === 'left' ? {\n      borderRightColor: colors.border,\n      borderRightWidth: _reactNative.StyleSheet.hairlineWidth\n    } : {\n      borderLeftColor: colors.border,\n      borderLeftWidth: _reactNative.StyleSheet.hairlineWidth\n    }), drawerStyle],\n    overlayStyle: {\n      backgroundColor: overlayColor\n    },\n    swipeEdgeWidth: edgeWidth,\n    swipeDistanceThreshold: minSwipeDistance,\n    hideStatusBar: hideStatusBar,\n    statusBarAnimation: statusBarAnimation,\n    renderDrawerContent: renderNavigationView,\n    renderSceneContent: renderContent,\n    keyboardDismissMode: keyboardDismissMode,\n    dimensions: dimensions\n  })))));\n}\nvar styles = _reactNative.StyleSheet.create({\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["React","_interopRequireWildcard","require","_reactNative","_reactNativeScreens","_native","_GestureHandler","_SafeAreaProviderCompat","_interopRequireDefault","_ResourceSavingScene","_Header","_DrawerContent","_Drawer","_DrawerOpenContext","_DrawerPositionContext","_useWindowDimensions","_getIsDrawerOpenFromState","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","getDefaultDrawerWidth","_ref","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","Platform","OS","maxWidth","GestureHandlerWrapper","GestureHandlerRootView","View","DrawerView","_ref2","state","navigation","descriptors","_ref2$lazy","lazy","_ref2$drawerContent","drawerContent","props","createElement","DrawerContent","_ref2$drawerPosition","drawerPosition","I18nManager","isRTL","_ref2$keyboardDismiss","keyboardDismissMode","_ref2$overlayColor","overlayColor","_ref2$drawerType","drawerType","_ref2$hideStatusBar","hideStatusBar","_ref2$statusBarAnimat","statusBarAnimation","drawerContentOptions","drawerStyle","edgeWidth","gestureHandlerProps","minSwipeDistance","sceneContainerStyle","_ref2$detachInactiveS","detachInactiveScreens","_React$useState","useState","routes","index","_React$useState2","_slicedToArray2","loaded","setLoaded","dimensions","useWindowDimensions","_useTheme","useTheme","colors","isDrawerOpen","getIsDrawerOpenFromState","handleDrawerOpen","useCallback","dispatch","_extends2","DrawerActions","openDrawer","target","handleDrawerClose","closeDrawer","useEffect","handleClose","isFocused","handleEscape","e","subscription","BackHandler","addEventListener","_document","_document$body","_document$body$addEve","document","body","remove","_document2","_document2$body","_document2$body$remov","removeEventListener","focusedRouteKey","includes","concat","_toConsumableArray2","renderNavigationView","_ref3","progress","DrawerPositionContext","Provider","value","renderContent","isScreensEnabled","screensEnabled","ScreenContainer","enabled","style","styles","content","map","route","descriptor","unmountOnBlur","options","_descriptor$options","_descriptor$options$h","header","Header","_descriptor$options$h2","headerShown","ResourceSavingScene","StyleSheet","absoluteFill","opacity","isVisible","NavigationContext","NavigationRouteContext","layout","scene","render","activeKey","_descriptors$activeKe","gestureEnabled","swipeEnabled","NavigationHelpersContext","SafeAreaProviderCompat","DrawerOpenContext","Drawer","open","onOpen","onClose","backgroundColor","background","card","borderRightColor","border","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","overlayStyle","swipeEdgeWidth","swipeDistanceThreshold","renderDrawerContent","renderSceneContent","create","flex"],"sources":["/home/ahmed/Music/softtag/Source Code/node_modules/@react-navigation/drawer/lib/module/views/DrawerView.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  BackHandler,\n} from 'react-native';\nimport { ScreenContainer, screensEnabled } from 'react-native-screens';\nimport {\n  NavigationHelpersContext,\n  NavigationContext,\n  NavigationRouteContext,\n  DrawerNavigationState,\n  DrawerActions,\n  useTheme,\n  ParamListBase,\n} from '@react-navigation/native';\n\nimport { GestureHandlerRootView } from './GestureHandler';\nimport SafeAreaProviderCompat from './SafeAreaProviderCompat';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport Header from './Header';\nimport DrawerContent from './DrawerContent';\nimport Drawer from './Drawer';\nimport DrawerOpenContext from '../utils/DrawerOpenContext';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\nimport useWindowDimensions from '../utils/useWindowDimensions';\nimport getIsDrawerOpenFromState from '../utils/getIsDrawerOpenFromState';\nimport type {\n  DrawerDescriptorMap,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerContentComponentProps,\n  DrawerHeaderProps,\n} from '../types';\n\ntype Props = DrawerNavigationConfig & {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/components/navigation-drawer\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Component that renders the drawer.\n */\nexport default function DrawerView({\n  state,\n  navigation,\n  descriptors,\n  lazy = true,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  drawerPosition = I18nManager.isRTL ? 'right' : 'left',\n  keyboardDismissMode = 'on-drag',\n  overlayColor = 'rgba(0, 0, 0, 0.5)',\n  drawerType = 'front',\n  hideStatusBar = false,\n  statusBarAnimation = 'slide',\n  drawerContentOptions,\n  drawerStyle,\n  edgeWidth,\n  gestureHandlerProps,\n  minSwipeDistance,\n  sceneContainerStyle,\n  detachInactiveScreens = true,\n}: Props) {\n  const [loaded, setLoaded] = React.useState([state.routes[state.index].key]);\n  const dimensions = useWindowDimensions();\n\n  const { colors } = useTheme();\n\n  const isDrawerOpen = getIsDrawerOpenFromState(state);\n\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  React.useEffect(() => {\n    if (!isDrawerOpen || drawerType === 'permanent') {\n      return;\n    }\n\n    const handleClose = () => {\n      // We shouldn't handle the back button if the parent screen isn't focused\n      // This will avoid the drawer overriding event listeners from a focused screen\n      if (!navigation.isFocused()) {\n        return false;\n      }\n\n      handleDrawerClose();\n\n      return true;\n    };\n\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        handleClose();\n      }\n    };\n\n    // We only add the listeners when drawer opens\n    // This way we can make sure that the listener is added as late as possible\n    // This will make sure that our handler will run first when back button is pressed\n    const subscription = BackHandler.addEventListener(\n      'hardwareBackPress',\n      handleClose\n    );\n\n    if (Platform.OS === 'web') {\n      document?.body?.addEventListener?.('keyup', handleEscape);\n    }\n\n    return () => {\n      subscription.remove();\n\n      if (Platform.OS === 'web') {\n        document?.body?.removeEventListener?.('keyup', handleEscape);\n      }\n    };\n  }, [drawerType, handleDrawerClose, isDrawerOpen, navigation]);\n\n  const focusedRouteKey = state.routes[state.index].key;\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([...loaded, focusedRouteKey]);\n  }\n\n  const renderNavigationView = ({ progress }: any) => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          ...drawerContentOptions,\n          progress: progress,\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderContent = () => {\n    const isScreensEnabled = screensEnabled?.() && detachInactiveScreens;\n\n    return (\n      // @ts-ignore\n      <ScreenContainer enabled={isScreensEnabled} style={styles.content}>\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(route.key) && !isFocused) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          const {\n            header = (props: DrawerHeaderProps) => <Header {...props} />,\n            headerShown = false,\n          } = descriptor.options;\n\n          return (\n            <ResourceSavingScene\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]}\n              isVisible={isFocused}\n              enabled={isScreensEnabled}\n            >\n              {headerShown ? (\n                <NavigationContext.Provider value={descriptor.navigation}>\n                  <NavigationRouteContext.Provider value={route}>\n                    {header({\n                      layout: dimensions,\n                      scene: { route, descriptor },\n                    })}\n                  </NavigationRouteContext.Provider>\n                </NavigationContext.Provider>\n              ) : null}\n              {descriptor.render()}\n            </ResourceSavingScene>\n          );\n        })}\n      </ScreenContainer>\n    );\n  };\n\n  const activeKey = state.routes[state.index].key;\n  const { gestureEnabled, swipeEnabled } = descriptors[activeKey].options;\n\n  return (\n    <NavigationHelpersContext.Provider value={navigation}>\n      <GestureHandlerWrapper style={styles.content}>\n        <SafeAreaProviderCompat>\n          <DrawerOpenContext.Provider value={isDrawerOpen}>\n            <Drawer\n              open={isDrawerOpen}\n              gestureEnabled={gestureEnabled}\n              swipeEnabled={swipeEnabled}\n              onOpen={handleDrawerOpen}\n              onClose={handleDrawerClose}\n              gestureHandlerProps={gestureHandlerProps}\n              drawerType={drawerType}\n              drawerPosition={drawerPosition}\n              sceneContainerStyle={[\n                { backgroundColor: colors.background },\n                sceneContainerStyle,\n              ]}\n              drawerStyle={[\n                {\n                  width: getDefaultDrawerWidth(dimensions),\n                  backgroundColor: colors.card,\n                },\n                drawerType === 'permanent' &&\n                  (drawerPosition === 'left'\n                    ? {\n                        borderRightColor: colors.border,\n                        borderRightWidth: StyleSheet.hairlineWidth,\n                      }\n                    : {\n                        borderLeftColor: colors.border,\n                        borderLeftWidth: StyleSheet.hairlineWidth,\n                      }),\n                drawerStyle,\n              ]}\n              overlayStyle={{ backgroundColor: overlayColor }}\n              swipeEdgeWidth={edgeWidth}\n              swipeDistanceThreshold={minSwipeDistance}\n              hideStatusBar={hideStatusBar}\n              statusBarAnimation={statusBarAnimation}\n              renderDrawerContent={renderNavigationView}\n              renderSceneContent={renderContent}\n              keyboardDismissMode={keyboardDismissMode}\n              dimensions={dimensions}\n            />\n          </DrawerOpenContext.Provider>\n        </SafeAreaProviderCompat>\n      </GestureHandlerWrapper>\n    </NavigationHelpersContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}