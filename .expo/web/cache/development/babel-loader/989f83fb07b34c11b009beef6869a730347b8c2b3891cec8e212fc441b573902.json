{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.Slider = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\nvar _reactNative = require(\"react-native\");\nvar _config = require(\"../config\");\nvar _excluded = [\"minimumValue\", \"maximumValue\", \"minimumTrackTintColor\", \"maximumTrackTintColor\", \"thumbTintColor\", \"containerStyle\", \"style\", \"trackStyle\", \"thumbStyle\", \"debugTouchArea\", \"orientation\"];\nvar _jsxFileName = \"/home/ahmed/Music/softtag/Source Code/src/components/slider/Slider.js\";\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar TRACK_SIZE = 4;\nvar THUMB_SIZE = 20;\nvar DEFAULT_ANIMATION_CONFIGS = {\n  spring: {\n    friction: 7,\n    tension: 100\n  },\n  timing: {\n    duration: 150,\n    easing: _reactNative.Easing.inOut(_reactNative.Easing.ease),\n    delay: 0\n  }\n};\nvar getBoundedValue = function getBoundedValue(_ref) {\n  var value = _ref.value,\n    maximumValue = _ref.maximumValue,\n    minimumValue = _ref.minimumValue;\n  return value > maximumValue ? maximumValue : value < minimumValue ? minimumValue : value;\n};\nvar Rect = function () {\n  function Rect(x, y, width, height) {\n    (0, _classCallCheck2.default)(this, Rect);\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n  (0, _createClass2.default)(Rect, [{\n    key: \"containsPoint\",\n    value: function containsPoint(x, y) {\n      return x >= this.x && y >= this.y && x <= this.x + this.width && y <= this.y + this.height;\n    }\n  }]);\n  return Rect;\n}();\nvar Slider = function (_Component) {\n  (0, _inherits2.default)(Slider, _Component);\n  var _super = _createSuper(Slider);\n  function Slider(props) {\n    var _this;\n    (0, _classCallCheck2.default)(this, Slider);\n    _this = _super.call(this, props);\n    _this.measureContainer = function (x) {\n      _this.handleMeasure('containerSize', x);\n    };\n    _this.measureTrack = function (x) {\n      _this.handleMeasure('trackSize', x);\n    };\n    _this.measureThumb = function (x) {\n      _this.handleMeasure('thumbSize', x);\n    };\n    _this.state = {\n      containerSize: {\n        width: 0,\n        height: 0\n      },\n      trackSize: {\n        width: 0,\n        height: 0\n      },\n      thumbSize: {\n        width: 0,\n        height: 0\n      },\n      allMeasured: false,\n      value: new _reactNative.Animated.Value(getBoundedValue(props))\n    };\n    _this.panResponder = _reactNative.PanResponder.create({\n      onStartShouldSetPanResponder: _this.handleStartShouldSetPanResponder.bind((0, _assertThisInitialized2.default)(_this)),\n      onMoveShouldSetPanResponder: _this.handleMoveShouldSetPanResponder.bind((0, _assertThisInitialized2.default)(_this)),\n      onPanResponderGrant: _this.handlePanResponderGrant.bind((0, _assertThisInitialized2.default)(_this)),\n      onPanResponderMove: _this.handlePanResponderMove.bind((0, _assertThisInitialized2.default)(_this)),\n      onPanResponderRelease: _this.handlePanResponderEnd.bind((0, _assertThisInitialized2.default)(_this)),\n      onPanResponderTerminationRequest: _this.handlePanResponderRequestEnd.bind((0, _assertThisInitialized2.default)(_this)),\n      onPanResponderTerminate: _this.handlePanResponderEnd.bind((0, _assertThisInitialized2.default)(_this))\n    });\n    return _this;\n  }\n  (0, _createClass2.default)(Slider, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var newValue = getBoundedValue(this.props);\n      if (prevProps.value !== newValue) {\n        if (this.props.animateTransitions) {\n          this.setCurrentValueAnimated(newValue);\n        } else {\n          this.setCurrentValue(newValue);\n        }\n      }\n    }\n  }, {\n    key: \"setCurrentValue\",\n    value: function setCurrentValue(value) {\n      this.state.value.setValue(value);\n    }\n  }, {\n    key: \"setCurrentValueAnimated\",\n    value: function setCurrentValueAnimated(value) {\n      var animationType = this.props.animationType;\n      var animationConfig = (0, _extends2.default)({}, DEFAULT_ANIMATION_CONFIGS[animationType], this.props.animationConfig, {\n        toValue: value\n      });\n      _reactNative.Animated[animationType](this.state.value, animationConfig).start();\n    }\n  }, {\n    key: \"handleMoveShouldSetPanResponder\",\n    value: function handleMoveShouldSetPanResponder() {\n      return false;\n    }\n  }, {\n    key: \"handlePanResponderGrant\",\n    value: function handlePanResponderGrant() {\n      this._previousLeft = this.getThumbLeft(this.getCurrentValue());\n      this.fireChangeEvent('onSlidingStart');\n    }\n  }, {\n    key: \"handlePanResponderMove\",\n    value: function handlePanResponderMove(_, gestureState) {\n      if (this.props.disabled) {\n        return;\n      }\n      this.setCurrentValue(this.getValue(gestureState));\n      this.fireChangeEvent('onValueChange');\n    }\n  }, {\n    key: \"handlePanResponderRequestEnd\",\n    value: function handlePanResponderRequestEnd() {\n      return false;\n    }\n  }, {\n    key: \"handlePanResponderEnd\",\n    value: function handlePanResponderEnd(_, gestureState) {\n      if (this.props.disabled) {\n        return;\n      }\n      this.setCurrentValue(this.getValue(gestureState));\n      this.fireChangeEvent('onSlidingComplete');\n    }\n  }, {\n    key: \"thumbHitTest\",\n    value: function thumbHitTest(_ref2) {\n      var nativeEvent = _ref2.nativeEvent;\n      var thumbTouchRect = this.getThumbTouchRect();\n      return thumbTouchRect.containsPoint(nativeEvent.locationX, nativeEvent.locationY);\n    }\n  }, {\n    key: \"handleStartShouldSetPanResponder\",\n    value: function handleStartShouldSetPanResponder(e) {\n      return this.thumbHitTest(e);\n    }\n  }, {\n    key: \"fireChangeEvent\",\n    value: function fireChangeEvent(event) {\n      if (this.props[event]) {\n        this.props[event](this.getCurrentValue());\n      }\n    }\n  }, {\n    key: \"getTouchOverflowSize\",\n    value: function getTouchOverflowSize() {\n      var _this$state = this.state,\n        thumbSize = _this$state.thumbSize,\n        allMeasured = _this$state.allMeasured,\n        containerSize = _this$state.containerSize;\n      var thumbTouchSize = this.props.thumbTouchSize;\n      var size = {};\n      if (allMeasured === true) {\n        size.width = Math.max(0, thumbTouchSize.width - thumbSize.width);\n        size.height = Math.max(0, thumbTouchSize.height - containerSize.height);\n      }\n      return size;\n    }\n  }, {\n    key: \"getTouchOverflowStyle\",\n    value: function getTouchOverflowStyle() {\n      var _this$getTouchOverflo = this.getTouchOverflowSize(),\n        width = _this$getTouchOverflo.width,\n        height = _this$getTouchOverflo.height;\n      var touchOverflowStyle = {};\n      if (width !== undefined && height !== undefined) {\n        var verticalMargin = -height / 2;\n        touchOverflowStyle.marginTop = verticalMargin;\n        touchOverflowStyle.marginBottom = verticalMargin;\n        var horizontalMargin = -width / 2;\n        touchOverflowStyle.marginLeft = horizontalMargin;\n        touchOverflowStyle.marginRight = horizontalMargin;\n      }\n      if (this.props.debugTouchArea === true) {\n        touchOverflowStyle.backgroundColor = 'orange';\n        touchOverflowStyle.opacity = 0.5;\n      }\n      return touchOverflowStyle;\n    }\n  }, {\n    key: \"handleMeasure\",\n    value: function handleMeasure(name, x) {\n      var _x$nativeEvent$layout = x.nativeEvent.layout,\n        layoutWidth = _x$nativeEvent$layout.width,\n        layoutHeight = _x$nativeEvent$layout.height;\n      var width = this.props.orientation === 'vertical' ? layoutHeight : layoutWidth;\n      var height = this.props.orientation === 'vertical' ? layoutWidth : layoutHeight;\n      var size = {\n        width: width,\n        height: height\n      };\n      var storeName = \"_\" + name;\n      var currentSize = this[storeName];\n      if (currentSize && width === currentSize.width && height === currentSize.height) {\n        return;\n      }\n      this[storeName] = size;\n      if (this._containerSize && this._trackSize && this._thumbSize) {\n        this.setState({\n          containerSize: this._containerSize,\n          trackSize: this._trackSize,\n          thumbSize: this._thumbSize,\n          allMeasured: true\n        });\n      }\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(gestureState) {\n      var length = this.state.containerSize.width - this.state.thumbSize.width;\n      var thumbLeft = this._previousLeft + (this.props.orientation === 'vertical' ? gestureState.dy : gestureState.dx);\n      var ratio = thumbLeft / length;\n      if (this.props.step) {\n        return Math.max(this.props.minimumValue, Math.min(this.props.maximumValue, this.props.minimumValue + Math.round(ratio * (this.props.maximumValue - this.props.minimumValue) / this.props.step) * this.props.step));\n      }\n      return Math.max(this.props.minimumValue, Math.min(this.props.maximumValue, ratio * (this.props.maximumValue - this.props.minimumValue) + this.props.minimumValue));\n    }\n  }, {\n    key: \"getCurrentValue\",\n    value: function getCurrentValue() {\n      return this.state.value.__getValue();\n    }\n  }, {\n    key: \"getRatio\",\n    value: function getRatio(value) {\n      return (value - this.props.minimumValue) / (this.props.maximumValue - this.props.minimumValue);\n    }\n  }, {\n    key: \"getThumbLeft\",\n    value: function getThumbLeft(value) {\n      var ratio = this.getRatio(value);\n      return ratio * (this.state.containerSize.width - this.state.thumbSize.width);\n    }\n  }, {\n    key: \"getThumbTouchRect\",\n    value: function getThumbTouchRect() {\n      var _this$state2 = this.state,\n        thumbSize = _this$state2.thumbSize,\n        containerSize = _this$state2.containerSize;\n      var thumbTouchSize = this.props.thumbTouchSize;\n      var touchOverflowSize = this.getTouchOverflowSize();\n      if (this.props.orientation === 'vertical') {\n        return new Rect(touchOverflowSize.height / 2 + (containerSize.height - thumbTouchSize.height) / 2, touchOverflowSize.width / 2 + this.getThumbLeft(this.getCurrentValue()) + (thumbSize.width - thumbTouchSize.width) / 2, thumbTouchSize.width, thumbTouchSize.height);\n      }\n      return new Rect(touchOverflowSize.width / 2 + this.getThumbLeft(this.getCurrentValue()) + (thumbSize.width - thumbTouchSize.width) / 2, touchOverflowSize.height / 2 + (containerSize.height - thumbTouchSize.height) / 2, thumbTouchSize.width, thumbTouchSize.height);\n    }\n  }, {\n    key: \"renderDebugThumbTouchRect\",\n    value: function renderDebugThumbTouchRect(thumbLeft) {\n      var thumbTouchRect = this.getThumbTouchRect();\n      var positionStyle = {\n        left: thumbLeft,\n        top: thumbTouchRect.y,\n        width: thumbTouchRect.width,\n        height: thumbTouchRect.height\n      };\n      return _react.default.createElement(_reactNative.Animated.View, {\n        style: positionStyle,\n        pointerEvents: \"none\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 12\n        }\n      });\n    }\n  }, {\n    key: \"getMinimumTrackStyles\",\n    value: function getMinimumTrackStyles(thumbStart) {\n      var _this$state3 = this.state,\n        thumbSize = _this$state3.thumbSize,\n        trackSize = _this$state3.trackSize;\n      var minimumTrackStyle = {\n        position: 'absolute'\n      };\n      if (this.props.orientation === 'vertical') {\n        minimumTrackStyle.height = _reactNative.Animated.add(thumbStart, thumbSize.height / 2);\n        minimumTrackStyle.marginLeft = -trackSize.width;\n      } else {\n        minimumTrackStyle.width = _reactNative.Animated.add(thumbStart, thumbSize.width / 2);\n        minimumTrackStyle.marginTop = -trackSize.height;\n      }\n      return minimumTrackStyle;\n    }\n  }, {\n    key: \"getThumbPositionStyles\",\n    value: function getThumbPositionStyles(thumbStart) {\n      if (this.props.orientation === 'vertical') {\n        return [{\n          translateX: -(this.state.trackSize.height + this.state.thumbSize.height) / 2\n        }, {\n          translateY: thumbStart\n        }];\n      }\n      return [{\n        translateX: thumbStart\n      }, {\n        translateY: -(this.state.trackSize.height + this.state.thumbSize.height) / 2\n      }];\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        minimumValue = _this$props.minimumValue,\n        maximumValue = _this$props.maximumValue,\n        minimumTrackTintColor = _this$props.minimumTrackTintColor,\n        maximumTrackTintColor = _this$props.maximumTrackTintColor,\n        thumbTintColor = _this$props.thumbTintColor,\n        containerStyle = _this$props.containerStyle,\n        style = _this$props.style,\n        trackStyle = _this$props.trackStyle,\n        thumbStyle = _this$props.thumbStyle,\n        debugTouchArea = _this$props.debugTouchArea,\n        orientation = _this$props.orientation,\n        other = (0, _objectWithoutProperties2.default)(_this$props, _excluded);\n      var _this$state4 = this.state,\n        value = _this$state4.value,\n        containerSize = _this$state4.containerSize,\n        thumbSize = _this$state4.thumbSize,\n        allMeasured = _this$state4.allMeasured;\n      var mainStyles = containerStyle || styles;\n      var thumbStart = value.interpolate({\n        inputRange: [minimumValue, maximumValue],\n        outputRange: [0, containerSize.width - thumbSize.width]\n      });\n      var valueVisibleStyle = {};\n      if (!allMeasured) {\n        valueVisibleStyle.height = 0;\n        valueVisibleStyle.width = 0;\n      }\n      var minimumTrackStyle = (0, _extends2.default)({}, this.getMinimumTrackStyles(thumbStart), {\n        backgroundColor: minimumTrackTintColor\n      }, valueVisibleStyle);\n      var thumbStyleTransform = thumbStyle && thumbStyle.transform || [];\n      var touchOverflowStyle = this.getTouchOverflowStyle();\n      return _react.default.createElement(_reactNative.View, (0, _extends2.default)({}, other, {\n        style: _reactNative.StyleSheet.flatten([orientation === 'vertical' ? mainStyles.containerVertical : mainStyles.containerHorizontal, style]),\n        onLayout: this.measureContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 7\n        }\n      }), _react.default.createElement(_reactNative.View, {\n        style: _reactNative.StyleSheet.flatten([mainStyles.track, orientation === 'vertical' ? mainStyles.trackVertical : mainStyles.trackHorizontal, trackStyle, {\n          backgroundColor: maximumTrackTintColor\n        }]),\n        onLayout: this.measureTrack,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 9\n        }\n      }), _react.default.createElement(_reactNative.Animated.View, {\n        style: _reactNative.StyleSheet.flatten([mainStyles.track, orientation === 'vertical' ? mainStyles.trackVertical : mainStyles.trackHorizontal, trackStyle, minimumTrackStyle]),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 9\n        }\n      }), _react.default.createElement(_reactNative.Animated.View, {\n        testID: \"sliderThumb\",\n        onLayout: this.measureThumb,\n        style: _reactNative.StyleSheet.flatten([{\n          backgroundColor: thumbTintColor\n        }, mainStyles.thumb, orientation === 'vertical' ? mainStyles.thumbVertical(trackStyle && trackStyle.width) : mainStyles.thumbHorizontal(trackStyle && trackStyle.height), thumbStyle, (0, _extends2.default)({\n          transform: [].concat((0, _toConsumableArray2.default)(this.getThumbPositionStyles(thumbStart)), (0, _toConsumableArray2.default)(thumbStyleTransform))\n        }, valueVisibleStyle)]),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 9\n        }\n      }), _react.default.createElement(_reactNative.View, (0, _extends2.default)({\n        style: _reactNative.StyleSheet.flatten([styles.touchArea, touchOverflowStyle])\n      }, this.panResponder.panHandlers, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 9\n        }\n      }), debugTouchArea === true && this.renderDebugThumbTouchRect(thumbStart)));\n    }\n  }]);\n  return Slider;\n}(_react.Component);\nexports.Slider = Slider;\nSlider.propTypes = {\n  value: _propTypes.default.number,\n  disabled: _propTypes.default.bool,\n  minimumValue: _propTypes.default.number,\n  maximumValue: _propTypes.default.number,\n  step: _propTypes.default.number,\n  minimumTrackTintColor: _propTypes.default.string,\n  maximumTrackTintColor: _propTypes.default.string,\n  thumbTintColor: _propTypes.default.string,\n  thumbTouchSize: _propTypes.default.shape({\n    width: _propTypes.default.number,\n    height: _propTypes.default.number\n  }),\n  onValueChange: _propTypes.default.func,\n  onSlidingStart: _propTypes.default.func,\n  onSlidingComplete: _propTypes.default.func,\n  style: _config.ViewPropTypes.style,\n  trackStyle: _config.ViewPropTypes.style,\n  thumbStyle: _config.ViewPropTypes.style,\n  debugTouchArea: _propTypes.default.bool,\n  animateTransitions: _propTypes.default.bool,\n  animationType: _propTypes.default.oneOf(['spring', 'timing']),\n  orientation: _propTypes.default.oneOf(['horizontal', 'vertical']),\n  animationConfig: _propTypes.default.object,\n  containerStyle: _config.ViewPropTypes.style\n};\nSlider.defaultProps = {\n  value: 0,\n  minimumValue: 0,\n  maximumValue: 1,\n  step: 0,\n  minimumTrackTintColor: '#3f3f3f',\n  maximumTrackTintColor: '#b3b3b3',\n  thumbTintColor: 'red',\n  thumbTouchSize: {\n    width: 40,\n    height: 40\n  },\n  debugTouchArea: false,\n  animationType: 'timing',\n  orientation: 'horizontal'\n};\nvar styles = _reactNative.StyleSheet.create({\n  containerHorizontal: {\n    height: 40,\n    justifyContent: 'center'\n  },\n  containerVertical: {\n    width: 40,\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  track: {\n    borderRadius: TRACK_SIZE / 2\n  },\n  trackHorizontal: {\n    height: TRACK_SIZE\n  },\n  trackVertical: {\n    flex: 1,\n    width: TRACK_SIZE\n  },\n  thumb: {\n    position: 'absolute',\n    width: THUMB_SIZE,\n    height: THUMB_SIZE,\n    borderRadius: THUMB_SIZE / 2\n  },\n  thumbHorizontal: function thumbHorizontal(height) {\n    return {\n      top: 22 + (height ? (height - 4) / 2 : 0)\n    };\n  },\n  thumbVertical: function thumbVertical(width) {\n    return {\n      left: 22 + (width ? (width - 4) / 2 : 0)\n    };\n  },\n  touchArea: {\n    position: 'absolute',\n    backgroundColor: 'transparent',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  },\n  debugThumbTouchArea: {\n    position: 'absolute',\n    backgroundColor: 'green',\n    opacity: 0.5\n  }\n});\nvar _default = (0, _config.withTheme)(Slider, 'Slider');\nexports.default = _default;","map":{"version":3,"names":["_react","_interopRequireWildcard","require","_propTypes","_interopRequireDefault","_reactNative","_config","_excluded","_jsxFileName","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","constructor","Reflect","construct","arguments","apply","_possibleConstructorReturn2","sham","Proxy","Boolean","valueOf","e","TRACK_SIZE","THUMB_SIZE","DEFAULT_ANIMATION_CONFIGS","spring","friction","tension","timing","duration","easing","Easing","inOut","ease","delay","getBoundedValue","_ref","value","maximumValue","minimumValue","Rect","x","y","width","height","_classCallCheck2","_createClass2","containsPoint","Slider","_Component","_inherits2","_super","props","_this","measureContainer","handleMeasure","measureTrack","measureThumb","state","containerSize","trackSize","thumbSize","allMeasured","Animated","Value","panResponder","PanResponder","create","onStartShouldSetPanResponder","handleStartShouldSetPanResponder","bind","_assertThisInitialized2","onMoveShouldSetPanResponder","handleMoveShouldSetPanResponder","onPanResponderGrant","handlePanResponderGrant","onPanResponderMove","handlePanResponderMove","onPanResponderRelease","handlePanResponderEnd","onPanResponderTerminationRequest","handlePanResponderRequestEnd","onPanResponderTerminate","componentDidUpdate","prevProps","newValue","animateTransitions","setCurrentValueAnimated","setCurrentValue","setValue","animationType","animationConfig","_extends2","toValue","start","_previousLeft","getThumbLeft","getCurrentValue","fireChangeEvent","_","gestureState","disabled","getValue","thumbHitTest","_ref2","nativeEvent","thumbTouchRect","getThumbTouchRect","locationX","locationY","event","getTouchOverflowSize","_this$state","thumbTouchSize","size","Math","max","getTouchOverflowStyle","_this$getTouchOverflo","touchOverflowStyle","undefined","verticalMargin","marginTop","marginBottom","horizontalMargin","marginLeft","marginRight","debugTouchArea","backgroundColor","opacity","name","_x$nativeEvent$layout","layout","layoutWidth","layoutHeight","orientation","storeName","currentSize","_containerSize","_trackSize","_thumbSize","setState","length","thumbLeft","dy","dx","ratio","step","min","round","__getValue","getRatio","_this$state2","touchOverflowSize","renderDebugThumbTouchRect","positionStyle","left","top","createElement","View","style","pointerEvents","__self","__source","fileName","lineNumber","columnNumber","getMinimumTrackStyles","thumbStart","_this$state3","minimumTrackStyle","position","add","getThumbPositionStyles","translateX","translateY","render","_this$props","minimumTrackTintColor","maximumTrackTintColor","thumbTintColor","containerStyle","trackStyle","thumbStyle","other","_objectWithoutProperties2","_this$state4","mainStyles","styles","interpolate","inputRange","outputRange","valueVisibleStyle","thumbStyleTransform","transform","StyleSheet","flatten","containerVertical","containerHorizontal","onLayout","track","trackVertical","trackHorizontal","testID","thumb","thumbVertical","thumbHorizontal","concat","_toConsumableArray2","touchArea","panHandlers","Component","exports","propTypes","PropTypes","number","bool","string","shape","onValueChange","func","onSlidingStart","onSlidingComplete","ViewPropTypes","oneOf","object","defaultProps","justifyContent","flexDirection","alignItems","borderRadius","flex","right","bottom","debugThumbTouchArea","_default","withTheme"],"sources":["/home/ahmed/Music/softtag/Source Code/src/components/slider/Slider.js"],"sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {View, StyleSheet, Animated, Easing, PanResponder} from 'react-native';\n\nimport {ViewPropTypes, withTheme} from '../config';\n\nconst TRACK_SIZE = 4;\nconst THUMB_SIZE = 20;\n\nconst DEFAULT_ANIMATION_CONFIGS = {\n  spring: {\n    friction: 7,\n    tension: 100,\n  },\n  timing: {\n    duration: 150,\n    easing: Easing.inOut(Easing.ease),\n    delay: 0,\n  },\n};\n\nconst getBoundedValue = ({value, maximumValue, minimumValue}) =>\n  value > maximumValue\n    ? maximumValue\n    : value < minimumValue\n    ? minimumValue\n    : value;\n\nclass Rect {\n  constructor(x, y, width, height) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  containsPoint(x, y) {\n    return (\n      x >= this.x &&\n      y >= this.y &&\n      x <= this.x + this.width &&\n      y <= this.y + this.height\n    );\n  }\n}\n\nclass Slider extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      containerSize: {width: 0, height: 0},\n      trackSize: {width: 0, height: 0},\n      thumbSize: {width: 0, height: 0},\n      allMeasured: false,\n      value: new Animated.Value(getBoundedValue(props)),\n    };\n\n    this.panResponder = PanResponder.create({\n      onStartShouldSetPanResponder:\n        this.handleStartShouldSetPanResponder.bind(this),\n      onMoveShouldSetPanResponder:\n        this.handleMoveShouldSetPanResponder.bind(this),\n      onPanResponderGrant: this.handlePanResponderGrant.bind(this),\n      onPanResponderMove: this.handlePanResponderMove.bind(this),\n      onPanResponderRelease: this.handlePanResponderEnd.bind(this),\n      onPanResponderTerminationRequest:\n        this.handlePanResponderRequestEnd.bind(this),\n      onPanResponderTerminate: this.handlePanResponderEnd.bind(this),\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const newValue = getBoundedValue(this.props);\n\n    if (prevProps.value !== newValue) {\n      if (this.props.animateTransitions) {\n        this.setCurrentValueAnimated(newValue);\n      } else {\n        this.setCurrentValue(newValue);\n      }\n    }\n  }\n\n  setCurrentValue(value) {\n    this.state.value.setValue(value);\n  }\n\n  setCurrentValueAnimated(value) {\n    const {animationType} = this.props;\n    const animationConfig = Object.assign(\n      {},\n      DEFAULT_ANIMATION_CONFIGS[animationType],\n      this.props.animationConfig,\n      {\n        toValue: value,\n      },\n    );\n\n    Animated[animationType](this.state.value, animationConfig).start();\n  }\n\n  handleMoveShouldSetPanResponder(/* e: Object, gestureState: Object */) {\n    // Should we become active when the user moves a touch over the thumb?\n    return false;\n  }\n\n  handlePanResponderGrant(/* e: Object, gestureState: Object */) {\n    this._previousLeft = this.getThumbLeft(this.getCurrentValue());\n    this.fireChangeEvent('onSlidingStart');\n  }\n\n  handlePanResponderMove(_, gestureState) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    this.setCurrentValue(this.getValue(gestureState));\n    this.fireChangeEvent('onValueChange');\n  }\n\n  handlePanResponderRequestEnd() {\n    // Should we allow another component to take over this pan?\n    return false;\n  }\n\n  handlePanResponderEnd(_, gestureState) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    this.setCurrentValue(this.getValue(gestureState));\n    this.fireChangeEvent('onSlidingComplete');\n  }\n\n  thumbHitTest({nativeEvent}) {\n    const thumbTouchRect = this.getThumbTouchRect();\n    return thumbTouchRect.containsPoint(\n      nativeEvent.locationX,\n      nativeEvent.locationY,\n    );\n  }\n\n  handleStartShouldSetPanResponder(e /* gestureState: Object */) {\n    // Should we become active when the user presses down on the thumb?\n    return this.thumbHitTest(e);\n  }\n\n  fireChangeEvent(event) {\n    if (this.props[event]) {\n      this.props[event](this.getCurrentValue());\n    }\n  }\n\n  getTouchOverflowSize() {\n    const {thumbSize, allMeasured, containerSize} = this.state;\n    const {thumbTouchSize} = this.props;\n\n    const size = {};\n    if (allMeasured === true) {\n      size.width = Math.max(0, thumbTouchSize.width - thumbSize.width);\n      size.height = Math.max(0, thumbTouchSize.height - containerSize.height);\n    }\n\n    return size;\n  }\n\n  getTouchOverflowStyle() {\n    const {width, height} = this.getTouchOverflowSize();\n\n    const touchOverflowStyle = {};\n    if (width !== undefined && height !== undefined) {\n      const verticalMargin = -height / 2;\n      touchOverflowStyle.marginTop = verticalMargin;\n      touchOverflowStyle.marginBottom = verticalMargin;\n\n      const horizontalMargin = -width / 2;\n      touchOverflowStyle.marginLeft = horizontalMargin;\n      touchOverflowStyle.marginRight = horizontalMargin;\n    }\n\n    if (this.props.debugTouchArea === true) {\n      touchOverflowStyle.backgroundColor = 'orange';\n      touchOverflowStyle.opacity = 0.5;\n    }\n\n    return touchOverflowStyle;\n  }\n\n  handleMeasure(name, x) {\n    const {width: layoutWidth, height: layoutHeight} = x.nativeEvent.layout;\n    const width =\n      this.props.orientation === 'vertical' ? layoutHeight : layoutWidth;\n    const height =\n      this.props.orientation === 'vertical' ? layoutWidth : layoutHeight;\n    const size = {width, height};\n    const storeName = `_${name}`;\n    const currentSize = this[storeName];\n    if (\n      currentSize &&\n      width === currentSize.width &&\n      height === currentSize.height\n    ) {\n      return;\n    }\n    this[storeName] = size;\n\n    if (this._containerSize && this._trackSize && this._thumbSize) {\n      this.setState({\n        containerSize: this._containerSize,\n        trackSize: this._trackSize,\n        thumbSize: this._thumbSize,\n        allMeasured: true,\n      });\n    }\n  }\n\n  measureContainer = x => {\n    this.handleMeasure('containerSize', x);\n  };\n\n  measureTrack = x => {\n    this.handleMeasure('trackSize', x);\n  };\n\n  measureThumb = x => {\n    this.handleMeasure('thumbSize', x);\n  };\n\n  getValue(gestureState) {\n    const length = this.state.containerSize.width - this.state.thumbSize.width;\n    const thumbLeft =\n      this._previousLeft +\n      (this.props.orientation === 'vertical'\n        ? gestureState.dy\n        : gestureState.dx);\n\n    const ratio = thumbLeft / length;\n\n    if (this.props.step) {\n      return Math.max(\n        this.props.minimumValue,\n        Math.min(\n          this.props.maximumValue,\n          this.props.minimumValue +\n            Math.round(\n              (ratio * (this.props.maximumValue - this.props.minimumValue)) /\n                this.props.step,\n            ) *\n              this.props.step,\n        ),\n      );\n    }\n    return Math.max(\n      this.props.minimumValue,\n      Math.min(\n        this.props.maximumValue,\n        ratio * (this.props.maximumValue - this.props.minimumValue) +\n          this.props.minimumValue,\n      ),\n    );\n  }\n\n  getCurrentValue() {\n    return this.state.value.__getValue();\n  }\n\n  getRatio(value) {\n    return (\n      (value - this.props.minimumValue) /\n      (this.props.maximumValue - this.props.minimumValue)\n    );\n  }\n\n  getThumbLeft(value) {\n    const ratio = this.getRatio(value);\n    return (\n      ratio * (this.state.containerSize.width - this.state.thumbSize.width)\n    );\n  }\n\n  getThumbTouchRect() {\n    const {thumbSize, containerSize} = this.state;\n    const {thumbTouchSize} = this.props;\n    const touchOverflowSize = this.getTouchOverflowSize();\n\n    if (this.props.orientation === 'vertical') {\n      return new Rect(\n        touchOverflowSize.height / 2 +\n          (containerSize.height - thumbTouchSize.height) / 2,\n        touchOverflowSize.width / 2 +\n          this.getThumbLeft(this.getCurrentValue()) +\n          (thumbSize.width - thumbTouchSize.width) / 2,\n        thumbTouchSize.width,\n        thumbTouchSize.height,\n      );\n    }\n    return new Rect(\n      touchOverflowSize.width / 2 +\n        this.getThumbLeft(this.getCurrentValue()) +\n        (thumbSize.width - thumbTouchSize.width) / 2,\n      touchOverflowSize.height / 2 +\n        (containerSize.height - thumbTouchSize.height) / 2,\n      thumbTouchSize.width,\n      thumbTouchSize.height,\n    );\n  }\n\n  renderDebugThumbTouchRect(thumbLeft) {\n    const thumbTouchRect = this.getThumbTouchRect();\n    const positionStyle = {\n      left: thumbLeft,\n      top: thumbTouchRect.y,\n      width: thumbTouchRect.width,\n      height: thumbTouchRect.height,\n    };\n    return <Animated.View style={positionStyle} pointerEvents=\"none\" />;\n  }\n\n  getMinimumTrackStyles(thumbStart) {\n    const {thumbSize, trackSize} = this.state;\n    const minimumTrackStyle = {\n      position: 'absolute',\n    };\n\n    if (this.props.orientation === 'vertical') {\n      minimumTrackStyle.height = Animated.add(thumbStart, thumbSize.height / 2);\n      minimumTrackStyle.marginLeft = -trackSize.width;\n    } else {\n      minimumTrackStyle.width = Animated.add(thumbStart, thumbSize.width / 2);\n      minimumTrackStyle.marginTop = -trackSize.height;\n    }\n    return minimumTrackStyle;\n  }\n\n  getThumbPositionStyles(thumbStart) {\n    if (this.props.orientation === 'vertical') {\n      return [\n        {\n          translateX:\n            -(this.state.trackSize.height + this.state.thumbSize.height) / 2,\n        },\n        {translateY: thumbStart},\n      ];\n    }\n    return [\n      {translateX: thumbStart},\n      {\n        translateY:\n          -(this.state.trackSize.height + this.state.thumbSize.height) / 2,\n      },\n    ];\n  }\n\n  render() {\n    const {\n      minimumValue,\n      maximumValue,\n      minimumTrackTintColor,\n      maximumTrackTintColor,\n      thumbTintColor,\n      containerStyle,\n      style,\n      trackStyle,\n      thumbStyle,\n      debugTouchArea,\n      orientation,\n      ...other\n    } = this.props;\n\n    const {value, containerSize, thumbSize, allMeasured} = this.state;\n\n    const mainStyles = containerStyle || styles;\n    const thumbStart = value.interpolate({\n      inputRange: [minimumValue, maximumValue],\n      outputRange: [0, containerSize.width - thumbSize.width],\n      // extrapolate: 'clamp',\n    });\n\n    const valueVisibleStyle = {};\n    if (!allMeasured) {\n      valueVisibleStyle.height = 0;\n      valueVisibleStyle.width = 0;\n    }\n\n    const minimumTrackStyle = {\n      ...this.getMinimumTrackStyles(thumbStart),\n      backgroundColor: minimumTrackTintColor,\n      ...valueVisibleStyle,\n    };\n\n    const thumbStyleTransform = (thumbStyle && thumbStyle.transform) || [];\n    const touchOverflowStyle = this.getTouchOverflowStyle();\n    return (\n      <View\n        {...other}\n        style={StyleSheet.flatten([\n          orientation === 'vertical'\n            ? mainStyles.containerVertical\n            : mainStyles.containerHorizontal,\n          style,\n        ])}\n        onLayout={this.measureContainer}>\n        <View\n          style={StyleSheet.flatten([\n            mainStyles.track,\n            orientation === 'vertical'\n              ? mainStyles.trackVertical\n              : mainStyles.trackHorizontal,\n            trackStyle,\n            {backgroundColor: maximumTrackTintColor},\n          ])}\n          onLayout={this.measureTrack}\n        />\n        <Animated.View\n          style={StyleSheet.flatten([\n            mainStyles.track,\n            orientation === 'vertical'\n              ? mainStyles.trackVertical\n              : mainStyles.trackHorizontal,\n            trackStyle,\n            minimumTrackStyle,\n          ])}\n        />\n        <Animated.View\n          testID=\"sliderThumb\"\n          onLayout={this.measureThumb}\n          style={StyleSheet.flatten([\n            {backgroundColor: thumbTintColor},\n            mainStyles.thumb,\n            orientation === 'vertical'\n              ? mainStyles.thumbVertical(trackStyle && trackStyle.width)\n              : mainStyles.thumbHorizontal(trackStyle && trackStyle.height),\n            thumbStyle,\n            {\n              transform: [\n                ...this.getThumbPositionStyles(thumbStart),\n                ...thumbStyleTransform,\n              ],\n              ...valueVisibleStyle,\n            },\n          ])}\n        />\n        <View\n          style={StyleSheet.flatten([styles.touchArea, touchOverflowStyle])}\n          {...this.panResponder.panHandlers}>\n          {debugTouchArea === true &&\n            this.renderDebugThumbTouchRect(thumbStart)}\n        </View>\n      </View>\n    );\n  }\n}\n\nSlider.propTypes = {\n  /**\n   * Initial value of the slider. The value should be between minimumValue\n   * and maximumValue, which default to 0 and 1 respectively.\n   * Default value is 0.\n   *\n   * *This is not a controlled component*, e.g. if you don't update\n   * the value, the component won't be reset to its inital value.\n   */\n  value: PropTypes.number,\n\n  /**\n   * If true the user won't be able to move the slider.\n   * Default value is false.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Initial minimum value of the slider. Default value is 0.\n   */\n  minimumValue: PropTypes.number,\n\n  /**\n   * Initial maximum value of the slider. Default value is 1.\n   */\n  maximumValue: PropTypes.number,\n\n  /**\n   * Step value of the slider. The value should be between 0 and\n   * (maximumValue - minimumValue). Default value is 0.\n   */\n  step: PropTypes.number,\n\n  /**\n   * The color used for the track to the left of the button. Overrides the\n   * default blue gradient image.\n   */\n  minimumTrackTintColor: PropTypes.string,\n\n  /**\n   * The color used for the track to the right of the button. Overrides the\n   * default blue gradient image.\n   */\n  maximumTrackTintColor: PropTypes.string,\n\n  /**\n   * The color used for the thumb.\n   */\n  thumbTintColor: PropTypes.string,\n\n  /**\n   * The size of the touch area that allows moving the thumb.\n   * The touch area has the same center has the visible thumb.\n   * This allows to have a visually small thumb while still allowing the user\n   * to move it easily.\n   * The default is {width: 40, height: 40}.\n   */\n  thumbTouchSize: PropTypes.shape({\n    width: PropTypes.number,\n    height: PropTypes.number,\n  }),\n\n  /**\n   * Callback continuously called while the user is dragging the slider.\n   */\n  onValueChange: PropTypes.func,\n\n  /**\n   * Callback called when the user starts changing the value (e.g. when\n   * the slider is pressed).\n   */\n  onSlidingStart: PropTypes.func,\n\n  /**\n   * Callback called when the user finishes changing the value (e.g. when\n   * the slider is released).\n   */\n  onSlidingComplete: PropTypes.func,\n\n  /**\n   * The style applied to the slider container.\n   */\n  style: ViewPropTypes.style,\n\n  /**\n   * The style applied to the track.\n   */\n  trackStyle: ViewPropTypes.style,\n\n  /**\n   * The style applied to the thumb.\n   */\n  thumbStyle: ViewPropTypes.style,\n\n  /**\n   * Set this to true to visually see the thumb touch rect in green.\n   */\n  debugTouchArea: PropTypes.bool,\n\n  /**\n   * Set to true to animate values with default 'timing' animation type\n   */\n  animateTransitions: PropTypes.bool,\n\n  /**\n   * Custom Animation type. 'spring' or 'timing'.\n   */\n  animationType: PropTypes.oneOf(['spring', 'timing']),\n\n  /**\n   * Choose the orientation. 'horizontal' or 'vertical'.\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n\n  /**\n   * Used to configure the animation parameters.  These are the same parameters in the Animated library.\n   */\n  animationConfig: PropTypes.object,\n  containerStyle: ViewPropTypes.style,\n};\n\nSlider.defaultProps = {\n  value: 0,\n  minimumValue: 0,\n  maximumValue: 1,\n  step: 0,\n  minimumTrackTintColor: '#3f3f3f',\n  maximumTrackTintColor: '#b3b3b3',\n  thumbTintColor: 'red',\n  thumbTouchSize: {width: 40, height: 40},\n  debugTouchArea: false,\n  animationType: 'timing',\n  orientation: 'horizontal',\n};\n\nconst styles = StyleSheet.create({\n  containerHorizontal: {\n    height: 40,\n    justifyContent: 'center',\n  },\n  containerVertical: {\n    width: 40,\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  track: {\n    borderRadius: TRACK_SIZE / 2,\n  },\n  trackHorizontal: {\n    height: TRACK_SIZE,\n  },\n  trackVertical: {\n    flex: 1,\n    width: TRACK_SIZE,\n  },\n  thumb: {\n    position: 'absolute',\n    width: THUMB_SIZE,\n    height: THUMB_SIZE,\n    borderRadius: THUMB_SIZE / 2,\n  },\n  thumbHorizontal: height => ({\n    top: 22 + (height ? (height - 4) / 2 : 0),\n  }),\n  thumbVertical: width => ({\n    left: 22 + (width ? (width - 4) / 2 : 0),\n  }),\n  touchArea: {\n    position: 'absolute',\n    backgroundColor: 'transparent',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n  debugThumbTouchArea: {\n    position: 'absolute',\n    backgroundColor: 'green',\n    opacity: 0.5,\n  },\n});\n\nexport {Slider};\nexport default withTheme(Slider, 'Slider');\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}