{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _reactNative = require(\"react-native\");\nvar _NotificationReceivedEvent = _interopRequireDefault(require(\"./NotificationReceivedEvent\"));\nvar _helpers = require(\"./helpers\");\nvar _events = require(\"./events\");\nvar eventList = [_events.PERMISSION_CHANGED, _events.SUBSCRIPTION_CHANGED, _events.NOTIFICATION_WILL_SHOW, _events.NOTIFICATION_OPENED, _events.IN_APP_MESSAGE_CLICKED, _events.EMAIL_SUBSCRIPTION_CHANGED, _events.SMS_SUBSCRIPTION_CHANGED];\nvar EventManager = function () {\n  function EventManager(RNOneSignal) {\n    (0, _classCallCheck2.default)(this, EventManager);\n    this.RNOneSignal = RNOneSignal;\n    this.notificationCache = new Map();\n    this.oneSignalEventEmitter = new _reactNative.NativeEventEmitter(RNOneSignal);\n    this.eventHandlerMap = new Map();\n    this.eventHandlerArrayMap = new Map();\n    this.listeners = [];\n    this.setupListeners();\n  }\n  (0, _createClass2.default)(EventManager, [{\n    key: \"setupListeners\",\n    value: function setupListeners() {\n      if (this.RNOneSignal != null) {\n        for (var i = 0; i < eventList.length; i++) {\n          var eventName = eventList[i];\n          this.listeners[eventName] = this.generateEventListener(eventName);\n        }\n      }\n    }\n  }, {\n    key: \"clearHandlers\",\n    value: function clearHandlers() {\n      this.eventHandlerMap = new Map();\n      this.eventHandlerArrayMap = new Map();\n    }\n  }, {\n    key: \"setEventHandler\",\n    value: function setEventHandler(eventName, handler) {\n      this.eventHandlerMap.set(eventName, handler);\n    }\n  }, {\n    key: \"addEventHandler\",\n    value: function addEventHandler(eventName, handler) {\n      var handlerArray = this.eventHandlerArrayMap.get(eventName);\n      handlerArray && handlerArray.length > 0 ? handlerArray.push(handler) : this.eventHandlerArrayMap.set(eventName, [handler]);\n    }\n  }, {\n    key: \"generateEventListener\",\n    value: function generateEventListener(eventName) {\n      var _this = this;\n      var addListenerCallback = function addListenerCallback(payload) {\n        if ((0, _helpers.isMultipleInstancesPossible)(eventName)) {\n          var handlerArray = _this.eventHandlerArrayMap.get(eventName);\n          if (handlerArray) {\n            handlerArray.forEach(function (handler) {\n              handler(payload);\n            });\n          }\n        } else {\n          var handler = _this.eventHandlerMap.get(eventName);\n          payload = _this.getFinalPayload(eventName, payload);\n          if (handler) {\n            handler(payload);\n          }\n        }\n      };\n      return this.oneSignalEventEmitter.addListener(eventName, addListenerCallback);\n    }\n  }, {\n    key: \"getFinalPayload\",\n    value: function getFinalPayload(eventName, payload) {\n      switch (eventName) {\n        case _events.NOTIFICATION_WILL_SHOW:\n          return new _NotificationReceivedEvent.default(payload);\n        default:\n          return payload;\n      }\n    }\n  }]);\n  return EventManager;\n}();\nexports.default = EventManager;","map":{"version":3,"names":["_reactNative","require","_NotificationReceivedEvent","_interopRequireDefault","_helpers","_events","eventList","PERMISSION_CHANGED","SUBSCRIPTION_CHANGED","NOTIFICATION_WILL_SHOW","NOTIFICATION_OPENED","IN_APP_MESSAGE_CLICKED","EMAIL_SUBSCRIPTION_CHANGED","SMS_SUBSCRIPTION_CHANGED","EventManager","RNOneSignal","_classCallCheck2","default","notificationCache","Map","oneSignalEventEmitter","NativeEventEmitter","eventHandlerMap","eventHandlerArrayMap","listeners","setupListeners","_createClass2","key","value","i","length","eventName","generateEventListener","clearHandlers","setEventHandler","handler","set","addEventHandler","handlerArray","get","push","_this","addListenerCallback","payload","isMultipleInstancesPossible","forEach","getFinalPayload","addListener","NotificationReceivedEvent","exports"],"sources":["/home/ahmed/Music/softtag/Source Code/node_modules/react-native-onesignal/src/EventManager.js"],"sourcesContent":["import { NativeEventEmitter } from 'react-native';\nimport NotificationReceivedEvent from './NotificationReceivedEvent';\nimport { isMultipleInstancesPossible } from './helpers';\nimport {\n    PERMISSION_CHANGED,\n    SUBSCRIPTION_CHANGED,\n    NOTIFICATION_WILL_SHOW,\n    NOTIFICATION_OPENED,\n    IN_APP_MESSAGE_CLICKED,\n    EMAIL_SUBSCRIPTION_CHANGED,\n    SMS_SUBSCRIPTION_CHANGED\n} from './events';\n\nconst eventList = [\n    PERMISSION_CHANGED,\n    SUBSCRIPTION_CHANGED,\n    NOTIFICATION_WILL_SHOW,\n    NOTIFICATION_OPENED,\n    IN_APP_MESSAGE_CLICKED,\n    EMAIL_SUBSCRIPTION_CHANGED,\n    SMS_SUBSCRIPTION_CHANGED\n]\n\nexport default class EventManager {\n    constructor(RNOneSignal) {\n        this.RNOneSignal = RNOneSignal;\n        this.notificationCache = new Map();\n        this.oneSignalEventEmitter = new NativeEventEmitter(RNOneSignal);\n        this.eventHandlerMap = new Map();       // used for setters (single replacable callback)\n        this.eventHandlerArrayMap = new Map();  // used for adders (multiple callbacks possible)\n        this.listeners = [];\n        this.setupListeners();\n    }\n\n    setupListeners() {\n        // set up the event emitter and listeners\n        if (this.RNOneSignal != null) {\n\n            for(let i = 0; i < eventList.length; i++) {\n                let eventName = eventList[i];\n                this.listeners[eventName] = this.generateEventListener(eventName);\n            }\n        }\n    }\n\n    // clear handlers\n    clearHandlers() {\n        this.eventHandlerMap = new Map();\n        this.eventHandlerArrayMap = new Map();\n    }\n\n    /**\n     * Sets the event handler on the JS side of the bridge\n     * Supports only one handler at a time\n     * @param  {string} eventName\n     * @param  {function} handler\n     */\n    setEventHandler(eventName, handler) {\n        this.eventHandlerMap.set(eventName, handler);\n    }\n\n    /**\n     * Adds the event handler to the corresponding handler array on the JS side of the bridge\n     * @param  {string} eventName\n     * @param  {function} handler\n     */\n    addEventHandler(eventName, handler) {\n        let handlerArray = this.eventHandlerArrayMap.get(eventName);\n        handlerArray && handlerArray.length > 0 ? handlerArray.push(handler) : this.eventHandlerArrayMap.set(eventName, [handler]);\n    }\n\n    // returns an event listener with the js to native mapping\n    generateEventListener(eventName) {\n        const addListenerCallback = (payload) => {\n            if (isMultipleInstancesPossible(eventName)) {\n                // used for adders\n                let handlerArray = this.eventHandlerArrayMap.get(eventName);\n                if (handlerArray) {\n                    handlerArray.forEach(handler => {\n                        handler(payload);\n                    });\n                }\n            } else {\n                // used for setters\n                let handler = this.eventHandlerMap.get(eventName);\n                payload = this.getFinalPayload(eventName, payload);\n\n                // Check if we have added listener for this type yet\n                if (handler) {\n                    handler(payload);\n                }\n            }\n        };\n\n        return this.oneSignalEventEmitter.addListener(eventName, addListenerCallback);\n    }\n\n    getFinalPayload(eventName, payload) {\n        switch(eventName) {\n            case NOTIFICATION_WILL_SHOW:\n                return new NotificationReceivedEvent(payload);\n            default:\n                return payload;\n        }\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}