{"ast":null,"code":"var _ExceptionsManager = require(\"./ExceptionsManager\");\nfunction showErrorDialog(capturedError) {\n  var componentStack = capturedError.componentStack,\n    error = capturedError.error;\n  var errorToHandle;\n  if (error instanceof Error) {\n    errorToHandle = error;\n  } else if (typeof error === 'string') {\n    errorToHandle = new _ExceptionsManager.SyntheticError(error);\n  } else {\n    errorToHandle = new _ExceptionsManager.SyntheticError('Unspecified error');\n  }\n  try {\n    errorToHandle.componentStack = componentStack;\n    errorToHandle.isComponentError = true;\n  } catch (e) {}\n  (0, _ExceptionsManager.handleException)(errorToHandle, false);\n  return false;\n}\nmodule.exports = {\n  showErrorDialog: showErrorDialog\n};","map":{"version":3,"names":["_ExceptionsManager","require","showErrorDialog","capturedError","componentStack","error","errorToHandle","Error","SyntheticError","isComponentError","e","handleException","module","exports"],"sources":["/home/ahmed/Music/softtag/Source Code/node_modules/react-native/Libraries/Core/ReactFiberErrorDialog.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nexport type CapturedError = {\n  +componentStack: string,\n  +error: mixed,\n  +errorBoundary: ?{...},\n  ...\n};\n\nimport type {ExtendedError} from './Devtools/parseErrorStack';\n\nimport {handleException, SyntheticError} from './ExceptionsManager';\n\n/**\n * Intercept lifecycle errors and ensure they are shown with the correct stack\n * trace within the native redbox component.\n */\nfunction showErrorDialog(capturedError: CapturedError): boolean {\n  const {componentStack, error} = capturedError;\n\n  let errorToHandle;\n\n  // Typically Errors are thrown but eg strings or null can be thrown as well.\n  if (error instanceof Error) {\n    errorToHandle = (error: ExtendedError);\n  } else if (typeof error === 'string') {\n    errorToHandle = (new SyntheticError(error): ExtendedError);\n  } else {\n    errorToHandle = (new SyntheticError('Unspecified error'): ExtendedError);\n  }\n  try {\n    errorToHandle.componentStack = componentStack;\n    errorToHandle.isComponentError = true;\n  } catch (e) {}\n  handleException(errorToHandle, false);\n\n  // Return false here to prevent ReactFiberErrorLogger default behavior of\n  // logging error details to console.error. Calls to console.error are\n  // automatically routed to the native redbox controller, which we've already\n  // done above by calling ExceptionsManager.\n  return false;\n}\n\nmodule.exports = {showErrorDialog};\n"],"mappings":"AAmBA,IAAAA,kBAAA,GAAAC,OAAA;AAMA,SAASC,eAAeA,CAACC,aAA4B,EAAW;EAC9D,IAAOC,cAAc,GAAWD,aAAa,CAAtCC,cAAc;IAAEC,KAAK,GAAIF,aAAa,CAAtBE,KAAK;EAE5B,IAAIC,aAAa;EAGjB,IAAID,KAAK,YAAYE,KAAK,EAAE;IAC1BD,aAAa,GAAID,KAAqB;EACxC,CAAC,MAAM,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IACpCC,aAAa,GAAI,IAAIE,iCAAc,CAACH,KAAK,CAAiB;EAC5D,CAAC,MAAM;IACLC,aAAa,GAAI,IAAIE,iCAAc,CAAC,mBAAmB,CAAiB;EAC1E;EACA,IAAI;IACFF,aAAa,CAACF,cAAc,GAAGA,cAAc;IAC7CE,aAAa,CAACG,gBAAgB,GAAG,IAAI;EACvC,CAAC,CAAC,OAAOC,CAAC,EAAE,CAAC;EACb,IAAAC,kCAAe,EAACL,aAAa,EAAE,KAAK,CAAC;EAMrC,OAAO,KAAK;AACd;AAEAM,MAAM,CAACC,OAAO,GAAG;EAACX,eAAe,EAAfA;AAAe,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}