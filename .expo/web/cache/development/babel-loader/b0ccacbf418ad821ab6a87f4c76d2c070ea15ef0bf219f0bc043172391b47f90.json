{"ast":null,"code":"'use strict';\n\nvar _extends = require(\"@babel/runtime/helpers/extends\");\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar FormData = function () {\n  function FormData() {\n    _classCallCheck(this, FormData);\n    this._parts = [];\n  }\n  _createClass(FormData, [{\n    key: \"append\",\n    value: function append(key, value) {\n      this._parts.push([key, value]);\n    }\n  }, {\n    key: \"getParts\",\n    value: function getParts() {\n      return this._parts.map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          name = _ref2[0],\n          value = _ref2[1];\n        var contentDisposition = 'form-data; name=\"' + name + '\"';\n        var headers = {\n          'content-disposition': contentDisposition\n        };\n        if (typeof value === 'object' && value) {\n          if (typeof value.name === 'string') {\n            headers['content-disposition'] += '; filename=\"' + value.name + '\"';\n          }\n          if (typeof value.type === 'string') {\n            headers['content-type'] = value.type;\n          }\n          return _extends({}, value, {\n            headers: headers,\n            fieldName: name\n          });\n        }\n        return {\n          string: String(value),\n          headers: headers,\n          fieldName: name\n        };\n      });\n    }\n  }]);\n  return FormData;\n}();\nmodule.exports = FormData;","map":{"version":3,"names":["_extends","require","_slicedToArray","_classCallCheck","_createClass","FormData","_parts","key","value","append","push","getParts","map","_ref","_ref2","name","contentDisposition","headers","type","fieldName","string","String","module","exports"],"sources":["/home/ahmed/Music/softtag/Source Code/node_modules/react-native/Libraries/Network/FormData.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\ntype FormDataValue = string | {name?: string, type?: string, uri: string};\ntype FormDataNameValuePair = [string, FormDataValue];\n\ntype Headers = {[name: string]: string, ...};\ntype FormDataPart =\n  | {\n      string: string,\n      headers: Headers,\n      ...\n    }\n  | {\n      uri: string,\n      headers: Headers,\n      name?: string,\n      type?: string,\n      ...\n    };\n\n/**\n * Polyfill for XMLHttpRequest2 FormData API, allowing multipart POST requests\n * with mixed data (string, native files) to be submitted via XMLHttpRequest.\n *\n * Example:\n *\n *   var photo = {\n *     uri: uriFromCameraRoll,\n *     type: 'image/jpeg',\n *     name: 'photo.jpg',\n *   };\n *\n *   var body = new FormData();\n *   body.append('authToken', 'secret');\n *   body.append('photo', photo);\n *   body.append('title', 'A beautiful photo!');\n *\n *   xhr.open('POST', serverURL);\n *   xhr.send(body);\n */\nclass FormData {\n  _parts: Array<FormDataNameValuePair>;\n\n  constructor() {\n    this._parts = [];\n  }\n\n  append(key: string, value: FormDataValue) {\n    // The XMLHttpRequest spec doesn't specify if duplicate keys are allowed.\n    // MDN says that any new values should be appended to existing values.\n    // In any case, major browsers allow duplicate keys, so that's what we'll do\n    // too. They'll simply get appended as additional form data parts in the\n    // request body, leaving the server to deal with them.\n    this._parts.push([key, value]);\n  }\n\n  getParts(): Array<FormDataPart> {\n    return this._parts.map(([name, value]) => {\n      const contentDisposition = 'form-data; name=\"' + name + '\"';\n\n      const headers: Headers = {'content-disposition': contentDisposition};\n\n      // The body part is a \"blob\", which in React Native just means\n      // an object with a `uri` attribute. Optionally, it can also\n      // have a `name` and `type` attribute to specify filename and\n      // content type (cf. web Blob interface.)\n      if (typeof value === 'object' && value) {\n        if (typeof value.name === 'string') {\n          headers['content-disposition'] += '; filename=\"' + value.name + '\"';\n        }\n        if (typeof value.type === 'string') {\n          headers['content-type'] = value.type;\n        }\n        return {...value, headers, fieldName: name};\n      }\n      // Convert non-object values to strings as per FormData.append() spec\n      return {string: String(value), headers, fieldName: name};\n    });\n  }\n}\n\nmodule.exports = FormData;\n"],"mappings":"AAUA,YAAY;;AAAC,IAAAA,QAAA,GAAAC,OAAA;AAAA,IAAAC,cAAA,GAAAD,OAAA;AAAA,IAAAE,eAAA,GAAAF,OAAA;AAAA,IAAAG,YAAA,GAAAH,OAAA;AAAA,IAwCPI,QAAQ;EAGZ,SAAAA,SAAA,EAAc;IAAAF,eAAA,OAAAE,QAAA;IACZ,IAAI,CAACC,MAAM,GAAG,EAAE;EAClB;EAACF,YAAA,CAAAC,QAAA;IAAAE,GAAA;IAAAC,KAAA,EAED,SAAAC,OAAOF,GAAW,EAAEC,KAAoB,EAAE;MAMxC,IAAI,CAACF,MAAM,CAACI,IAAI,CAAC,CAACH,GAAG,EAAEC,KAAK,CAAC,CAAC;IAChC;EAAC;IAAAD,GAAA;IAAAC,KAAA,EAED,SAAAG,SAAA,EAAgC;MAC9B,OAAO,IAAI,CAACL,MAAM,CAACM,GAAG,CAAC,UAAAC,IAAA,EAAmB;QAAA,IAAAC,KAAA,GAAAZ,cAAA,CAAAW,IAAA;UAAjBE,IAAI,GAAAD,KAAA;UAAEN,KAAK,GAAAM,KAAA;QAClC,IAAME,kBAAkB,GAAG,mBAAmB,GAAGD,IAAI,GAAG,GAAG;QAE3D,IAAME,OAAgB,GAAG;UAAC,qBAAqB,EAAED;QAAkB,CAAC;QAMpE,IAAI,OAAOR,KAAK,KAAK,QAAQ,IAAIA,KAAK,EAAE;UACtC,IAAI,OAAOA,KAAK,CAACO,IAAI,KAAK,QAAQ,EAAE;YAClCE,OAAO,CAAC,qBAAqB,CAAC,IAAI,cAAc,GAAGT,KAAK,CAACO,IAAI,GAAG,GAAG;UACrE;UACA,IAAI,OAAOP,KAAK,CAACU,IAAI,KAAK,QAAQ,EAAE;YAClCD,OAAO,CAAC,cAAc,CAAC,GAAGT,KAAK,CAACU,IAAI;UACtC;UACA,OAAAlB,QAAA,KAAWQ,KAAK;YAAES,OAAO,EAAPA,OAAO;YAAEE,SAAS,EAAEJ;UAAI;QAC5C;QAEA,OAAO;UAACK,MAAM,EAAEC,MAAM,CAACb,KAAK,CAAC;UAAES,OAAO,EAAPA,OAAO;UAAEE,SAAS,EAAEJ;QAAI,CAAC;MAC1D,CAAC,CAAC;IACJ;EAAC;EAAA,OAAAV,QAAA;AAAA;AAGHiB,MAAM,CAACC,OAAO,GAAGlB,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}