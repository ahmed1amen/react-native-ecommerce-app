{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _useCode = _interopRequireDefault(require(\"../derived/useCode\"));\nvar _AnimatedNode = _interopRequireDefault(require(\"./AnimatedNode\"));\nfunction assertNodesNotNull(code, children, exec) {\n  if (!code) {\n    var error = !children ? \"Got \\\"\".concat(typeof children, \"\\\" type passed to children\") : \"Got \\\"\".concat(typeof exec, \"\\\" type passed to exec\");\n    throw new Error(\"<Animated.Code /> expects the 'exec' prop or children to be an animated node or a function returning an animated node. \".concat(error));\n  }\n}\nfunction Code(_ref) {\n  var exec = _ref.exec,\n    children = _ref.children,\n    dependencies = _ref.dependencies;\n  var nodes = children || exec;\n  var code = null;\n  if (nodes instanceof _AnimatedNode.default) {\n    code = function code() {\n      return nodes;\n    };\n  } else if (typeof nodes === 'function') {\n    code = nodes;\n  }\n  assertNodesNotNull(code, children, exec);\n  (0, _useCode.default)(code, dependencies);\n  return null;\n}\nvar _default = Code;\nexports.default = _default;","map":{"version":3,"names":["_useCode","_interopRequireDefault","require","_AnimatedNode","assertNodesNotNull","code","children","exec","error","concat","Error","Code","_ref","dependencies","nodes","AnimatedNode","useCode","_default","exports","default"],"sources":["/home/ahmed/Music/softtag/Source Code/node_modules/react-native-reanimated/lib/module/core/AnimatedCode.js"],"sourcesContent":["import useCode from '../derived/useCode';\nimport AnimatedNode from './AnimatedNode';\n\nfunction assertNodesNotNull(code, children, exec) {\n  if (!code) {\n    const error = !children\n      ? `Got \"${typeof children}\" type passed to children`\n      : `Got \"${typeof exec}\" type passed to exec`;\n\n    throw new Error(\n      `<Animated.Code /> expects the 'exec' prop or children to be an animated node or a function returning an animated node. ${error}`\n    );\n  }\n}\n\nfunction Code({ exec, children, dependencies }) {\n  const nodes = children || exec;\n\n  let code = null;\n  if (nodes instanceof AnimatedNode) {\n    code = () => nodes;\n  } else if (typeof nodes === 'function') {\n    code = nodes;\n  }\n\n  assertNodesNotNull(code, children, exec);\n\n  useCode(code, dependencies);\n  return null;\n}\n\nexport default Code;\n"],"mappings":";;;;;AAAA,IAAAA,QAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,aAAA,GAAAF,sBAAA,CAAAC,OAAA;AAEA,SAASE,kBAATA,CAA4BC,IAA5B,EAAkCC,QAAlC,EAA4CC,IAA5C,EAAkD;EAChD,IAAI,CAACF,IAAL,EAAW;IACT,IAAMG,KAAK,GAAG,CAACF,QAAD,YAAAG,MAAA,CACF,OAAOH,QADL,2CAAAG,MAAA,CAEF,OAAOF,IAFL,2BAAd;IAIA,MAAM,IAAIG,KAAJ,2HAAAD,MAAA,CACsHD,KADtH,EAAN;EAGD;AACF;AAED,SAASG,IAATA,CAAAC,IAAA,EAAgD;EAAA,IAAhCL,IAAF,GAAAK,IAAA,CAAEL,IAAF;IAAQD,QAAR,GAAAM,IAAA,CAAQN,QAAR;IAAkBO,YAAA,GAAAD,IAAA,CAAAC,YAAA;EAC9B,IAAMC,KAAK,GAAGR,QAAQ,IAAIC,IAA1B;EAEA,IAAIF,IAAI,GAAG,IAAX;EACA,IAAIS,KAAK,YAAYC,qBAArB,EAAmC;IACjCV,IAAI,GAAG,SAAAA,KAAA;MAAA,OAAMS,KAAb;IAAA;EACD,CAFD,MAEO,IAAI,OAAOA,KAAP,KAAiB,UAArB,EAAiC;IACtCT,IAAI,GAAGS,KAAP;EACD;EAEDV,kBAAkB,CAACC,IAAD,EAAOC,QAAP,EAAiBC,IAAjB,CAAlB;EAEA,IAAAS,gBAAO,EAACX,IAAD,EAAOQ,YAAP,CAAP;EACA,OAAO,IAAP;AACD;AAAA,IAAAI,QAAA,GAEcN,IAAf;AAAAO,OAAA,CAAAC,OAAA,GAAAF,QAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}