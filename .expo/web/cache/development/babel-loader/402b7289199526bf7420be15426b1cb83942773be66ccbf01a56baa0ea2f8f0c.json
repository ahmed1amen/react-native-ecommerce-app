{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar InternetReachability = function InternetReachability(configuration, listener) {\n  var _this = this;\n  (0, _classCallCheck2.default)(this, InternetReachability);\n  this._isInternetReachable = undefined;\n  this._currentInternetReachabilityCheckHandler = null;\n  this._currentTimeoutHandle = null;\n  this._setIsInternetReachable = function (isInternetReachable) {\n    if (_this._isInternetReachable === isInternetReachable) {\n      return;\n    }\n    _this._isInternetReachable = isInternetReachable;\n    _this._listener(_this._isInternetReachable);\n  };\n  this._setExpectsConnection = function (expectsConnection) {\n    if (_this._currentInternetReachabilityCheckHandler !== null) {\n      _this._currentInternetReachabilityCheckHandler.cancel();\n      _this._currentInternetReachabilityCheckHandler = null;\n    }\n    if (_this._currentTimeoutHandle !== null) {\n      clearTimeout(_this._currentTimeoutHandle);\n      _this._currentTimeoutHandle = null;\n    }\n    if (expectsConnection) {\n      if (!_this._isInternetReachable) {\n        _this._setIsInternetReachable(null);\n      }\n      _this._currentInternetReachabilityCheckHandler = _this._checkInternetReachability();\n    } else {\n      _this._setIsInternetReachable(false);\n    }\n  };\n  this._checkInternetReachability = function () {\n    var responsePromise = fetch(_this._configuration.reachabilityUrl, {\n      method: 'HEAD',\n      cache: 'no-cache'\n    });\n    var timeoutHandle;\n    var timeoutPromise = new Promise(function (_, reject) {\n      timeoutHandle = setTimeout(function () {\n        return reject('timedout');\n      }, _this._configuration.reachabilityRequestTimeout);\n    });\n    var cancel = function cancel() {};\n    var cancelPromise = new Promise(function (_, reject) {\n      cancel = function cancel() {\n        return reject('canceled');\n      };\n    });\n    var promise = Promise.race([responsePromise, timeoutPromise, cancelPromise]).then(function (response) {\n      return _this._configuration.reachabilityTest(response);\n    }).then(function (result) {\n      _this._setIsInternetReachable(result);\n      var nextTimeoutInterval = _this._isInternetReachable ? _this._configuration.reachabilityLongTimeout : _this._configuration.reachabilityShortTimeout;\n      _this._currentTimeoutHandle = setTimeout(_this._checkInternetReachability, nextTimeoutInterval);\n    }).catch(function (error) {\n      if (error !== 'canceled') {\n        _this._setIsInternetReachable(false);\n        _this._currentTimeoutHandle = setTimeout(_this._checkInternetReachability, _this._configuration.reachabilityShortTimeout);\n      }\n    }).then(function () {\n      clearTimeout(timeoutHandle);\n    }, function (error) {\n      clearTimeout(timeoutHandle);\n      throw error;\n    });\n    return {\n      promise: promise,\n      cancel: cancel\n    };\n  };\n  this.update = function (state) {\n    if (typeof state.isInternetReachable === 'boolean') {\n      _this._setIsInternetReachable(state.isInternetReachable);\n    } else {\n      _this._setExpectsConnection(state.isConnected);\n    }\n  };\n  this.currentState = function () {\n    return _this._isInternetReachable;\n  };\n  this.tearDown = function () {\n    if (_this._currentInternetReachabilityCheckHandler !== null) {\n      _this._currentInternetReachabilityCheckHandler.cancel();\n      _this._currentInternetReachabilityCheckHandler = null;\n    }\n    if (_this._currentTimeoutHandle !== null) {\n      clearTimeout(_this._currentTimeoutHandle);\n      _this._currentTimeoutHandle = null;\n    }\n  };\n  this._configuration = configuration;\n  this._listener = listener;\n};\nexports.default = InternetReachability;","map":{"version":3,"names":["InternetReachability","configuration","listener","_this","_classCallCheck","_isInternetReachable","undefined","_currentInternetReachabilityCheckHandler","_currentTimeoutHandle","_setIsInternetReachable","isInternetReachable","_listener","_setExpectsConnection","expectsConnection","cancel","clearTimeout","_checkInternetReachability","responsePromise","fetch","_configuration","reachabilityUrl","method","cache","timeoutHandle","timeoutPromise","Promise","_","reject","setTimeout","reachabilityRequestTimeout","cancelPromise","promise","race","then","response","reachabilityTest","result","nextTimeoutInterval","reachabilityLongTimeout","reachabilityShortTimeout","catch","error","update","state","isConnected","currentState","tearDown"],"sources":["/home/ahmed/Music/softtag/Source Code/node_modules/@react-native-community/netinfo/lib/module/internal/internetReachability.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport * as Types from './types';\nimport * as PrivateTypes from './privateTypes';\n\ninterface InternetReachabilityCheckHandler {\n  promise: Promise<void>;\n  cancel: () => void;\n}\n\nexport default class InternetReachability {\n  private _configuration: Types.NetInfoConfiguration;\n  private _listener: PrivateTypes.NetInfoInternetReachabilityChangeListener;\n  private _isInternetReachable: boolean | null | undefined = undefined;\n  private _currentInternetReachabilityCheckHandler: InternetReachabilityCheckHandler | null = null;\n  private _currentTimeoutHandle: ReturnType<typeof setTimeout> | null = null;\n\n  constructor(\n    configuration: Types.NetInfoConfiguration,\n    listener: PrivateTypes.NetInfoInternetReachabilityChangeListener,\n  ) {\n    this._configuration = configuration;\n    this._listener = listener;\n  }\n\n  private _setIsInternetReachable = (\n    isInternetReachable: boolean | null | undefined,\n  ): void => {\n    if (this._isInternetReachable === isInternetReachable) {\n      return;\n    }\n\n    this._isInternetReachable = isInternetReachable;\n    this._listener(this._isInternetReachable);\n  };\n\n  private _setExpectsConnection = (expectsConnection: boolean): void => {\n    // Cancel any pending check\n    if (this._currentInternetReachabilityCheckHandler !== null) {\n      this._currentInternetReachabilityCheckHandler.cancel();\n      this._currentInternetReachabilityCheckHandler = null;\n    }\n    // Cancel any pending timeout\n    if (this._currentTimeoutHandle !== null) {\n      clearTimeout(this._currentTimeoutHandle);\n      this._currentTimeoutHandle = null;\n    }\n\n    if (expectsConnection) {\n      // If we expect a connection, start the process for finding if we have one\n      // Set the state to \"null\" if it was previously false\n      if (!this._isInternetReachable) {\n        this._setIsInternetReachable(null);\n      }\n      // Start a network request to check for internet\n      this._currentInternetReachabilityCheckHandler = this._checkInternetReachability();\n    } else {\n      // If we don't expect a connection, just change the state to \"false\"\n      this._setIsInternetReachable(false);\n    }\n  };\n\n  private _checkInternetReachability = (): InternetReachabilityCheckHandler => {\n    const responsePromise = fetch(this._configuration.reachabilityUrl, {\n      method: 'HEAD',\n      cache: 'no-cache',\n    });\n\n    // Create promise that will reject after the request timeout has been reached\n    let timeoutHandle: ReturnType<typeof setTimeout>;\n    const timeoutPromise = new Promise<Response>(\n      (_, reject): void => {\n        timeoutHandle = setTimeout(\n          (): void => reject('timedout'),\n          this._configuration.reachabilityRequestTimeout,\n        );\n      },\n    );\n\n    // Create promise that makes it possible to cancel a pending request through a reject\n    let cancel: () => void = (): void => {};\n    const cancelPromise = new Promise<Response>(\n      (_, reject): void => {\n        cancel = (): void => reject('canceled');\n      },\n    );\n\n    const promise = Promise.race([\n      responsePromise,\n      timeoutPromise,\n      cancelPromise,\n    ])\n      .then(\n        (response): Promise<boolean> => {\n          return this._configuration.reachabilityTest(response);\n        },\n      )\n      .then(\n        (result): void => {\n          this._setIsInternetReachable(result);\n          const nextTimeoutInterval = this._isInternetReachable\n            ? this._configuration.reachabilityLongTimeout\n            : this._configuration.reachabilityShortTimeout;\n          this._currentTimeoutHandle = setTimeout(\n            this._checkInternetReachability,\n            nextTimeoutInterval,\n          );\n        },\n      )\n      .catch(\n        (error: Error | 'timedout' | 'canceled'): void => {\n          if (error !== 'canceled') {\n            this._setIsInternetReachable(false);\n            this._currentTimeoutHandle = setTimeout(\n              this._checkInternetReachability,\n              this._configuration.reachabilityShortTimeout,\n            );\n          }\n        },\n      )\n      // Clear request timeout and propagate any errors\n      .then(\n        (): void => {\n          clearTimeout(timeoutHandle);\n        },\n        (error: Error): void => {\n          clearTimeout(timeoutHandle);\n          throw error;\n        },\n      );\n\n    return {\n      promise,\n      cancel,\n    };\n  };\n\n  public update = (state: PrivateTypes.NetInfoNativeModuleState): void => {\n    if (typeof state.isInternetReachable === 'boolean') {\n      this._setIsInternetReachable(state.isInternetReachable);\n    } else {\n      this._setExpectsConnection(state.isConnected);\n    }\n  };\n\n  public currentState = (): boolean | null | undefined => {\n    return this._isInternetReachable;\n  };\n\n  public tearDown = (): void => {\n    // Cancel any pending check\n    if (this._currentInternetReachabilityCheckHandler !== null) {\n      this._currentInternetReachabilityCheckHandler.cancel();\n      this._currentInternetReachabilityCheckHandler = null;\n    }\n\n    // Cancel any pending timeout\n    if (this._currentTimeoutHandle !== null) {\n      clearTimeout(this._currentTimeoutHandle);\n      this._currentTimeoutHandle = null;\n    }\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}