{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getStateFromPath;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _extends4 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _escapeStringRegexp = _interopRequireDefault(require(\"escape-string-regexp\"));\nvar queryString = _interopRequireWildcard(require(\"query-string\"));\nvar _checkLegacyPathConfig = _interopRequireDefault(require(\"./checkLegacyPathConfig\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction getStateFromPath(path, options) {\n  var _ref;\n  var _checkLegacyPathConfi = (0, _checkLegacyPathConfig.default)(options),\n    _checkLegacyPathConfi2 = (0, _slicedToArray2.default)(_checkLegacyPathConfi, 2),\n    legacy = _checkLegacyPathConfi2[0],\n    compatOptions = _checkLegacyPathConfi2[1];\n  var initialRoutes = [];\n  if (compatOptions !== null && compatOptions !== void 0 && compatOptions.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: compatOptions.initialRouteName,\n      parentScreens: []\n    });\n  }\n  var screens = compatOptions === null || compatOptions === void 0 ? void 0 : compatOptions.screens;\n  var remaining = path.replace(/\\/+/g, '/').replace(/^\\//, '').replace(/\\?.*$/, '');\n  remaining = remaining.endsWith('/') ? remaining : \"\".concat(remaining, \"/\");\n  if (screens === undefined) {\n    var routes = remaining.split('/').filter(Boolean).map(function (segment, i, self) {\n      var name = decodeURIComponent(segment);\n      if (i === self.length - 1) {\n        return {\n          name: name,\n          params: parseQueryParams(path)\n        };\n      }\n      return {\n        name: name\n      };\n    });\n    if (routes.length) {\n      return createNestedStateObject(routes, initialRoutes);\n    }\n    return undefined;\n  }\n  var configs = (_ref = []).concat.apply(_ref, (0, _toConsumableArray2.default)(Object.keys(screens).map(function (key) {\n    return createNormalizedConfigs(legacy, key, screens, [], initialRoutes, []);\n  }))).sort(function (a, b) {\n    if (a.pattern === b.pattern) {\n      return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n    }\n    if (a.pattern.startsWith(b.pattern)) {\n      return -1;\n    }\n    if (b.pattern.startsWith(a.pattern)) {\n      return 1;\n    }\n    var aParts = a.pattern.split('/');\n    var bParts = b.pattern.split('/');\n    var aWildcardIndex = aParts.indexOf('*');\n    var bWildcardIndex = bParts.indexOf('*');\n    if (aWildcardIndex === -1 && bWildcardIndex !== -1) {\n      return -1;\n    }\n    if (aWildcardIndex !== -1 && bWildcardIndex === -1) {\n      return 1;\n    }\n    if (aWildcardIndex === bWildcardIndex) {\n      return bParts.length - aParts.length;\n    }\n    return bWildcardIndex - aWildcardIndex;\n  });\n  configs.reduce(function (acc, config) {\n    if (acc[config.pattern]) {\n      var a = acc[config.pattern].routeNames;\n      var b = config.routeNames;\n      var intersects = a.length > b.length ? b.every(function (it, i) {\n        return a[i] === it;\n      }) : a.every(function (it, i) {\n        return b[i] === it;\n      });\n      if (!intersects) {\n        throw new Error(\"Found conflicting screens with the same pattern. The pattern '\".concat(config.pattern, \"' resolves to both '\").concat(a.join(' > '), \"' and '\").concat(b.join(' > '), \"'. Patterns must be unique and cannot resolve to more than one screen.\"));\n      }\n    }\n    return (0, _extends4.default)(acc, (0, _defineProperty2.default)({}, config.pattern, config));\n  }, {});\n  if (remaining === '/') {\n    var match = configs.find(function (config) {\n      return config.path === '' && config.routeNames.every(function (name) {\n        var _configs$find;\n        return !((_configs$find = configs.find(function (c) {\n          return c.screen === name;\n        })) !== null && _configs$find !== void 0 && _configs$find.path);\n      });\n    });\n    if (match) {\n      return createNestedStateObject(match.routeNames.map(function (name, i, self) {\n        if (i === self.length - 1) {\n          return {\n            name: name,\n            params: parseQueryParams(path, match.parse)\n          };\n        }\n        return {\n          name: name\n        };\n      }), initialRoutes);\n    }\n    return undefined;\n  }\n  var result;\n  var current;\n  if (legacy === false) {\n    var _matchAgainstConfigs = matchAgainstConfigs(remaining, configs.map(function (c) {\n        return (0, _extends4.default)({}, c, {\n          regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n        });\n      })),\n      _routes = _matchAgainstConfigs.routes,\n      remainingPath = _matchAgainstConfigs.remainingPath;\n    if (_routes !== undefined) {\n      current = createNestedStateObject(_routes, initialRoutes);\n      remaining = remainingPath;\n      result = current;\n    }\n  } else {\n    while (remaining) {\n      var _matchAgainstConfigs2 = matchAgainstConfigs(remaining, configs),\n        _routes2 = _matchAgainstConfigs2.routes,\n        _remainingPath = _matchAgainstConfigs2.remainingPath;\n      remaining = _remainingPath;\n      if (_routes2 === undefined) {\n        var segments = remaining.split('/');\n        _routes2 = [{\n          name: decodeURIComponent(segments[0])\n        }];\n        segments.shift();\n        remaining = segments.join('/');\n      }\n      var state = createNestedStateObject(_routes2, initialRoutes);\n      if (current) {\n        var _current2;\n        while ((_current = current) !== null && _current !== void 0 && _current.routes[current.index || 0].state) {\n          var _current;\n          current = current.routes[current.index || 0].state;\n        }\n        current.routes[((_current2 = current) === null || _current2 === void 0 ? void 0 : _current2.index) || 0].state = state;\n      } else {\n        result = state;\n      }\n      current = state;\n    }\n  }\n  if (current == null || result == null) {\n    return undefined;\n  }\n  var route = findFocusedRoute(current);\n  var params = parseQueryParams(path, findParseConfigForRoute(route.name, configs));\n  if (params) {\n    route.params = (0, _extends4.default)({}, route.params, params);\n  }\n  return result;\n}\nvar joinPaths = function joinPaths() {\n  var _ref2;\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n  return (_ref2 = []).concat.apply(_ref2, (0, _toConsumableArray2.default)(paths.map(function (p) {\n    return p.split('/');\n  }))).filter(Boolean).join('/');\n};\nvar matchAgainstConfigs = function matchAgainstConfigs(remaining, configs) {\n  var routes;\n  var remainingPath = remaining;\n  var _loop = function _loop() {\n    if (!config.regex) {\n      return \"continue\";\n    }\n    var match = remainingPath.match(config.regex);\n    if (match) {\n      var matchedParams = (_config$pattern = config.pattern) === null || _config$pattern === void 0 ? void 0 : _config$pattern.split('/').filter(function (p) {\n        return p.startsWith(':');\n      }).reduce(function (acc, p, i) {\n        return (0, _extends4.default)(acc, (0, _defineProperty2.default)({}, p, match[(i + 1) * 2].replace(/\\//, '')));\n      }, {});\n      routes = config.routeNames.map(function (name) {\n        var _config$path;\n        var config = configs.find(function (c) {\n          return c.screen === name;\n        });\n        var params = config === null || config === void 0 ? void 0 : (_config$path = config.path) === null || _config$path === void 0 ? void 0 : _config$path.split('/').filter(function (p) {\n          return p.startsWith(':');\n        }).reduce(function (acc, p) {\n          var value = matchedParams[p];\n          if (value) {\n            var _config$parse;\n            var key = p.replace(/^:/, '').replace(/\\?$/, '');\n            acc[key] = (_config$parse = config.parse) !== null && _config$parse !== void 0 && _config$parse[key] ? config.parse[key](value) : value;\n          }\n          return acc;\n        }, {});\n        if (params && Object.keys(params).length) {\n          return {\n            name: name,\n            params: params\n          };\n        }\n        return {\n          name: name\n        };\n      });\n      remainingPath = remainingPath.replace(match[1], '');\n      return \"break\";\n    }\n  };\n  for (var _iterator = _createForOfIteratorHelperLoose(configs), _step; !(_step = _iterator()).done;) {\n    var config = _step.value;\n    var _config$pattern;\n    var _ret = _loop();\n    if (_ret === \"continue\") continue;\n    if (_ret === \"break\") break;\n  }\n  return {\n    routes: routes,\n    remainingPath: remainingPath\n  };\n};\nvar createNormalizedConfigs = function createNormalizedConfigs(legacy, screen, routeConfig) {\n  var routeNames = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  var initials = arguments.length > 4 ? arguments[4] : undefined;\n  var parentScreens = arguments.length > 5 ? arguments[5] : undefined;\n  var parentPattern = arguments.length > 6 ? arguments[6] : undefined;\n  var configs = [];\n  routeNames.push(screen);\n  parentScreens.push(screen);\n  var config = routeConfig[screen];\n  if (typeof config === 'string') {\n    var pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n    configs.push(createConfigItem(legacy, screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    var _pattern2;\n    if (typeof config.path === 'string') {\n      if (legacy) {\n        _pattern2 = config.exact !== true && parentPattern ? joinPaths(parentPattern, config.path) : config.path;\n      } else {\n        if (config.exact && config.path === undefined) {\n          throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n        }\n        _pattern2 = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n      }\n      configs.push(createConfigItem(legacy, screen, routeNames, _pattern2, config.path, config.parse));\n    }\n    if (config.screens) {\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens: parentScreens\n        });\n      }\n      Object.keys(config.screens).forEach(function (nestedConfig) {\n        var _pattern;\n        var result = createNormalizedConfigs(legacy, nestedConfig, config.screens, routeNames, initials, (0, _toConsumableArray2.default)(parentScreens), (_pattern = _pattern2) !== null && _pattern !== void 0 ? _pattern : parentPattern);\n        configs.push.apply(configs, (0, _toConsumableArray2.default)(result));\n      });\n    }\n  }\n  routeNames.pop();\n  return configs;\n};\nvar createConfigItem = function createConfigItem(legacy, screen, routeNames, pattern, path, parse) {\n  pattern = pattern.split('/').filter(Boolean).join('/');\n  var regex = pattern ? new RegExp(\"^(\".concat(pattern.split('/').map(function (it) {\n    if (legacy && it === '*') {\n      throw new Error(\"Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/5.x/configuring-links/#updating-config\");\n    }\n    if (it.startsWith(':')) {\n      return \"(([^/]+\\\\/)\".concat(it.endsWith('?') ? '?' : '', \")\");\n    }\n    return \"\".concat(it === '*' ? '.*' : (0, _escapeStringRegexp.default)(it), \"\\\\/\");\n  }).join(''), \")\")) : undefined;\n  return {\n    screen: screen,\n    regex: regex,\n    pattern: pattern,\n    path: path,\n    routeNames: (0, _toConsumableArray2.default)(routeNames),\n    parse: parse\n  };\n};\nvar findParseConfigForRoute = function findParseConfigForRoute(routeName, flatConfig) {\n  for (var _iterator2 = _createForOfIteratorHelperLoose(flatConfig), _step2; !(_step2 = _iterator2()).done;) {\n    var config = _step2.value;\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n  return undefined;\n};\nvar findInitialRoute = function findInitialRoute(routeName, parentScreens, initialRoutes) {\n  for (var _iterator3 = _createForOfIteratorHelperLoose(initialRoutes), _step3; !(_step3 = _iterator3()).done;) {\n    var config = _step3.value;\n    if (parentScreens.length === config.parentScreens.length) {\n      var sameParents = true;\n      for (var i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n      }\n    }\n  }\n  return undefined;\n};\nvar createStateObject = function createStateObject(initialRoute, route, isEmpty) {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, route]\n      };\n    } else {\n      return {\n        routes: [route]\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, (0, _extends4.default)({}, route, {\n          state: {\n            routes: []\n          }\n        })]\n      };\n    } else {\n      return {\n        routes: [(0, _extends4.default)({}, route, {\n          state: {\n            routes: []\n          }\n        })]\n      };\n    }\n  }\n};\nvar createNestedStateObject = function createNestedStateObject(routes, initialRoutes) {\n  var state;\n  var route = routes.shift();\n  var parentScreens = [];\n  var initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n  parentScreens.push(route.name);\n  state = createStateObject(initialRoute, route, routes.length === 0);\n  if (routes.length > 0) {\n    var nestedState = state;\n    while (route = routes.shift()) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n      var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n      nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex].state;\n      }\n      parentScreens.push(route.name);\n    }\n  }\n  return state;\n};\nvar findFocusedRoute = function findFocusedRoute(state) {\n  var _current4;\n  var current = state;\n  while ((_current3 = current) !== null && _current3 !== void 0 && _current3.routes[current.index || 0].state) {\n    var _current3;\n    current = current.routes[current.index || 0].state;\n  }\n  var route = current.routes[((_current4 = current) === null || _current4 === void 0 ? void 0 : _current4.index) || 0];\n  return route;\n};\nvar parseQueryParams = function parseQueryParams(path, parseConfig) {\n  var query = path.split('?')[1];\n  var params = queryString.parse(query);\n  if (parseConfig) {\n    Object.keys(params).forEach(function (name) {\n      if (parseConfig[name] && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name]);\n      }\n    });\n  }\n  return Object.keys(params).length ? params : undefined;\n};","map":{"version":3,"names":["_escapeStringRegexp","_interopRequireDefault","require","queryString","_interopRequireWildcard","_checkLegacyPathConfig","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_createForOfIteratorHelperLoose","o","allowArrayLike","it","Symbol","iterator","next","bind","Array","isArray","_unsupportedIterableToArray","length","i","done","value","TypeError","minLen","_arrayLikeToArray","n","toString","slice","constructor","name","from","test","arr","len","arr2","getStateFromPath","path","options","_ref","_checkLegacyPathConfi","checkLegacyPathConfig","_checkLegacyPathConfi2","_slicedToArray2","legacy","compatOptions","initialRoutes","initialRouteName","push","parentScreens","screens","remaining","replace","endsWith","concat","undefined","routes","split","filter","Boolean","map","segment","self","decodeURIComponent","params","parseQueryParams","createNestedStateObject","configs","apply","_toConsumableArray2","keys","createNormalizedConfigs","sort","a","b","pattern","routeNames","join","localeCompare","startsWith","aParts","bParts","aWildcardIndex","indexOf","bWildcardIndex","reduce","acc","config","intersects","every","Error","_extends4","_defineProperty2","match","find","_configs$find","c","screen","parse","result","current","_matchAgainstConfigs","matchAgainstConfigs","regex","RegExp","source","remainingPath","_matchAgainstConfigs2","segments","shift","state","_current2","_current","index","route","findFocusedRoute","findParseConfigForRoute","joinPaths","_ref2","_len","arguments","paths","_key","p","_loop","matchedParams","_config$pattern","_config$path","_config$parse","_iterator","_step","_ret","routeConfig","initials","parentPattern","createConfigItem","exact","forEach","nestedConfig","_pattern","pop","escape","routeName","flatConfig","_iterator2","_step2","findInitialRoute","_iterator3","_step3","sameParents","createStateObject","initialRoute","isEmpty","nestedState","nestedStateIndex","_current4","_current3","parseConfig","query"],"sources":["/home/ahmed/Music/softtag/Source Code/node_modules/@react-navigation/core/lib/module/getStateFromPath.tsx"],"sourcesContent":["import escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\nimport type {\n  NavigationState,\n  PartialState,\n  InitialState,\n} from '@react-navigation/routers';\nimport checkLegacyPathConfig from './checkLegacyPathConfig';\nimport type { PathConfigMap } from './types';\n\ntype Options = {\n  initialRouteName?: string;\n  screens: PathConfigMap;\n};\n\ntype ParseConfig = Record<string, (value: string) => any>;\n\ntype RouteConfig = {\n  screen: string;\n  regex?: RegExp;\n  path: string;\n  pattern: string;\n  routeNames: string[];\n  parse?: ParseConfig;\n};\n\ntype InitialRouteConfig = {\n  initialRouteName: string;\n  parentScreens: string[];\n};\n\ntype ResultState = PartialState<NavigationState> & {\n  state?: ResultState;\n};\n\ntype ParsedRoute = {\n  name: string;\n  params?: Record<string, any> | undefined;\n};\n\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport default function getStateFromPath(\n  path: string,\n  options?: Options\n): ResultState | undefined {\n  const [legacy, compatOptions] = checkLegacyPathConfig(options);\n\n  let initialRoutes: InitialRouteConfig[] = [];\n\n  if (compatOptions?.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: compatOptions.initialRouteName,\n      parentScreens: [],\n    });\n  }\n\n  const screens = compatOptions?.screens;\n\n  let remaining = path\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining\n      .split('/')\n      .filter(Boolean)\n      .map((segment, i, self) => {\n        const name = decodeURIComponent(segment);\n\n        if (i === self.length - 1) {\n          return { name, params: parseQueryParams(path) };\n        }\n\n        return { name };\n      });\n\n    if (routes.length) {\n      return createNestedStateObject(routes, initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  // Create a normalized configs array which will be easier to use\n  const configs = ([] as RouteConfig[])\n    .concat(\n      ...Object.keys(screens).map((key) =>\n        createNormalizedConfigs(\n          legacy,\n          key,\n          screens as PathConfigMap,\n          [],\n          initialRoutes,\n          []\n        )\n      )\n    )\n    .sort((a, b) => {\n      // Sort config so that:\n      // - the most exhaustive ones are always at the beginning\n      // - patterns with wildcard are always at the end\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if (a.pattern === b.pattern) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if (a.pattern.startsWith(b.pattern)) {\n        return -1;\n      }\n\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n\n      const aParts = a.pattern.split('/');\n      const bParts = b.pattern.split('/');\n\n      const aWildcardIndex = aParts.indexOf('*');\n      const bWildcardIndex = bParts.indexOf('*');\n\n      // If only one of the patterns has a wildcard, move it down in the list\n      if (aWildcardIndex === -1 && bWildcardIndex !== -1) {\n        return -1;\n      }\n\n      if (aWildcardIndex !== -1 && bWildcardIndex === -1) {\n        return 1;\n      }\n\n      if (aWildcardIndex === bWildcardIndex) {\n        // If `b` has more `/`, it's more exhaustive\n        // So we move it up in the list\n        return bParts.length - aParts.length;\n      }\n\n      // If the wildcard appears later in the pattern (has higher index), it's more specific\n      // So we move it up in the list\n      return bWildcardIndex - aWildcardIndex;\n    });\n\n  // Check for duplicate patterns in the config\n  configs.reduce<Record<string, RouteConfig>>((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects =\n        a.length > b.length\n          ? b.every((it, i) => a[i] === it)\n          : a.every((it, i) => b[i] === it);\n\n      if (!intersects) {\n        throw new Error(\n          `Found conflicting screens with the same pattern. The pattern '${\n            config.pattern\n          }' resolves to both '${a.join(' > ')}' and '${b.join(\n            ' > '\n          )}'. Patterns must be unique and cannot resolve to more than one screen.`\n        );\n      }\n    }\n\n    return Object.assign(acc, {\n      [config.pattern]: config,\n    });\n  }, {});\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(\n      (config) =>\n        config.path === '' &&\n        config.routeNames.every(\n          // Make sure that none of the parent configs have a non-empty path defined\n          (name) => !configs.find((c) => c.screen === name)?.path\n        )\n    );\n\n    if (match) {\n      return createNestedStateObject(\n        match.routeNames.map((name, i, self) => {\n          if (i === self.length - 1) {\n            return { name, params: parseQueryParams(path, match.parse) };\n          }\n\n          return { name };\n        }),\n        initialRoutes\n      );\n    }\n\n    return undefined;\n  }\n\n  let result: PartialState<NavigationState> | undefined;\n  let current: PartialState<NavigationState> | undefined;\n\n  if (legacy === false) {\n    // If we're not in legacy mode,, we match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    const { routes, remainingPath } = matchAgainstConfigs(\n      remaining,\n      configs.map((c) => ({\n        ...c,\n        // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n        regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n      }))\n    );\n\n    if (routes !== undefined) {\n      // This will always be empty if full path matched\n      current = createNestedStateObject(routes, initialRoutes);\n      remaining = remainingPath;\n      result = current;\n    }\n  } else {\n    // In legacy mode, we divide the path into segments and match piece by piece\n    // This preserves the legacy behaviour, but we should remove it in next major\n    while (remaining) {\n      let { routes, remainingPath } = matchAgainstConfigs(remaining, configs);\n\n      remaining = remainingPath;\n\n      // If we hadn't matched any segments earlier, use the path as route name\n      if (routes === undefined) {\n        const segments = remaining.split('/');\n\n        routes = [{ name: decodeURIComponent(segments[0]) }];\n        segments.shift();\n        remaining = segments.join('/');\n      }\n\n      const state = createNestedStateObject(routes, initialRoutes);\n\n      if (current) {\n        // The state should be nested inside the deepest route we parsed before\n        while (current?.routes[current.index || 0].state) {\n          current = current.routes[current.index || 0].state;\n        }\n\n        (current as PartialState<NavigationState>).routes[\n          current?.index || 0\n        ].state = state;\n      } else {\n        result = state;\n      }\n\n      current = state;\n    }\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  const route = findFocusedRoute(current);\n  const params = parseQueryParams(\n    path,\n    findParseConfigForRoute(route.name, configs)\n  );\n\n  if (params) {\n    // @ts-expect-error: params should be treated as read-only, but we're creating the state here so it doesn't matter\n    route.params = { ...route.params, ...params };\n  }\n\n  return result;\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst matchAgainstConfigs = (remaining: string, configs: RouteConfig[]) => {\n  let routes: ParsedRoute[] | undefined;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      const matchedParams = config.pattern\n        ?.split('/')\n        .filter((p) => p.startsWith(':'))\n        .reduce<Record<string, any>>(\n          (acc, p, i) =>\n            Object.assign(acc, {\n              // The param segments appear every second item starting from 2 in the regex match result\n              [p]: match![(i + 1) * 2].replace(/\\//, ''),\n            }),\n          {}\n        );\n\n      routes = config.routeNames.map((name) => {\n        const config = configs.find((c) => c.screen === name);\n        const params = config?.path\n          ?.split('/')\n          .filter((p) => p.startsWith(':'))\n          .reduce<Record<string, any>>((acc, p) => {\n            const value = matchedParams[p];\n\n            if (value) {\n              const key = p.replace(/^:/, '').replace(/\\?$/, '');\n              acc[key] = config.parse?.[key] ? config.parse[key](value) : value;\n            }\n\n            return acc;\n          }, {});\n\n        if (params && Object.keys(params).length) {\n          return { name, params };\n        }\n\n        return { name };\n      });\n\n      remainingPath = remainingPath.replace(match[1], '');\n\n      break;\n    }\n  }\n\n  return { routes, remainingPath };\n};\n\nconst createNormalizedConfigs = (\n  legacy: boolean,\n  screen: string,\n  routeConfig: PathConfigMap,\n  routeNames: string[] = [],\n  initials: InitialRouteConfig[],\n  parentScreens: string[],\n  parentPattern?: string\n): RouteConfig[] => {\n  const configs: RouteConfig[] = [];\n\n  routeNames.push(screen);\n\n  parentScreens.push(screen);\n\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    configs.push(createConfigItem(legacy, screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern: string | undefined;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (legacy) {\n        pattern =\n          config.exact !== true && parentPattern\n            ? joinPaths(parentPattern, config.path)\n            : config.path;\n      } else {\n        if (config.exact && config.path === undefined) {\n          throw new Error(\n            \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n          );\n        }\n\n        pattern =\n          config.exact !== true\n            ? joinPaths(parentPattern || '', config.path || '')\n            : config.path || '';\n      }\n\n      configs.push(\n        createConfigItem(\n          legacy,\n          screen,\n          routeNames,\n          pattern,\n          config.path,\n          config.parse\n        )\n      );\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens,\n        });\n      }\n\n      Object.keys(config.screens).forEach((nestedConfig) => {\n        const result = createNormalizedConfigs(\n          legacy,\n          nestedConfig,\n          config.screens as PathConfigMap,\n          routeNames,\n          initials,\n          [...parentScreens],\n          pattern ?? parentPattern\n        );\n\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n\n  return configs;\n};\n\nconst createConfigItem = (\n  legacy: boolean,\n  screen: string,\n  routeNames: string[],\n  pattern: string,\n  path: string,\n  parse?: ParseConfig\n): RouteConfig => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n\n  const regex = pattern\n    ? new RegExp(\n        `^(${pattern\n          .split('/')\n          .map((it) => {\n            if (legacy && it === '*') {\n              throw new Error(\n                \"Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/5.x/configuring-links/#updating-config\"\n              );\n            }\n\n            if (it.startsWith(':')) {\n              return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n            }\n\n            return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n          })\n          .join('')})`\n      )\n    : undefined;\n\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse,\n  };\n};\n\nconst findParseConfigForRoute = (\n  routeName: string,\n  flatConfig: RouteConfig[]\n): ParseConfig | undefined => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (\n  routeName: string,\n  parentScreens: string[],\n  initialRoutes: InitialRouteConfig[]\n): string | undefined => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName\n          ? config.initialRouteName\n          : undefined;\n      }\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (\n  initialRoute: string | undefined,\n  route: ParsedRoute,\n  isEmpty: boolean\n): InitialState => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, route],\n      };\n    } else {\n      return {\n        routes: [route],\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, { ...route, state: { routes: [] } }],\n      };\n    } else {\n      return {\n        routes: [{ ...route, state: { routes: [] } }],\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (\n  routes: ParsedRoute[],\n  initialRoutes: InitialRouteConfig[]\n) => {\n  let state: InitialState;\n  let route = routes.shift() as ParsedRoute;\n  const parentScreens: string[] = [];\n\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n  parentScreens.push(route.name);\n\n  state = createStateObject(initialRoute, route, routes.length === 0);\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while ((route = routes.shift() as ParsedRoute)) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n      const nestedStateIndex =\n        nestedState.index || nestedState.routes.length - 1;\n\n      nestedState.routes[nestedStateIndex].state = createStateObject(\n        initialRoute,\n        route,\n        routes.length === 0\n      );\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex]\n          .state as InitialState;\n      }\n\n      parentScreens.push(route.name);\n    }\n  }\n\n  return state;\n};\n\nconst findFocusedRoute = (state: InitialState) => {\n  let current: InitialState | undefined = state;\n\n  while (current?.routes[current.index || 0].state) {\n    // The query params apply to the deepest route\n    current = current.routes[current.index || 0].state;\n  }\n\n  const route = (current as PartialState<NavigationState>).routes[\n    current?.index || 0\n  ];\n\n  return route;\n};\n\nconst parseQueryParams = (\n  path: string,\n  parseConfig?: Record<string, (value: string) => any>\n) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach((name) => {\n      if (parseConfig[name] && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name] as string);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}