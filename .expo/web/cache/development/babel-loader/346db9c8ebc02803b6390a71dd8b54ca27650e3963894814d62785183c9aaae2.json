{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _reactNative = require(\"react-native\");\nvar _excluded = [\"onDismiss\"];\nvar RNFileViewer = _reactNative.NativeModules.RNFileViewer;\nvar eventEmitter = new _reactNative.NativeEventEmitter(RNFileViewer);\nvar lastId = 0;\nfunction open(path) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options = typeof options === \"string\" ? {\n    displayName: options\n  } : options;\n  var onDismiss = _options.onDismiss,\n    nativeOptions = (0, _objectWithoutProperties2.default)(_options, _excluded);\n  if (![\"android\", \"ios\"].includes(_reactNative.Platform.OS)) {\n    return RNFileViewer.open(path, nativeOptions);\n  }\n  return new Promise(function (resolve, reject) {\n    var currentId = ++lastId;\n    var openSubscription = eventEmitter.addListener(\"RNFileViewerDidOpen\", function (_ref) {\n      var id = _ref.id,\n        error = _ref.error;\n      if (id === currentId) {\n        openSubscription.remove();\n        return error ? reject(new Error(error)) : resolve();\n      }\n    });\n    var dismissSubscription = eventEmitter.addListener(\"RNFileViewerDidDismiss\", function (_ref2) {\n      var id = _ref2.id;\n      if (id === currentId) {\n        dismissSubscription.remove();\n        onDismiss && onDismiss();\n      }\n    });\n    RNFileViewer.open(normalize(path), currentId, nativeOptions);\n  });\n}\nfunction normalize(path) {\n  if (_reactNative.Platform.OS === \"ios\" || _reactNative.Platform.OS === \"android\") {\n    var filePrefix = \"file://\";\n    if (path.startsWith(filePrefix)) {\n      path = path.substring(filePrefix.length);\n      try {\n        path = decodeURI(path);\n      } catch (e) {}\n    }\n  }\n  return path;\n}\nvar _default = {\n  open: open\n};\nexports.default = _default;","map":{"version":3,"names":["_reactNative","require","_excluded","RNFileViewer","NativeModules","eventEmitter","NativeEventEmitter","lastId","open","path","options","arguments","length","undefined","_options","displayName","onDismiss","nativeOptions","_objectWithoutProperties2","default","includes","Platform","OS","Promise","resolve","reject","currentId","openSubscription","addListener","_ref","id","error","remove","Error","dismissSubscription","_ref2","normalize","filePrefix","startsWith","substring","decodeURI","e","_default","exports"],"sources":["/home/ahmed/Music/softtag/Source Code/node_modules/react-native-file-viewer/index.js"],"sourcesContent":["import { NativeEventEmitter, NativeModules, Platform } from \"react-native\";\n\nconst { RNFileViewer } = NativeModules;\nconst eventEmitter = new NativeEventEmitter(RNFileViewer);\n\nlet lastId = 0;\n\nfunction open(path, options = {}) {\n  const _options =\n    typeof options === \"string\" ? { displayName: options } : options;\n  const { onDismiss, ...nativeOptions } = _options;\n\n  if (![\"android\", \"ios\"].includes(Platform.OS)) {\n    return RNFileViewer.open(path, nativeOptions);\n  }\n\n  return new Promise((resolve, reject) => {\n    const currentId = ++lastId;\n\n    const openSubscription = eventEmitter.addListener(\n      \"RNFileViewerDidOpen\",\n      ({ id, error }) => {\n        if (id === currentId) {\n          openSubscription.remove();\n          return error ? reject(new Error(error)) : resolve();\n        }\n      }\n    );\n    const dismissSubscription = eventEmitter.addListener(\n      \"RNFileViewerDidDismiss\",\n      ({ id }) => {\n        if (id === currentId) {\n          dismissSubscription.remove();\n          onDismiss && onDismiss();\n        }\n      }\n    );\n\n    RNFileViewer.open(normalize(path), currentId, nativeOptions);\n  });\n}\n\nfunction normalize(path) {\n  if (Platform.OS === \"ios\" || Platform.OS === \"android\") {\n    const filePrefix = \"file://\";\n    if (path.startsWith(filePrefix)) {\n      path = path.substring(filePrefix.length);\n      try {\n        path = decodeURI(path);\n      } catch (e) {}\n    }\n  }\n  return path;\n}\n\nexport default { open };\n"],"mappings":";;;;;;AAAA,IAAAA,YAAA,GAAAC,OAAA;AAA2E,IAAAC,SAAA;AAE3E,IAAQC,YAAY,GAAKC,0BAAa,CAA9BD,YAAY;AACpB,IAAME,YAAY,GAAG,IAAIC,+BAAkB,CAACH,YAAY,CAAC;AAEzD,IAAII,MAAM,GAAG,CAAC;AAEd,SAASC,IAAIA,CAACC,IAAI,EAAgB;EAAA,IAAdC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAC9B,IAAMG,QAAQ,GACZ,OAAOJ,OAAO,KAAK,QAAQ,GAAG;IAAEK,WAAW,EAAEL;EAAQ,CAAC,GAAGA,OAAO;EAClE,IAAQM,SAAS,GAAuBF,QAAQ,CAAxCE,SAAS;IAAKC,aAAa,OAAAC,yBAAA,CAAAC,OAAA,EAAKL,QAAQ,EAAAZ,SAAA;EAEhD,IAAI,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAACkB,QAAQ,CAACC,qBAAQ,CAACC,EAAE,CAAC,EAAE;IAC7C,OAAOnB,YAAY,CAACK,IAAI,CAACC,IAAI,EAAEQ,aAAa,CAAC;EAC/C;EAEA,OAAO,IAAIM,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;IACtC,IAAMC,SAAS,GAAG,EAAEnB,MAAM;IAE1B,IAAMoB,gBAAgB,GAAGtB,YAAY,CAACuB,WAAW,CAC/C,qBAAqB,EACrB,UAAAC,IAAA,EAAmB;MAAA,IAAhBC,EAAE,GAAAD,IAAA,CAAFC,EAAE;QAAEC,KAAK,GAAAF,IAAA,CAALE,KAAK;MACV,IAAID,EAAE,KAAKJ,SAAS,EAAE;QACpBC,gBAAgB,CAACK,MAAM,EAAE;QACzB,OAAOD,KAAK,GAAGN,MAAM,CAAC,IAAIQ,KAAK,CAACF,KAAK,CAAC,CAAC,GAAGP,OAAO,EAAE;MACrD;IACF,CAAC,CACF;IACD,IAAMU,mBAAmB,GAAG7B,YAAY,CAACuB,WAAW,CAClD,wBAAwB,EACxB,UAAAO,KAAA,EAAY;MAAA,IAATL,EAAE,GAAAK,KAAA,CAAFL,EAAE;MACH,IAAIA,EAAE,KAAKJ,SAAS,EAAE;QACpBQ,mBAAmB,CAACF,MAAM,EAAE;QAC5BhB,SAAS,IAAIA,SAAS,EAAE;MAC1B;IACF,CAAC,CACF;IAEDb,YAAY,CAACK,IAAI,CAAC4B,SAAS,CAAC3B,IAAI,CAAC,EAAEiB,SAAS,EAAET,aAAa,CAAC;EAC9D,CAAC,CAAC;AACJ;AAEA,SAASmB,SAASA,CAAC3B,IAAI,EAAE;EACvB,IAAIY,qBAAQ,CAACC,EAAE,KAAK,KAAK,IAAID,qBAAQ,CAACC,EAAE,KAAK,SAAS,EAAE;IACtD,IAAMe,UAAU,GAAG,SAAS;IAC5B,IAAI5B,IAAI,CAAC6B,UAAU,CAACD,UAAU,CAAC,EAAE;MAC/B5B,IAAI,GAAGA,IAAI,CAAC8B,SAAS,CAACF,UAAU,CAACzB,MAAM,CAAC;MACxC,IAAI;QACFH,IAAI,GAAG+B,SAAS,CAAC/B,IAAI,CAAC;MACxB,CAAC,CAAC,OAAOgC,CAAC,EAAE,CAAC;IACf;EACF;EACA,OAAOhC,IAAI;AACb;AAAC,IAAAiC,QAAA,GAEc;EAAElC,IAAI,EAAJA;AAAK,CAAC;AAAAmC,OAAA,CAAAxB,OAAA,GAAAuB,QAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}