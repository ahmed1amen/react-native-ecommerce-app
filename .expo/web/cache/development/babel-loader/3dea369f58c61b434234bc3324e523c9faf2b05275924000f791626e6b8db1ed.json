{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _Platform = _interopRequireDefault(require(\"../Utilities/Platform\"));\nvar _NativeDialogManagerAndroid = _interopRequireDefault(require(\"../NativeModules/specs/NativeDialogManagerAndroid\"));\nvar _RCTAlertManager = _interopRequireDefault(require(\"./RCTAlertManager\"));\nvar Alert = function () {\n  function Alert() {\n    (0, _classCallCheck2.default)(this, Alert);\n  }\n  (0, _createClass2.default)(Alert, null, [{\n    key: \"alert\",\n    value: function alert(title, message, buttons, options) {\n      if (_Platform.default.OS === 'ios') {\n        Alert.prompt(title, message, buttons, 'default');\n      } else if (_Platform.default.OS === 'android') {\n        if (!_NativeDialogManagerAndroid.default) {\n          return;\n        }\n        var constants = _NativeDialogManagerAndroid.default.getConstants();\n        var config = {\n          title: title || '',\n          message: message || '',\n          cancelable: false\n        };\n        if (options && options.cancelable) {\n          config.cancelable = options.cancelable;\n        }\n        var defaultPositiveText = 'OK';\n        var validButtons = buttons ? buttons.slice(0, 3) : [{\n          text: defaultPositiveText\n        }];\n        var buttonPositive = validButtons.pop();\n        var buttonNegative = validButtons.pop();\n        var buttonNeutral = validButtons.pop();\n        if (buttonNeutral) {\n          config.buttonNeutral = buttonNeutral.text || '';\n        }\n        if (buttonNegative) {\n          config.buttonNegative = buttonNegative.text || '';\n        }\n        if (buttonPositive) {\n          config.buttonPositive = buttonPositive.text || defaultPositiveText;\n        }\n        var onAction = function onAction(action, buttonKey) {\n          if (action === constants.buttonClicked) {\n            if (buttonKey === constants.buttonNeutral) {\n              buttonNeutral.onPress && buttonNeutral.onPress();\n            } else if (buttonKey === constants.buttonNegative) {\n              buttonNegative.onPress && buttonNegative.onPress();\n            } else if (buttonKey === constants.buttonPositive) {\n              buttonPositive.onPress && buttonPositive.onPress();\n            }\n          } else if (action === constants.dismissed) {\n            options && options.onDismiss && options.onDismiss();\n          }\n        };\n        var onError = function onError(errorMessage) {\n          return console.warn(errorMessage);\n        };\n        _NativeDialogManagerAndroid.default.showAlert(config, onError, onAction);\n      }\n    }\n  }, {\n    key: \"prompt\",\n    value: function prompt(title, message, callbackOrButtons) {\n      var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'plain-text';\n      var defaultValue = arguments.length > 4 ? arguments[4] : undefined;\n      var keyboardType = arguments.length > 5 ? arguments[5] : undefined;\n      if (_Platform.default.OS === 'ios') {\n        var callbacks = [];\n        var buttons = [];\n        var cancelButtonKey;\n        var destructiveButtonKey;\n        if (typeof callbackOrButtons === 'function') {\n          callbacks = [callbackOrButtons];\n        } else if (Array.isArray(callbackOrButtons)) {\n          callbackOrButtons.forEach(function (btn, index) {\n            callbacks[index] = btn.onPress;\n            if (btn.style === 'cancel') {\n              cancelButtonKey = String(index);\n            } else if (btn.style === 'destructive') {\n              destructiveButtonKey = String(index);\n            }\n            if (btn.text || index < (callbackOrButtons || []).length - 1) {\n              var btnDef = {};\n              btnDef[index] = btn.text || '';\n              buttons.push(btnDef);\n            }\n          });\n        }\n        _RCTAlertManager.default.alertWithArgs({\n          title: title || '',\n          message: message || undefined,\n          buttons: buttons,\n          type: type || undefined,\n          defaultValue: defaultValue,\n          cancelButtonKey: cancelButtonKey,\n          destructiveButtonKey: destructiveButtonKey,\n          keyboardType: keyboardType\n        }, function (id, value) {\n          var cb = callbacks[id];\n          cb && cb(value);\n        });\n      }\n    }\n  }]);\n  return Alert;\n}();\nmodule.exports = Alert;","map":{"version":3,"names":["_interopRequireDefault","require","_classCallCheck2","_createClass2","_Platform","_NativeDialogManagerAndroid","_RCTAlertManager","Alert","default","key","value","alert","title","message","buttons","options","Platform","OS","prompt","NativeDialogManagerAndroid","constants","getConstants","config","cancelable","defaultPositiveText","validButtons","slice","text","buttonPositive","pop","buttonNegative","buttonNeutral","onAction","action","buttonKey","buttonClicked","onPress","dismissed","onDismiss","onError","errorMessage","console","warn","showAlert","callbackOrButtons","type","arguments","length","undefined","defaultValue","keyboardType","callbacks","cancelButtonKey","destructiveButtonKey","Array","isArray","forEach","btn","index","style","String","btnDef","push","RCTAlertManager","alertWithArgs","id","cb","module","exports"],"sources":["/home/ahmed/Music/softtag/Source Code/node_modules/react-native/Libraries/Alert/Alert.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nimport Platform from '../Utilities/Platform';\nimport NativeDialogManagerAndroid, {\n  type DialogOptions,\n} from '../NativeModules/specs/NativeDialogManagerAndroid';\nimport RCTAlertManager from './RCTAlertManager';\n\nexport type AlertType =\n  | 'default'\n  | 'plain-text'\n  | 'secure-text'\n  | 'login-password';\nexport type AlertButtonStyle = 'default' | 'cancel' | 'destructive';\nexport type Buttons = Array<{\n  text?: string,\n  onPress?: ?Function,\n  style?: AlertButtonStyle,\n  ...\n}>;\n\ntype Options = {\n  cancelable?: ?boolean,\n  onDismiss?: ?() => void,\n  ...\n};\n\n/**\n * Launches an alert dialog with the specified title and message.\n *\n * See https://reactnative.dev/docs/alert.html\n */\nclass Alert {\n  static alert(\n    title: ?string,\n    message?: ?string,\n    buttons?: Buttons,\n    options?: Options,\n  ): void {\n    if (Platform.OS === 'ios') {\n      Alert.prompt(title, message, buttons, 'default');\n    } else if (Platform.OS === 'android') {\n      if (!NativeDialogManagerAndroid) {\n        return;\n      }\n      const constants = NativeDialogManagerAndroid.getConstants();\n\n      const config: DialogOptions = {\n        title: title || '',\n        message: message || '',\n        cancelable: false,\n      };\n\n      if (options && options.cancelable) {\n        config.cancelable = options.cancelable;\n      }\n      // At most three buttons (neutral, negative, positive). Ignore rest.\n      // The text 'OK' should be probably localized. iOS Alert does that in native.\n      const defaultPositiveText = 'OK';\n      const validButtons: Buttons = buttons\n        ? buttons.slice(0, 3)\n        : [{text: defaultPositiveText}];\n      const buttonPositive = validButtons.pop();\n      const buttonNegative = validButtons.pop();\n      const buttonNeutral = validButtons.pop();\n\n      if (buttonNeutral) {\n        config.buttonNeutral = buttonNeutral.text || '';\n      }\n      if (buttonNegative) {\n        config.buttonNegative = buttonNegative.text || '';\n      }\n      if (buttonPositive) {\n        config.buttonPositive = buttonPositive.text || defaultPositiveText;\n      }\n\n      const onAction = (action, buttonKey) => {\n        if (action === constants.buttonClicked) {\n          if (buttonKey === constants.buttonNeutral) {\n            buttonNeutral.onPress && buttonNeutral.onPress();\n          } else if (buttonKey === constants.buttonNegative) {\n            buttonNegative.onPress && buttonNegative.onPress();\n          } else if (buttonKey === constants.buttonPositive) {\n            buttonPositive.onPress && buttonPositive.onPress();\n          }\n        } else if (action === constants.dismissed) {\n          options && options.onDismiss && options.onDismiss();\n        }\n      };\n      const onError = errorMessage => console.warn(errorMessage);\n      NativeDialogManagerAndroid.showAlert(config, onError, onAction);\n    }\n  }\n\n  static prompt(\n    title: ?string,\n    message?: ?string,\n    callbackOrButtons?: ?(((text: string) => void) | Buttons),\n    type?: ?AlertType = 'plain-text',\n    defaultValue?: string,\n    keyboardType?: string,\n  ): void {\n    if (Platform.OS === 'ios') {\n      let callbacks = [];\n      const buttons = [];\n      let cancelButtonKey;\n      let destructiveButtonKey;\n      if (typeof callbackOrButtons === 'function') {\n        callbacks = [callbackOrButtons];\n      } else if (Array.isArray(callbackOrButtons)) {\n        callbackOrButtons.forEach((btn, index) => {\n          callbacks[index] = btn.onPress;\n          if (btn.style === 'cancel') {\n            cancelButtonKey = String(index);\n          } else if (btn.style === 'destructive') {\n            destructiveButtonKey = String(index);\n          }\n          if (btn.text || index < (callbackOrButtons || []).length - 1) {\n            const btnDef = {};\n            btnDef[index] = btn.text || '';\n            buttons.push(btnDef);\n          }\n        });\n      }\n\n      RCTAlertManager.alertWithArgs(\n        {\n          title: title || '',\n          message: message || undefined,\n          buttons,\n          type: type || undefined,\n          defaultValue,\n          cancelButtonKey,\n          destructiveButtonKey,\n          keyboardType,\n        },\n        (id, value) => {\n          const cb = callbacks[id];\n          cb && cb(value);\n        },\n      );\n    }\n  }\n}\n\nmodule.exports = Alert;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}