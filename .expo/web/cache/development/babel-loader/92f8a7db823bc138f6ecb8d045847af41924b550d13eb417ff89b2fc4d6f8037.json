{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nvar _NativeTiming = _interopRequireDefault(require(\"./NativeTiming\"));\nvar BatchedBridge = require(\"../../BatchedBridge/BatchedBridge\");\nvar Platform = require(\"../../Utilities/Platform\");\nvar Systrace = require(\"../../Performance/Systrace\");\nvar invariant = require('invariant');\nvar FRAME_DURATION = 1000 / 60;\nvar IDLE_CALLBACK_FRAME_DEADLINE = 1;\nvar MAX_TIMER_DURATION_MS = 60 * 1000;\nvar IS_ANDROID = Platform.OS === 'android';\nvar ANDROID_LONG_TIMER_MESSAGE = 'Setting a timer for a long period of time, i.e. multiple minutes, is a ' + 'performance and correctness issue on Android as it keeps the timer ' + 'module awake, and timers can only be called when the app is in the foreground. ' + 'See https://github.com/facebook/react-native/issues/12981 for more info.';\nvar callbacks = [];\nvar types = [];\nvar timerIDs = [];\nvar immediates = [];\nvar requestIdleCallbacks = [];\nvar requestIdleCallbackTimeouts = {};\nvar GUID = 1;\nvar errors = null;\nvar hasEmittedTimeDriftWarning = false;\nfunction _getFreeIndex() {\n  var freeIndex = timerIDs.indexOf(null);\n  if (freeIndex === -1) {\n    freeIndex = timerIDs.length;\n  }\n  return freeIndex;\n}\nfunction _allocateCallback(func, type) {\n  var id = GUID++;\n  var freeIndex = _getFreeIndex();\n  timerIDs[freeIndex] = id;\n  callbacks[freeIndex] = func;\n  types[freeIndex] = type;\n  return id;\n}\nfunction _callTimer(timerID, frameTime, didTimeout) {\n  if (timerID > GUID) {\n    console.warn('Tried to call timer with ID %s but no such timer exists.', timerID);\n  }\n  var timerIndex = timerIDs.indexOf(timerID);\n  if (timerIndex === -1) {\n    return;\n  }\n  var type = types[timerIndex];\n  var callback = callbacks[timerIndex];\n  if (!callback || !type) {\n    console.error('No callback found for timerID ' + timerID);\n    return;\n  }\n  if (__DEV__) {\n    Systrace.beginEvent(type + ' [invoke]');\n  }\n  if (type !== 'setInterval') {\n    _clearIndex(timerIndex);\n  }\n  try {\n    if (type === 'setTimeout' || type === 'setInterval' || type === 'setImmediate') {\n      callback();\n    } else if (type === 'requestAnimationFrame') {\n      callback(global.performance.now());\n    } else if (type === 'requestIdleCallback') {\n      callback({\n        timeRemaining: function timeRemaining() {\n          return Math.max(0, FRAME_DURATION - (global.performance.now() - frameTime));\n        },\n        didTimeout: !!didTimeout\n      });\n    } else {\n      console.error('Tried to call a callback with invalid type: ' + type);\n    }\n  } catch (e) {\n    if (!errors) {\n      errors = [e];\n    } else {\n      errors.push(e);\n    }\n  }\n  if (__DEV__) {\n    Systrace.endEvent();\n  }\n}\nfunction _callImmediatesPass() {\n  if (immediates.length === 0) {\n    return false;\n  }\n  if (__DEV__) {\n    Systrace.beginEvent('callImmediatesPass()');\n  }\n  var passImmediates = immediates;\n  immediates = [];\n  for (var i = 0; i < passImmediates.length; ++i) {\n    _callTimer(passImmediates[i], 0);\n  }\n  if (__DEV__) {\n    Systrace.endEvent();\n  }\n  return immediates.length > 0;\n}\nfunction _clearIndex(i) {\n  timerIDs[i] = null;\n  callbacks[i] = null;\n  types[i] = null;\n}\nfunction _freeCallback(timerID) {\n  if (timerID == null) {\n    return;\n  }\n  var index = timerIDs.indexOf(timerID);\n  if (index !== -1) {\n    var type = types[index];\n    _clearIndex(index);\n    if (type !== 'setImmediate' && type !== 'requestIdleCallback') {\n      deleteTimer(timerID);\n    }\n  }\n}\nvar JSTimers = {\n  setTimeout: function setTimeout(func, duration) {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n    if (__DEV__ && IS_ANDROID && duration > MAX_TIMER_DURATION_MS) {\n      console.warn(ANDROID_LONG_TIMER_MESSAGE + '\\n' + '(Saw setTimeout with duration ' + duration + 'ms)');\n    }\n    var id = _allocateCallback(function () {\n      return func.apply(undefined, args);\n    }, 'setTimeout');\n    createTimer(id, duration || 0, Date.now(), false);\n    return id;\n  },\n  setInterval: function setInterval(func, duration) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      args[_key2 - 2] = arguments[_key2];\n    }\n    if (__DEV__ && IS_ANDROID && duration > MAX_TIMER_DURATION_MS) {\n      console.warn(ANDROID_LONG_TIMER_MESSAGE + '\\n' + '(Saw setInterval with duration ' + duration + 'ms)');\n    }\n    var id = _allocateCallback(function () {\n      return func.apply(undefined, args);\n    }, 'setInterval');\n    createTimer(id, duration || 0, Date.now(), true);\n    return id;\n  },\n  setImmediate: function setImmediate(func) {\n    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      args[_key3 - 1] = arguments[_key3];\n    }\n    var id = _allocateCallback(function () {\n      return func.apply(undefined, args);\n    }, 'setImmediate');\n    immediates.push(id);\n    return id;\n  },\n  requestAnimationFrame: function requestAnimationFrame(func) {\n    var id = _allocateCallback(func, 'requestAnimationFrame');\n    createTimer(id, 1, Date.now(), false);\n    return id;\n  },\n  requestIdleCallback: function requestIdleCallback(func, options) {\n    if (requestIdleCallbacks.length === 0) {\n      setSendIdleEvents(true);\n    }\n    var timeout = options && options.timeout;\n    var id = _allocateCallback(timeout != null ? function (deadline) {\n      var timeoutId = requestIdleCallbackTimeouts[id];\n      if (timeoutId) {\n        JSTimers.clearTimeout(timeoutId);\n        delete requestIdleCallbackTimeouts[id];\n      }\n      return func(deadline);\n    } : func, 'requestIdleCallback');\n    requestIdleCallbacks.push(id);\n    if (timeout != null) {\n      var timeoutId = JSTimers.setTimeout(function () {\n        var index = requestIdleCallbacks.indexOf(id);\n        if (index > -1) {\n          requestIdleCallbacks.splice(index, 1);\n          _callTimer(id, global.performance.now(), true);\n        }\n        delete requestIdleCallbackTimeouts[id];\n        if (requestIdleCallbacks.length === 0) {\n          setSendIdleEvents(false);\n        }\n      }, timeout);\n      requestIdleCallbackTimeouts[id] = timeoutId;\n    }\n    return id;\n  },\n  cancelIdleCallback: function cancelIdleCallback(timerID) {\n    _freeCallback(timerID);\n    var index = requestIdleCallbacks.indexOf(timerID);\n    if (index !== -1) {\n      requestIdleCallbacks.splice(index, 1);\n    }\n    var timeoutId = requestIdleCallbackTimeouts[timerID];\n    if (timeoutId) {\n      JSTimers.clearTimeout(timeoutId);\n      delete requestIdleCallbackTimeouts[timerID];\n    }\n    if (requestIdleCallbacks.length === 0) {\n      setSendIdleEvents(false);\n    }\n  },\n  clearTimeout: function clearTimeout(timerID) {\n    _freeCallback(timerID);\n  },\n  clearInterval: function clearInterval(timerID) {\n    _freeCallback(timerID);\n  },\n  clearImmediate: function clearImmediate(timerID) {\n    _freeCallback(timerID);\n    var index = immediates.indexOf(timerID);\n    if (index !== -1) {\n      immediates.splice(index, 1);\n    }\n  },\n  cancelAnimationFrame: function cancelAnimationFrame(timerID) {\n    _freeCallback(timerID);\n  },\n  callTimers: function callTimers(timersToCall) {\n    invariant(timersToCall.length !== 0, 'Cannot call `callTimers` with an empty list of IDs.');\n    errors = null;\n    for (var i = 0; i < timersToCall.length; i++) {\n      _callTimer(timersToCall[i], 0);\n    }\n    if (errors) {\n      var errorCount = errors.length;\n      if (errorCount > 1) {\n        for (var ii = 1; ii < errorCount; ii++) {\n          JSTimers.setTimeout(function (error) {\n            throw error;\n          }.bind(null, errors[ii]), 0);\n        }\n      }\n      throw errors[0];\n    }\n  },\n  callIdleCallbacks: function callIdleCallbacks(frameTime) {\n    if (FRAME_DURATION - (global.performance.now() - frameTime) < IDLE_CALLBACK_FRAME_DEADLINE) {\n      return;\n    }\n    errors = null;\n    if (requestIdleCallbacks.length > 0) {\n      var passIdleCallbacks = requestIdleCallbacks;\n      requestIdleCallbacks = [];\n      for (var i = 0; i < passIdleCallbacks.length; ++i) {\n        _callTimer(passIdleCallbacks[i], frameTime);\n      }\n    }\n    if (requestIdleCallbacks.length === 0) {\n      setSendIdleEvents(false);\n    }\n    if (errors) {\n      errors.forEach(function (error) {\n        return JSTimers.setTimeout(function () {\n          throw error;\n        }, 0);\n      });\n    }\n  },\n  callImmediates: function callImmediates() {\n    errors = null;\n    while (_callImmediatesPass()) {}\n    if (errors) {\n      errors.forEach(function (error) {\n        return JSTimers.setTimeout(function () {\n          throw error;\n        }, 0);\n      });\n    }\n  },\n  emitTimeDriftWarning: function emitTimeDriftWarning(warningMessage) {\n    if (hasEmittedTimeDriftWarning) {\n      return;\n    }\n    hasEmittedTimeDriftWarning = true;\n    console.warn(warningMessage);\n  }\n};\nfunction createTimer(callbackID, duration, jsSchedulingTime, repeats) {\n  invariant(_NativeTiming.default, 'NativeTiming is available');\n  _NativeTiming.default.createTimer(callbackID, duration, jsSchedulingTime, repeats);\n}\nfunction deleteTimer(timerID) {\n  invariant(_NativeTiming.default, 'NativeTiming is available');\n  _NativeTiming.default.deleteTimer(timerID);\n}\nfunction setSendIdleEvents(sendIdleEvents) {\n  invariant(_NativeTiming.default, 'NativeTiming is available');\n  _NativeTiming.default.setSendIdleEvents(sendIdleEvents);\n}\nvar ExportedJSTimers;\nif (!_NativeTiming.default) {\n  console.warn(\"Timing native module is not available, can't set timers.\");\n  ExportedJSTimers = {\n    callImmediates: JSTimers.callImmediates,\n    setImmediate: JSTimers.setImmediate\n  };\n} else {\n  ExportedJSTimers = JSTimers;\n}\nBatchedBridge.setImmediatesCallback(JSTimers.callImmediates);\nmodule.exports = ExportedJSTimers;","map":{"version":3,"names":["_interopRequireDefault","require","_NativeTiming","BatchedBridge","Platform","Systrace","invariant","FRAME_DURATION","IDLE_CALLBACK_FRAME_DEADLINE","MAX_TIMER_DURATION_MS","IS_ANDROID","OS","ANDROID_LONG_TIMER_MESSAGE","callbacks","types","timerIDs","immediates","requestIdleCallbacks","requestIdleCallbackTimeouts","GUID","errors","hasEmittedTimeDriftWarning","_getFreeIndex","freeIndex","indexOf","length","_allocateCallback","func","type","id","_callTimer","timerID","frameTime","didTimeout","console","warn","timerIndex","callback","error","__DEV__","beginEvent","_clearIndex","global","performance","now","timeRemaining","Math","max","e","push","endEvent","_callImmediatesPass","passImmediates","i","_freeCallback","index","deleteTimer","JSTimers","setTimeout","duration","_len","arguments","args","Array","_key","apply","undefined","createTimer","Date","setInterval","_len2","_key2","setImmediate","_len3","_key3","requestAnimationFrame","requestIdleCallback","options","setSendIdleEvents","timeout","deadline","timeoutId","clearTimeout","splice","cancelIdleCallback","clearInterval","clearImmediate","cancelAnimationFrame","callTimers","timersToCall","errorCount","ii","bind","callIdleCallbacks","passIdleCallbacks","forEach","callImmediates","emitTimeDriftWarning","warningMessage","callbackID","jsSchedulingTime","repeats","NativeTiming","sendIdleEvents","ExportedJSTimers","setImmediatesCallback","module","exports"],"sources":["/home/ahmed/Music/softtag/Source Code/node_modules/react-native/Libraries/Core/Timers/JSTimers.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst BatchedBridge = require('../../BatchedBridge/BatchedBridge');\nconst Platform = require('../../Utilities/Platform');\nconst Systrace = require('../../Performance/Systrace');\n\nconst invariant = require('invariant');\n\nimport NativeTiming from './NativeTiming';\n\n/**\n * JS implementation of timer functions. Must be completely driven by an\n * external clock signal, all that's stored here is timerID, timer type, and\n * callback.\n */\n\nexport type JSTimerType =\n  | 'setTimeout'\n  | 'setInterval'\n  | 'requestAnimationFrame'\n  | 'setImmediate'\n  | 'requestIdleCallback';\n\n// These timing constants should be kept in sync with the ones in native ios and\n// android `RCTTiming` module.\nconst FRAME_DURATION = 1000 / 60;\nconst IDLE_CALLBACK_FRAME_DEADLINE = 1;\n\nconst MAX_TIMER_DURATION_MS = 60 * 1000;\nconst IS_ANDROID = Platform.OS === 'android';\nconst ANDROID_LONG_TIMER_MESSAGE =\n  'Setting a timer for a long period of time, i.e. multiple minutes, is a ' +\n  'performance and correctness issue on Android as it keeps the timer ' +\n  'module awake, and timers can only be called when the app is in the foreground. ' +\n  'See https://github.com/facebook/react-native/issues/12981 for more info.';\n\n// Parallel arrays\nconst callbacks: Array<?Function> = [];\nconst types: Array<?JSTimerType> = [];\nconst timerIDs: Array<?number> = [];\nlet immediates: Array<number> = [];\nlet requestIdleCallbacks: Array<number> = [];\nconst requestIdleCallbackTimeouts: {[number]: number, ...} = {};\n\nlet GUID = 1;\nlet errors: ?Array<Error> = null;\n\nlet hasEmittedTimeDriftWarning = false;\n\n// Returns a free index if one is available, and the next consecutive index otherwise.\nfunction _getFreeIndex(): number {\n  let freeIndex = timerIDs.indexOf(null);\n  if (freeIndex === -1) {\n    freeIndex = timerIDs.length;\n  }\n  return freeIndex;\n}\n\nfunction _allocateCallback(func: Function, type: JSTimerType): number {\n  const id = GUID++;\n  const freeIndex = _getFreeIndex();\n  timerIDs[freeIndex] = id;\n  callbacks[freeIndex] = func;\n  types[freeIndex] = type;\n  return id;\n}\n\n/**\n * Calls the callback associated with the ID. Also unregister that callback\n * if it was a one time timer (setTimeout), and not unregister it if it was\n * recurring (setInterval).\n */\nfunction _callTimer(timerID: number, frameTime: number, didTimeout: ?boolean) {\n  if (timerID > GUID) {\n    console.warn(\n      'Tried to call timer with ID %s but no such timer exists.',\n      timerID,\n    );\n  }\n\n  // timerIndex of -1 means that no timer with that ID exists. There are\n  // two situations when this happens, when a garbage timer ID was given\n  // and when a previously existing timer was deleted before this callback\n  // fired. In both cases we want to ignore the timer id, but in the former\n  // case we warn as well.\n  const timerIndex = timerIDs.indexOf(timerID);\n  if (timerIndex === -1) {\n    return;\n  }\n\n  const type = types[timerIndex];\n  const callback = callbacks[timerIndex];\n  if (!callback || !type) {\n    console.error('No callback found for timerID ' + timerID);\n    return;\n  }\n\n  if (__DEV__) {\n    Systrace.beginEvent(type + ' [invoke]');\n  }\n\n  // Clear the metadata\n  if (type !== 'setInterval') {\n    _clearIndex(timerIndex);\n  }\n\n  try {\n    if (\n      type === 'setTimeout' ||\n      type === 'setInterval' ||\n      type === 'setImmediate'\n    ) {\n      callback();\n    } else if (type === 'requestAnimationFrame') {\n      callback(global.performance.now());\n    } else if (type === 'requestIdleCallback') {\n      callback({\n        timeRemaining: function() {\n          // TODO: Optimisation: allow running for longer than one frame if\n          // there are no pending JS calls on the bridge from native. This\n          // would require a way to check the bridge queue synchronously.\n          return Math.max(\n            0,\n            FRAME_DURATION - (global.performance.now() - frameTime),\n          );\n        },\n        didTimeout: !!didTimeout,\n      });\n    } else {\n      console.error('Tried to call a callback with invalid type: ' + type);\n    }\n  } catch (e) {\n    // Don't rethrow so that we can run all timers.\n    if (!errors) {\n      errors = [e];\n    } else {\n      errors.push(e);\n    }\n  }\n\n  if (__DEV__) {\n    Systrace.endEvent();\n  }\n}\n\n/**\n * Performs a single pass over the enqueued immediates. Returns whether\n * more immediates are queued up (can be used as a condition a while loop).\n */\nfunction _callImmediatesPass() {\n  if (immediates.length === 0) {\n    return false;\n  }\n\n  if (__DEV__) {\n    Systrace.beginEvent('callImmediatesPass()');\n  }\n\n  // The main reason to extract a single pass is so that we can track\n  // in the system trace\n  const passImmediates = immediates;\n  immediates = [];\n\n  // Use for loop rather than forEach as per @vjeux's advice\n  // https://github.com/facebook/react-native/commit/c8fd9f7588ad02d2293cac7224715f4af7b0f352#commitcomment-14570051\n  for (let i = 0; i < passImmediates.length; ++i) {\n    _callTimer(passImmediates[i], 0);\n  }\n\n  if (__DEV__) {\n    Systrace.endEvent();\n  }\n  return immediates.length > 0;\n}\n\nfunction _clearIndex(i: number) {\n  timerIDs[i] = null;\n  callbacks[i] = null;\n  types[i] = null;\n}\n\nfunction _freeCallback(timerID: number) {\n  // timerIDs contains nulls after timers have been removed;\n  // ignore nulls upfront so indexOf doesn't find them\n  if (timerID == null) {\n    return;\n  }\n\n  const index = timerIDs.indexOf(timerID);\n  // See corresponding comment in `callTimers` for reasoning behind this\n  if (index !== -1) {\n    const type = types[index];\n    _clearIndex(index);\n    if (type !== 'setImmediate' && type !== 'requestIdleCallback') {\n      deleteTimer(timerID);\n    }\n  }\n}\n\n/**\n * JS implementation of timer functions. Must be completely driven by an\n * external clock signal, all that's stored here is timerID, timer type, and\n * callback.\n */\nconst JSTimers = {\n  /**\n   * @param {function} func Callback to be invoked after `duration` ms.\n   * @param {number} duration Number of milliseconds.\n   */\n  setTimeout: function(func: Function, duration: number, ...args: any): number {\n    if (__DEV__ && IS_ANDROID && duration > MAX_TIMER_DURATION_MS) {\n      console.warn(\n        ANDROID_LONG_TIMER_MESSAGE +\n          '\\n' +\n          '(Saw setTimeout with duration ' +\n          duration +\n          'ms)',\n      );\n    }\n    const id = _allocateCallback(\n      () => func.apply(undefined, args),\n      'setTimeout',\n    );\n    createTimer(id, duration || 0, Date.now(), /* recurring */ false);\n    return id;\n  },\n\n  /**\n   * @param {function} func Callback to be invoked every `duration` ms.\n   * @param {number} duration Number of milliseconds.\n   */\n  setInterval: function(\n    func: Function,\n    duration: number,\n    ...args: any\n  ): number {\n    if (__DEV__ && IS_ANDROID && duration > MAX_TIMER_DURATION_MS) {\n      console.warn(\n        ANDROID_LONG_TIMER_MESSAGE +\n          '\\n' +\n          '(Saw setInterval with duration ' +\n          duration +\n          'ms)',\n      );\n    }\n    const id = _allocateCallback(\n      () => func.apply(undefined, args),\n      'setInterval',\n    );\n    createTimer(id, duration || 0, Date.now(), /* recurring */ true);\n    return id;\n  },\n\n  /**\n   * @param {function} func Callback to be invoked before the end of the\n   * current JavaScript execution loop.\n   */\n  setImmediate: function(func: Function, ...args: any) {\n    const id = _allocateCallback(\n      () => func.apply(undefined, args),\n      'setImmediate',\n    );\n    immediates.push(id);\n    return id;\n  },\n\n  /**\n   * @param {function} func Callback to be invoked every frame.\n   */\n  requestAnimationFrame: function(func: Function) {\n    const id = _allocateCallback(func, 'requestAnimationFrame');\n    createTimer(id, 1, Date.now(), /* recurring */ false);\n    return id;\n  },\n\n  /**\n   * @param {function} func Callback to be invoked every frame and provided\n   * with time remaining in frame.\n   * @param {?object} options\n   */\n  requestIdleCallback: function(func: Function, options: ?Object) {\n    if (requestIdleCallbacks.length === 0) {\n      setSendIdleEvents(true);\n    }\n\n    const timeout = options && options.timeout;\n    const id = _allocateCallback(\n      timeout != null\n        ? deadline => {\n            const timeoutId = requestIdleCallbackTimeouts[id];\n            if (timeoutId) {\n              JSTimers.clearTimeout(timeoutId);\n              delete requestIdleCallbackTimeouts[id];\n            }\n            return func(deadline);\n          }\n        : func,\n      'requestIdleCallback',\n    );\n    requestIdleCallbacks.push(id);\n\n    if (timeout != null) {\n      const timeoutId = JSTimers.setTimeout(() => {\n        const index = requestIdleCallbacks.indexOf(id);\n        if (index > -1) {\n          requestIdleCallbacks.splice(index, 1);\n          _callTimer(id, global.performance.now(), true);\n        }\n        delete requestIdleCallbackTimeouts[id];\n        if (requestIdleCallbacks.length === 0) {\n          setSendIdleEvents(false);\n        }\n      }, timeout);\n      requestIdleCallbackTimeouts[id] = timeoutId;\n    }\n    return id;\n  },\n\n  cancelIdleCallback: function(timerID: number) {\n    _freeCallback(timerID);\n    const index = requestIdleCallbacks.indexOf(timerID);\n    if (index !== -1) {\n      requestIdleCallbacks.splice(index, 1);\n    }\n\n    const timeoutId = requestIdleCallbackTimeouts[timerID];\n    if (timeoutId) {\n      JSTimers.clearTimeout(timeoutId);\n      delete requestIdleCallbackTimeouts[timerID];\n    }\n\n    if (requestIdleCallbacks.length === 0) {\n      setSendIdleEvents(false);\n    }\n  },\n\n  clearTimeout: function(timerID: number) {\n    _freeCallback(timerID);\n  },\n\n  clearInterval: function(timerID: number) {\n    _freeCallback(timerID);\n  },\n\n  clearImmediate: function(timerID: number) {\n    _freeCallback(timerID);\n    const index = immediates.indexOf(timerID);\n    if (index !== -1) {\n      immediates.splice(index, 1);\n    }\n  },\n\n  cancelAnimationFrame: function(timerID: number) {\n    _freeCallback(timerID);\n  },\n\n  /**\n   * This is called from the native side. We are passed an array of timerIDs,\n   * and\n   */\n  callTimers: function(timersToCall: Array<number>) {\n    invariant(\n      timersToCall.length !== 0,\n      'Cannot call `callTimers` with an empty list of IDs.',\n    );\n\n    errors = (null: ?Array<Error>);\n    for (let i = 0; i < timersToCall.length; i++) {\n      _callTimer(timersToCall[i], 0);\n    }\n\n    if (errors) {\n      const errorCount = errors.length;\n      if (errorCount > 1) {\n        // Throw all the other errors in a setTimeout, which will throw each\n        // error one at a time\n        for (let ii = 1; ii < errorCount; ii++) {\n          JSTimers.setTimeout(\n            (error => {\n              throw error;\n            }).bind(null, errors[ii]),\n            0,\n          );\n        }\n      }\n      throw errors[0];\n    }\n  },\n\n  callIdleCallbacks: function(frameTime: number) {\n    if (\n      FRAME_DURATION - (global.performance.now() - frameTime) <\n      IDLE_CALLBACK_FRAME_DEADLINE\n    ) {\n      return;\n    }\n\n    errors = (null: ?Array<Error>);\n    if (requestIdleCallbacks.length > 0) {\n      const passIdleCallbacks = requestIdleCallbacks;\n      requestIdleCallbacks = [];\n\n      for (let i = 0; i < passIdleCallbacks.length; ++i) {\n        _callTimer(passIdleCallbacks[i], frameTime);\n      }\n    }\n\n    if (requestIdleCallbacks.length === 0) {\n      setSendIdleEvents(false);\n    }\n\n    if (errors) {\n      errors.forEach(error =>\n        JSTimers.setTimeout(() => {\n          throw error;\n        }, 0),\n      );\n    }\n  },\n\n  /**\n   * This is called after we execute any command we receive from native but\n   * before we hand control back to native.\n   */\n  callImmediates() {\n    errors = (null: ?Array<Error>);\n    while (_callImmediatesPass()) {}\n    if (errors) {\n      errors.forEach(error =>\n        JSTimers.setTimeout(() => {\n          throw error;\n        }, 0),\n      );\n    }\n  },\n\n  /**\n   * Called from native (in development) when environment times are out-of-sync.\n   */\n  emitTimeDriftWarning(warningMessage: string) {\n    if (hasEmittedTimeDriftWarning) {\n      return;\n    }\n    hasEmittedTimeDriftWarning = true;\n    console.warn(warningMessage);\n  },\n};\n\nfunction createTimer(\n  callbackID: number,\n  duration: number,\n  jsSchedulingTime: number,\n  repeats: boolean,\n): void {\n  invariant(NativeTiming, 'NativeTiming is available');\n  NativeTiming.createTimer(callbackID, duration, jsSchedulingTime, repeats);\n}\n\nfunction deleteTimer(timerID: number): void {\n  invariant(NativeTiming, 'NativeTiming is available');\n  NativeTiming.deleteTimer(timerID);\n}\n\nfunction setSendIdleEvents(sendIdleEvents: boolean): void {\n  invariant(NativeTiming, 'NativeTiming is available');\n  NativeTiming.setSendIdleEvents(sendIdleEvents);\n}\n\nlet ExportedJSTimers: {|\n  callIdleCallbacks: (frameTime: number) => any | void,\n  callImmediates: () => void,\n  callTimers: (timersToCall: Array<number>) => any | void,\n  cancelAnimationFrame: (timerID: number) => void,\n  cancelIdleCallback: (timerID: number) => void,\n  clearImmediate: (timerID: number) => void,\n  clearInterval: (timerID: number) => void,\n  clearTimeout: (timerID: number) => void,\n  emitTimeDriftWarning: (warningMessage: string) => any | void,\n  requestAnimationFrame: (func: any) => any | number,\n  requestIdleCallback: (func: any, options: ?any) => any | number,\n  setImmediate: (func: any, ...args: any) => number,\n  setInterval: (func: any, duration: number, ...args: any) => number,\n  setTimeout: (func: any, duration: number, ...args: any) => number,\n|};\n\nif (!NativeTiming) {\n  console.warn(\"Timing native module is not available, can't set timers.\");\n  // $FlowFixMe: we can assume timers are generally available\n  ExportedJSTimers = ({\n    callImmediates: JSTimers.callImmediates,\n    setImmediate: JSTimers.setImmediate,\n  }: typeof JSTimers);\n} else {\n  ExportedJSTimers = JSTimers;\n}\n\nBatchedBridge.setImmediatesCallback(JSTimers.callImmediates);\n\nmodule.exports = ExportedJSTimers;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}