{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _NativeUIManager = _interopRequireDefault(require(\"./NativeUIManager\"));\nvar NativeModules = require(\"../BatchedBridge/NativeModules\");\nvar Platform = require(\"../Utilities/Platform\");\nvar UIManagerProperties = require(\"./UIManagerProperties\");\nvar defineLazyObjectProperty = require(\"../Utilities/defineLazyObjectProperty\");\nvar viewManagerConfigs = {};\nvar triedLoadingConfig = new Set();\nvar NativeUIManagerConstants = {};\nvar isNativeUIManagerConstantsSet = false;\nfunction _getConstants() {\n  if (!isNativeUIManagerConstantsSet) {\n    NativeUIManagerConstants = _NativeUIManager.default.getConstants();\n    isNativeUIManagerConstantsSet = true;\n  }\n  return NativeUIManagerConstants;\n}\nvar UIManagerJS = (0, _extends2.default)({}, _NativeUIManager.default, {\n  getConstants: function getConstants() {\n    return _getConstants();\n  },\n  getViewManagerConfig: function getViewManagerConfig(viewManagerName) {\n    if (viewManagerConfigs[viewManagerName] === undefined && _NativeUIManager.default.getConstantsForViewManager) {\n      try {\n        viewManagerConfigs[viewManagerName] = _NativeUIManager.default.getConstantsForViewManager(viewManagerName);\n      } catch (e) {\n        viewManagerConfigs[viewManagerName] = null;\n      }\n    }\n    var config = viewManagerConfigs[viewManagerName];\n    if (config) {\n      return config;\n    }\n    if (!global.nativeCallSyncHook) {\n      return config;\n    }\n    if (_NativeUIManager.default.lazilyLoadView && !triedLoadingConfig.has(viewManagerName)) {\n      var result = _NativeUIManager.default.lazilyLoadView(viewManagerName);\n      triedLoadingConfig.add(viewManagerName);\n      if (result.viewConfig) {\n        _getConstants()[viewManagerName] = result.viewConfig;\n        lazifyViewManagerConfig(viewManagerName);\n      }\n    }\n    return viewManagerConfigs[viewManagerName];\n  }\n});\n_NativeUIManager.default.getViewManagerConfig = UIManagerJS.getViewManagerConfig;\nfunction lazifyViewManagerConfig(viewName) {\n  var viewConfig = _getConstants()[viewName];\n  viewManagerConfigs[viewName] = viewConfig;\n  if (viewConfig.Manager) {\n    defineLazyObjectProperty(viewConfig, 'Constants', {\n      get: function get() {\n        var viewManager = NativeModules[viewConfig.Manager];\n        var constants = {};\n        viewManager && Object.keys(viewManager).forEach(function (key) {\n          var value = viewManager[key];\n          if (typeof value !== 'function') {\n            constants[key] = value;\n          }\n        });\n        return constants;\n      }\n    });\n    defineLazyObjectProperty(viewConfig, 'Commands', {\n      get: function get() {\n        var viewManager = NativeModules[viewConfig.Manager];\n        var commands = {};\n        var index = 0;\n        viewManager && Object.keys(viewManager).forEach(function (key) {\n          var value = viewManager[key];\n          if (typeof value === 'function') {\n            commands[key] = index++;\n          }\n        });\n        return commands;\n      }\n    });\n  }\n}\nif (Platform.OS === 'ios') {\n  Object.keys(_getConstants()).forEach(function (viewName) {\n    lazifyViewManagerConfig(viewName);\n  });\n} else if (_getConstants().ViewManagerNames) {\n  _NativeUIManager.default.getConstants().ViewManagerNames.forEach(function (viewManagerName) {\n    defineLazyObjectProperty(_NativeUIManager.default, viewManagerName, {\n      get: function get() {\n        return _NativeUIManager.default.getConstantsForViewManager(viewManagerName);\n      }\n    });\n  });\n}\nif (!global.nativeCallSyncHook) {\n  Object.keys(_getConstants()).forEach(function (viewManagerName) {\n    if (!UIManagerProperties.includes(viewManagerName)) {\n      if (!viewManagerConfigs[viewManagerName]) {\n        viewManagerConfigs[viewManagerName] = _getConstants()[viewManagerName];\n      }\n      defineLazyObjectProperty(_NativeUIManager.default, viewManagerName, {\n        get: function get() {\n          console.warn(\"Accessing view manager configs directly off UIManager via UIManager['\" + viewManagerName + \"'] \" + (\"is no longer supported. Use UIManager.getViewManagerConfig('\" + viewManagerName + \"') instead.\"));\n          return UIManagerJS.getViewManagerConfig(viewManagerName);\n        }\n      });\n    }\n  });\n}\nmodule.exports = UIManagerJS;","map":{"version":3,"names":["_interopRequireDefault","require","_extends2","_NativeUIManager","NativeModules","Platform","UIManagerProperties","defineLazyObjectProperty","viewManagerConfigs","triedLoadingConfig","Set","NativeUIManagerConstants","isNativeUIManagerConstantsSet","getConstants","NativeUIManager","UIManagerJS","default","getViewManagerConfig","viewManagerName","undefined","getConstantsForViewManager","e","config","global","nativeCallSyncHook","lazilyLoadView","has","result","add","viewConfig","lazifyViewManagerConfig","viewName","Manager","get","viewManager","constants","Object","keys","forEach","key","value","commands","index","OS","ViewManagerNames","includes","console","warn","module","exports"],"sources":["/home/ahmed/Music/softtag/Source Code/node_modules/react-native/Libraries/ReactNative/PaperUIManager.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst NativeModules = require('../BatchedBridge/NativeModules');\nconst Platform = require('../Utilities/Platform');\nconst UIManagerProperties = require('./UIManagerProperties');\n\nconst defineLazyObjectProperty = require('../Utilities/defineLazyObjectProperty');\n\nimport NativeUIManager from './NativeUIManager';\n\nconst viewManagerConfigs = {};\n\nconst triedLoadingConfig = new Set();\n\nlet NativeUIManagerConstants = {};\nlet isNativeUIManagerConstantsSet = false;\nfunction getConstants(): Object {\n  if (!isNativeUIManagerConstantsSet) {\n    NativeUIManagerConstants = NativeUIManager.getConstants();\n    isNativeUIManagerConstantsSet = true;\n  }\n  return NativeUIManagerConstants;\n}\n\n/* $FlowFixMe(>=0.123.0 site=react_native_fb) This comment suppresses an error\n * found when Flow v0.123.0 was deployed. To see the error, delete this comment\n * and run Flow. */\nconst UIManagerJS = {\n  ...NativeUIManager,\n  getConstants(): Object {\n    return getConstants();\n  },\n  getViewManagerConfig: function(viewManagerName: string): any {\n    if (\n      viewManagerConfigs[viewManagerName] === undefined &&\n      NativeUIManager.getConstantsForViewManager\n    ) {\n      try {\n        viewManagerConfigs[\n          viewManagerName\n        ] = NativeUIManager.getConstantsForViewManager(viewManagerName);\n      } catch (e) {\n        viewManagerConfigs[viewManagerName] = null;\n      }\n    }\n\n    const config = viewManagerConfigs[viewManagerName];\n    if (config) {\n      return config;\n    }\n\n    // If we're in the Chrome Debugger, let's not even try calling the sync\n    // method.\n    if (!global.nativeCallSyncHook) {\n      return config;\n    }\n\n    if (\n      NativeUIManager.lazilyLoadView &&\n      !triedLoadingConfig.has(viewManagerName)\n    ) {\n      const result = NativeUIManager.lazilyLoadView(viewManagerName);\n      triedLoadingConfig.add(viewManagerName);\n      if (result.viewConfig) {\n        getConstants()[viewManagerName] = result.viewConfig;\n        lazifyViewManagerConfig(viewManagerName);\n      }\n    }\n\n    return viewManagerConfigs[viewManagerName];\n  },\n};\n\n// TODO (T45220498): Remove this.\n// 3rd party libs may be calling `NativeModules.UIManager.getViewManagerConfig()`\n// instead of `UIManager.getViewManagerConfig()` off UIManager.js.\n// This is a workaround for now.\n// $FlowFixMe\nNativeUIManager.getViewManagerConfig = UIManagerJS.getViewManagerConfig;\n\nfunction lazifyViewManagerConfig(viewName) {\n  const viewConfig = getConstants()[viewName];\n  viewManagerConfigs[viewName] = viewConfig;\n  if (viewConfig.Manager) {\n    defineLazyObjectProperty(viewConfig, 'Constants', {\n      get: () => {\n        const viewManager = NativeModules[viewConfig.Manager];\n        const constants = {};\n        viewManager &&\n          Object.keys(viewManager).forEach(key => {\n            const value = viewManager[key];\n            if (typeof value !== 'function') {\n              constants[key] = value;\n            }\n          });\n        return constants;\n      },\n    });\n    defineLazyObjectProperty(viewConfig, 'Commands', {\n      get: () => {\n        const viewManager = NativeModules[viewConfig.Manager];\n        const commands = {};\n        let index = 0;\n        viewManager &&\n          Object.keys(viewManager).forEach(key => {\n            const value = viewManager[key];\n            if (typeof value === 'function') {\n              commands[key] = index++;\n            }\n          });\n        return commands;\n      },\n    });\n  }\n}\n\n/**\n * Copies the ViewManager constants and commands into UIManager. This is\n * only needed for iOS, which puts the constants in the ViewManager\n * namespace instead of UIManager, unlike Android.\n */\nif (Platform.OS === 'ios') {\n  Object.keys(getConstants()).forEach(viewName => {\n    lazifyViewManagerConfig(viewName);\n  });\n} else if (getConstants().ViewManagerNames) {\n  NativeUIManager.getConstants().ViewManagerNames.forEach(viewManagerName => {\n    defineLazyObjectProperty(NativeUIManager, viewManagerName, {\n      get: () => NativeUIManager.getConstantsForViewManager(viewManagerName),\n    });\n  });\n}\n\nif (!global.nativeCallSyncHook) {\n  Object.keys(getConstants()).forEach(viewManagerName => {\n    if (!UIManagerProperties.includes(viewManagerName)) {\n      if (!viewManagerConfigs[viewManagerName]) {\n        viewManagerConfigs[viewManagerName] = getConstants()[viewManagerName];\n      }\n      defineLazyObjectProperty(NativeUIManager, viewManagerName, {\n        get: () => {\n          console.warn(\n            `Accessing view manager configs directly off UIManager via UIManager['${viewManagerName}'] ` +\n              `is no longer supported. Use UIManager.getViewManagerConfig('${viewManagerName}') instead.`,\n          );\n\n          return UIManagerJS.getViewManagerConfig(viewManagerName);\n        },\n      });\n    }\n  });\n}\n\nmodule.exports = UIManagerJS;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}